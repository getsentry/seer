interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repositories/439438299
  response:
    body:
      string: !!binary |
        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
        HQn4fmN49vgfqMTnK40aAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:10:54 GMT
      ETag:
      - W/"49e597cea35ad5a9c97824986598788d36db5ab23bf998e1bbb3d1980d32cc1d"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E026:18BC7E:705EDAD:83B0A2C:677BF27E
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4999'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '1'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/branches/main
  response:
    body:
      string: !!binary |
        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
        eRMw6GPHjdN9fvkT/TE/orcTAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:10:55 GMT
      ETag:
      - W/"3e93798030c4bf1052ae0329418816b326e4fb55b3df0fdc2bee3a54717c647c"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E026:18BC7E:705EDF0:83B0A75:677BF27F
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4998'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '2'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/802f9b301520f83e63f6b47e6105226d85ce154e?recursive=1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:10:56 GMT
      ETag:
      - W/"d785e36cb46613bcad684414d2d703614ffe6622b99c6593455270d57cd3613c"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E026:18BC7E:705EE2A:83B0AC8:677BF27F
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4997'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '3'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71ROXOjSBTO51e4HK9tBEKCyRAC0TK0xH0kqqbB0NziFGztf1/kCSbZqsk263r9
        3nf+/ePl5RVhHHfdra/zuHr9+fI6I5p/R5RguGy5Z/mUyF0T5LbKZpxT9MRuLy6TT6yLHycdj01V
        83n7ZgjcZJmJIUWM3Cn5cbptwwd1nMd2n+oZMro97XATAD2ogmCeWRO8cXQHD66DXNXRznU7CkmR
        qq5rSH63PV4+r5u0kcm9BkDmel47lCgR426fpun1pIMqJsxtNJXCRwISE/9TMARTMIAp68rJozVy
        OJTS7qoWM4f86xWa/TZseJ3a7Pevfz1dx4+GtHF3I0/PDMvz39MO1038DCHt+6b7+fExTdN7UtdJ
        EaOGdO+4Lj/Q0KcfuKiH6K0pUP9Vt+XLn9a7e9HF7Uhw/F7UCan+eDCs66T6qt/jEpHiZVVVkeiX
        8u+ibv38S+ghRm3c/voh0e8W4/mchidMLuRs2gvYQAI6UPZNIIIdyBLWp+0FWvnWX3RGo+VSc8+5
        bxkkKH0WujbtLwmjLT4FLWHWjuu0lIgqnqnYE56Yn85GJ1/6+0rTYEZ7jupIMSa81KNKy5lP85uw
        Mha1jMaQjrrAZLOQpp4QaVw9IQADM326HP0JWtJ2pelhJc9QEeiAOTSwTId1RmNF3wZus8FWsgSn
        fIFHuY48MPjeYcIzW4U0X4UnZ4NpZ145h+jkDJH4myty9f+La4lc8OR6aCuWZvmTtugUPAoTzHJW
        s2z2ctSfe/V3BRUs1nzm2GSbcH5W4/S+W3QgqwkqnSEkbB+5zhAwRhrRToFP/PqGqa78953HBAUu
        ixK5Tg6yhsKVU3z7l/na92D9jeuktVtEjXl6mKEn+5qTwjWH3M7zjW4+sYo0WrVpFl5gJq2Zgc1F
        nEjgpdN6/4CLtvrCqw97u1afM3tLlBpJaKCSJ2dLjezPSryCcC5VcUqmksuZRtCcy8P1rRRNCYdv
        8iRZ0OLIJfJvd0UcB15oVNUUKgpWdMBuFd66MvVF4lBiFW7N2Hp2bUXN2mdawlWRtbO/3rZ3Y6TY
        GxNnCo3j+z7Szwi9Hc152OajnzMOS1OUekNj1QRetatMuT2g1pYk7/EFTjGaZk3lJUSAimaZGnPK
        +3J2BeD0TzyCnUtIx7Gx63tdWTE3psBdOe+yra2LHBc2BD8yaO6vS/Cmmd6IT/acgN6UVG0awmjc
        OE5t2Jv0aO12wQ7bpRLD8/1m0UlXldc2uJdah0qVh5DxRmYEHoeibvh0tIcsKi2uC/31xz//Ao37
        HbaWBQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:10:58 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}], "stream":
      true, "system": "You are an exceptional principal engineer that is amazing at
      finding and fixing issues in codebases.\n\nYou have access to tools that allow
      you to search a codebase to find the relevant code snippets and view relevant
      files. You can use these tools as many times as you want to find the relevant
      code snippets.\n\n# Guidelines:\n- EVERY TIME before you use a tool, think step-by-step
      each time before using the tools provided to you.\n- You also MUST think step-by-step
      before giving the final answer.", "tools": [{"name": "list_directory", "description":
      "Given the path for a directory in this codebase, returns the immediate contents
      of the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '13861'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-8911d79586c32c98-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        CwAAAP//AwBqWSE9kyIAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 15:11:00 GMT
      request-id:
      - req_vrtx_01V6Wv5WxFN625JZ6jHaXCLr
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=802f9b301520f83e63f6b47e6105226d85ce154e
  response:
    body:
      string: !!binary |
        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
        jXP+F/6PwB9//AeFeGlw+iEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:04 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:00 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E026:18BC7E:705F181:83B0EA3:677BF280
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4996'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '4'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71UuZKjSBT05ys62l51czSiGQ+EOASUmvtwFFDcVyEOIdjYf1/oMcbZiPHWq8iq
        zHz5MqL+/vHy8hpCmAzDbURV0r7+fHldQoJ5CzHWcKmGpim8ldKxYLopxOLFoyWBPHw2ynQO8VK8
        fAmwjjg2weFhUoZIPQTIY/VHat3bo0vnqTY/OF7s+JH3ltq6fqZzHWSq1yoF7qIRj4bzo/FM3Msf
        /TGombS9Y0l9b60s5jrjcOSEupGfDnJl6tSvwNAeGclwV7WydEW4cBmrssZjDk+Zr7BQNllDNgVd
        Ej1CK3gG9MmTM+93tRQ6Zey+8HHNMJymX//aUyfPruiT4VbsmUmKYb7RAaIu2ZeQj2M3/Hx/n+f5
        LUMoq5OwK4Y3iJr3cBrzd1ijKT50dTimqG9e/vR8uNdD0j8KmLzVKCval82mLeI/8qaNVbQpekua
        sKh/Tf5d1G1cfg3KJWGf9L9uivh3i8lyySMRFtfiYtqrjINCHuRm7IKTfJTLjPIJewVW9eGvOqkR
        QqO5l8q3jCJofAq4NuGvGamtPgYsdtH4DW3OhXq6YInH7pqKg+tFqr9tNh0ktR1CsWTMcEUPlRBK
        n2DwqDVWtYkfEREPgUmVEYHtEnnS7hIyCUp9vvL+DKzzx2YzglZYgMQSAcl1oMmnDSOgpH8EbodD
        K1sDsVoBL6DYkyff42a4UG1EMG0kOjgknGXznGLRmeLTb6/Y1f8vrzV25d3rqW1amuXP2qpjgGdn
        UFaUZtnUldf3d+i7ghbU236WxKS6aNmrcUbfrQe5REXYOFNUUGPsOlNAGnlMODUUme0Mcl36b55H
        BjVs6iZ0nUouOwy2Tv2dX2CQ7wG06wbVZQk94RitwPHLanYayg5WY3abPLDNXavO4202zYIrKM/b
        zmQCmHMRePm88Z9g1bZccMvh41v1KLodF7C2lHwlUCpRKFQy4YlB/XCSGeZT0Vrfzcy4tbpkhpHR
        Xc5mE537iTY/yaBBvM1nYrhwLVoSHTumsme35t2nY/RUe9H+oAGL+8jBYPAZp3QxBhm64meLN1RD
        L0NCYh4NYN0kx42DaKw3HSLGRlLJ2ZUyqmlc0iHszwdx6jHjcIPtMS9l6VbRpcsrvXBeEX272V8U
        VgoUTbnaSEbmV2j7x2cWsNunpVOKfyQNA8LVmXXLm+0J6lgfpl/SCOCiKs/A1o4rr/kwlPTuzB09
        9SaSMrU8Iw0Xio+rMBxSlxKYKKLNkeLuCF0sHCFJ78fliaOhkhBBM9bA+lifcoxaq3zv3ufXH//8
        C0PQHA+WBQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:05 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for coming
      up with a fix for the issue:\nnot started yet\n\nWrite the next under-20-word
      conclusion in the chain of thought based on the notes below.  The criteria for
      a good conclusion are that it should be a large, novel jump in insights, not
      similar to any item in the existing chain of thought, it should be a complete
      conclusion after some meaty analysis, not a plan of what to analyze next, and
      it should be valuable for coming up with a fix for the issue. It should also
      be very concrete, to-the-point, and specific. Every item in the chain of thought
      should read like a chain that clearly builds off of the previous step.\n\nIf
      you do write something, write it so that someone else could immediately understand
      your point in detail.\n\nNOTES TO ANALYZE:\nLet me analyze this step by step.\n\n1.
      First, let''s understand the error:\n- It''s a ValidationError for RootCauseAnalysisItem\n-
      The error specifically mentions `unit_test.snippet` field is required\n- From
      the error context, we can see there are commented out sections in the code involving
      unit_test\n- The issue occurs in `src/seer/automation/autofix/components/root_cause/models.py`\n\n2.
      Let''s examine the relevant file first:", "role": "user"}], "model": "gpt-4o-mini-2024-07-18",
      "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1330'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-904d97889b1b5d40-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySz27bMAzG734KQuc4SJw0XnNbgT3Aim09DIOrSLStVBYFUQ4WFHn3Qc4fO+gG
        7KLD9yM/8CP1ngEIo8UWhGplVJ23+eduX/Sb48uzk4eXRfP49NyVBfHefP3+gGKWOmi3RxWvXXNF
        nbcYDbkzVgFlxOS6LFebZbkpNusBdKTRprbGx3xNeWecyYtFsc4XZb78dOluyShksYWfGQDA+/Cm
        OZ3G32ILi9lV6ZBZNii2tyIAEcgmRUhmw1G6KGYjVOQiumH0bwQBmewBIbYIP6Q1WqYQX0KgMAN0
        3Icze+2diVVEjnN2xnuMr1AbtBoMgw/kMdgjePK9TcFhhzUFhMPNEkipPvB8OkrAumeZ1uF6ay/6
        6ZbNUuMD7fjCb3ptnOG2CiiZXMrBkbwY6CkD+DXssL9bi/CBOh+rSG/okmFRXnYoxtNN6OoCI0Vp
        J/rjFdz5VRqjNJYnVxBKqhb12DqeTPba0ARkk9Qfp/mb9zm5cc3/2I9AKfQRdeUDaqPuE49lAdPP
        /lfZbcvDwIKPHLGrauMaDD6Y87+qfaUXhX5YLXfrUmSn7A8AAAD//wMA5pNtS2UDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdca3766bfd10d6-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 15:11:05 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=tgbTAqzttN9OMeU84.4ru5AGro3rHermhTOSxnmoyhg-1736176265-1.0.1.1-y7l_yPsgPTNDVtXfcZDwj_k.Yz8X6EbKf3gqSxYB06KKbavqT7iRsXdWpjy32EVPV7gRIoYkuVh7s49jPsUwPg;
        path=/; expires=Mon, 06-Jan-25 15:41:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=O8F6HJNn5JAU9urFoCA57OP3mtjDkZdUUP3amQwQllI-1736176265616-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '577'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999680'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_788204eee73f72240d35cb7f3959a9bb
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer.", "role": "user"},
      {"content": "Let me analyze this step by step.\n\n1. First, let''s understand
      the error:\n- It''s a ValidationError for RootCauseAnalysisItem\n- The error
      specifically mentions `unit_test.snippet` field is required\n- From the error
      context, we can see there are commented out sections in the code involving unit_test\n-
      The issue occurs in `src/seer/automation/autofix/components/root_cause/models.py`\n\n2.
      Let''s examine the relevant file first:", "role": "assistant"}, {"content":
      "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel, StringConstraints,
      field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "role":
      "user"}, {"content": "Return the pieces of context from the issue details or
      the files in the codebase that are directly relevant to the text below:\nTo
      resolve the ValidationError, ensure the `unit_test.snippet` field is properly
      populated before validation occurs.\n\nThat means choose the most relevant codebase
      snippets (codebase_context), event logs (breadcrumb_context), or stacktrace/variable
      data (stacktrace_context), that show specifically what the text mentions. Don''t
      include any repeated information; just include what''s needed.\n\nAlso provide
      a one-line explanation of how the pieces of context directly explain the text.\n\nTo
      know what''s needed, reference these notes:\nLet me analyze this step by step.\n\n1.
      First, let''s understand the error:\n- It''s a ValidationError for RootCauseAnalysisItem\n-
      The error specifically mentions `unit_test.snippet` field is required\n- From
      the error context, we can see there are commented out sections in the code involving
      unit_test\n- The issue occurs in `src/seer/automation/autofix/components/root_cause/models.py`\n\n2.
      Let''s examine the relevant file first:", "role": "user"}], "model": "gpt-4o-mini-2024-07-18",
      "max_tokens": 4096, "response_format": {"type": "json_schema", "json_schema":
      {"schema": {"$defs": {"BreadcrumbContext": {"properties": {"type": {"title":
      "Type", "type": "string"}, "category": {"title": "Category", "type": "string"},
      "body": {"title": "Body", "type": "string"}, "level": {"title": "Level", "type":
      "string"}, "data_as_json": {"title": "Data As Json", "type": "string"}}, "required":
      ["type", "category", "body", "level", "data_as_json"], "title": "BreadcrumbContext",
      "type": "object", "additionalProperties": false}, "CodeSnippetContext": {"properties":
      {"repo_name": {"title": "Repo Name", "type": "string"}, "file_path": {"title":
      "File Path", "type": "string"}, "snippet": {"title": "Snippet", "type": "string"}},
      "required": ["repo_name", "file_path", "snippet"], "title": "CodeSnippetContext",
      "type": "object", "additionalProperties": false}, "StacktraceContext": {"properties":
      {"file_name": {"title": "File Name", "type": "string"}, "repo_name": {"title":
      "Repo Name", "type": "string"}, "function": {"title": "Function", "type": "string"},
      "line_no": {"title": "Line No", "type": "integer"}, "col_no": {"title": "Col
      No", "type": "integer"}, "code_snippet": {"title": "Code Snippet", "type": "string"},
      "vars_as_json": {"title": "Vars As Json", "type": "string"}}, "required": ["file_name",
      "repo_name", "function", "line_no", "col_no", "code_snippet", "vars_as_json"],
      "title": "StacktraceContext", "type": "object", "additionalProperties": false}},
      "properties": {"explanation": {"title": "Explanation", "type": "string"}, "codebase_context":
      {"items": {"$ref": "#/$defs/CodeSnippetContext"}, "title": "Codebase Context",
      "type": "array"}, "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"},
      "title": "Stacktrace Context", "type": "array"}, "event_log_context": {"items":
      {"$ref": "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type":
      "array"}}, "required": ["explanation", "codebase_context", "stacktrace_context",
      "event_log_context"], "title": "InsightContextOutput", "type": "object", "additionalProperties":
      false}, "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19602'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-9e62241e64ac346f-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA8xW3W/bNhB/919xUB7qFLLj2FnSCchDVqRDgX01TTZgcaAw1MliS5EseUpieP7f
        B1KyJLdat77NDxJ997uf7otHbkYAkciiBCJeMOKlkZOL8sP86d0f7+ZPb3Dx083N29MrcUnF7OzP
        8uI6ir2FfviAnHZWU65LI5GEVrWaW2SEnvX4bHF6fHY6Pz0NilJnKL3ZytDkRE9KocRkPpufTGZn
        k+NXjXWhBUcXJXA7AgDYhKf3U2X4HCUwi3eSEp1jK4ySFgQQWS29JGLOCUdMURR3Sq4VoQqub5YK
        YBnhs5FMMe/9MkpgGV0XCMbqR5FhBgH/TFCIVSHFqiAHVCBY/FQJiyUqglzbILuvlKCU0NHUKWEM
        0j3kAmUGQtWAK63pNascXigm1064t4TlPYSsxPBUCF6AcMAra1GRXAPXpf8EZqArikEiy4RaAenA
        9zuTIguOX1qr7XQZxXVIXGf4wBymjfc+rluvAtjUL4+yaHSqWIl12Cskh4rs+sgh2oarRuZCYmoY
        FTXSWR4wR6wiXQYHwjIXz0e+FbRCRe7Iak0p9+EehQjd1Kz3aJss1aRcMudgMEPjH5jDnz3FYbKs
        zUWWgFAE5zA5bkQkSGICjmwjyNBxK4x3ry8+gLZOCdwoQdfo6H3tCvwFv2iFcB5erYFFY3VW8ZZq
        EOezvst4Ar+GDzN5K4Wj2zauK5T4yBS9rnF3dzuOqCbZxv/zOmWYA+k0IMcOZd7WxCJVVg2XcBrw
        6WPdsThe7th9pN3a/16+9KyNQVaVZnwYfwY5gOUy5KWtiv+fQDDsi1OhHNl67YZZ2maoKcZfgIZ8
        PGhX3qpLe+dFNwtabfxVkl2ShyhCZzWAr7P0en6QqacfJtoOSkX+GdEgCqXD/obotIdx29/+ddfM
        KUeMfyTL+L9MqpDCbgcMd+k3bJNK8W7c75p5DyKFwlRpjzhezHoKruVOviftClSzfstm2Ox9+pFZ
        lzKXfnA7DzehP1DmdUn9c5D3N6tLQ+MwCM9fXJaG1vC+TXHvuIA3TMjKoj+YfrS6MkKtrvBThY4g
        zNkXcX96nk+n08PtYAXxERWlUq/2Cni3VNv+oWsxrxzzB7+qpGzk2/YUl3plrH5wjb6V50IJV6QW
        mdPKn9iOtImCdjvyPvjbQrV3AYhMyEFK+iMqT7j4/mxeE0bdLaVTnywWjZY0MdlTnMy+iwco0wyJ
        Cel6V46IM15g1tl29xNWZUL3FKNe4F/6M8RdBy/U6r/QdwrO0RBmqbGYCb4fcwez6K9x/wRrEx0c
        jtzaEZZpLtQKrbGivkTlJp0x9ipb4Hz2EI22o78BAAD//wMAHZ0MIlIKAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdca37cdbe54b9b-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 15:11:11 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=8x.QsmZMcBHAcvYeuPbmH2TDMDvyZ6BLAt3k661ezqo-1736176271-1.0.1.1-K0HfnTyLFm0fYg_8wJBAukT9FnnymeqvIWDgobKK.xRtZcOk5XTZbnx8z5Fyfq.D5_XYjpm62YisIoFQDWtBIg;
        path=/; expires=Mon, 06-Jan-25 15:41:11 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=t1KOI5dZBwQzFIFJFWzuu1N5oDFDoANmX8tP9jSlA6U-1736176271148-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '5060'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149991828'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_91dc0b8100968d3d10a9aae4734c9d29
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_018demMaXbc7NFJb6LKwC6NU",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_018demMaXbc7NFJb6LKwC6NU"}]}], "stream": true, "system": "You are
      an exceptional principal engineer that is amazing at finding and fixing issues
      in codebases.\n\nYou have access to tools that allow you to search a codebase
      to find the relevant code snippets and view relevant files. You can use these
      tools as many times as you want to find the relevant code snippets.\n\n# Guidelines:\n-
      EVERY TIME before you use a tool, think step-by-step each time before using
      the tools provided to you.\n- You also MUST think step-by-step before giving
      the final answer.", "tools": [{"name": "list_directory", "description": "Given
      the path for a directory in this codebase, returns the immediate contents of
      the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19894'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-9f41f5910ed3e78a-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        byHLKSFSAgAAAP//AwDnmPLGRMEAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 15:11:07 GMT
      request-id:
      - req_vrtx_01XC8ANSYs29LZjuL1gkkDYt
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71RuZKjSBD15ys62l6pOXWMJ4QQhQSI+3AUUBRQ3BIgjo3990U9xjgbMd56FVn5
        rnx///j4+AwgRG177+ocVZ8/Pz6ngNqvA+KgO2y5ZZpTk5CX7QkWr5NTe6eq5h9Vz5cabtSVVOzC
        4va4mQFLGyNQmXy8PE68OVbK7cx5EYv4eyQSlRNXVMte4FnetZPJOYCoi2bDHS2wqSm3RAMbB35G
        PLok3Vx1Ee5yvQ1G63yDTNBFKeYe24iOKVqP+0QYV/Lx3qMdN14t2dx3WnBMvMvB84yDDgxBE88u
        JeNms50I4uh7p15rrOeqWlHOPSHI7fbzr3dqNDb4ido7fmem2f3+e9rCukHvI6Rd17Q/v76GYVgn
        dZ0UKGhwu4Z1+RX0XfoFi7qPVk0RdHH9LD8WVIWjjz+h+hY9cRXXa1QGuPjjevsoFsALQ7Qu6mRx
        +u3xu6h7N/0yyqHgiZ6/fnD0u0U0SWl4hljFkmHNgFQwaEHZNf4RbECWsB5lzYqZM96s0TIllLIj
        5Z6pY7/0WMWxKG9OaHn2CMU8TDK/TMsTvh4lArmHN+fFJjUca+tFpoG0/B7VkagPcK5fV0rIPGpP
        hpU+X8voFVJR6xtsFlLEmyJF1ZsC0EqmDSrvDYp5YhaZTqmESREPlE9zjVKm/TKjoKgxvtOQ0Exm
        /5zPCi/UkQt6z+UGOLFVSO2r8GyTkLKnRbOPznYfHX9rRY72f2nNkQPeWqO8cMmmN8izRij8YVCy
        nJVNi1V57b1Xf1dQKcVynwkZbBNO72rsznOKFmQ1Dkq7DzHbRY7d+7SeRpRdwPN+eSupJv43zqX9
        ApZFGTh2DrKGgJVdfOcX9rXnKvWbV6Z07FXCExYSiSpthgQpQYslrExiNePNVaTR4k024axkp+Vm
        gFGNAftuOiz4UZnlJRdcciTsUv05Buh+51QwVnsEEFc/b+3odpLeGhdpFmNK6uknAJosMkCJR6Q4
        t5EoOenMXqnXQDDc5npRYgmXQiHVqgMPQUtEUlUhQQUDv+2wWwtXAGs110WOki0Bj4758Mw62WiZ
        xQs3O9woR829mlP6MNLyZhdYFkl1RYmRxJVcdy0OJ9wjh1dXfkgD/kjue6QQIwmiYXW42rjQcvpy
        QH4bMGHIGGWc32TmHt6PLh1lR0nDUyVGLbtZNZJtTCehal1DG9iZvRMbHolJtxULz3/t3ZEb4iNm
        C37HdOM8YcfYdSS1JaSqvxKiv3NGumNBtdneaCLPjGesT2Yi0tuSHQ9PSgFKaebbprXGl/b5459/
        AWzUA1SWBQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:29 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_018demMaXbc7NFJb6LKwC6NU",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_018demMaXbc7NFJb6LKwC6NU"}]}, {"role": "assistant", "content": [{"type":
      "text", "text": "\n\nLet me analyze the issue step by step:\n\n1. Looking at
      the error message:\n```\nValidationError: 1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n```\n\n2. Looking at the code:\n- The error
      occurs when trying to convert a RootCauseAnalysisItemPrompt to a RootCauseAnalysisItem
      model\n- The issue appears to be that the unit_test field is commented out in
      several places in models.py\n- The user instruction states \"we should uncomment
      out the unit test parts\"\n\n3. The fix involves uncommenting and properly handling
      the unit test related fields in 3 locations in models.py:\n- RootCauseAnalysisItem
      class fields\n- RootCauseAnalysisItemPrompt class fields\n- to_model() method
      contents\n\nHere''s the detailed fix plan:\n\n1. In `src/seer/automation/autofix/components/root_cause/models.py`,
      make the following changes:\n\n```diff\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n-   # unit_test: UnitTestSnippet
      | None = None\n-   # reproduction: str | None = None\n+   unit_test: UnitTestSnippet
      | None = None\n+   reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title: str\n    description:
      str\n-   # reproduction_instructions: str | None = None\n-   # unit_test: UnitTestSnippetPrompt
      | None = None\n+   reproduction_instructions: str | None = None\n+   unit_test:
      UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n-           #
      reproduction_instructions=model.reproduction,\n-           # unit_test=(\n-           #     UnitTestSnippetPrompt(\n-           #         file_path=model.unit_test.file_path,\n-           #         code_snippet=model.unit_test.snippet,\n-           #         description=model.unit_test.description,\n-           #     )\n-           #     if
      model.unit_test\n-           #     else None\n-           # ),\n+           reproduction_instructions=model.reproduction,\n+           unit_test=(\n+               UnitTestSnippetPrompt(\n+                   file_path=model.unit_test.file_path,\n+                   code_snippet=model.unit_test.snippet,\n+                   description=model.unit_test.description,\n+               )\n+               if
      model.unit_test\n+               else None\n+           ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n-               #
      \"reproduction\": self.reproduction_instructions,\n-               # \"unit_test\":
      (\n-               #     {\n-               #         \"file_path\": self.unit_test.file_path,\n-               #         \"snippet\":
      self.unit_test.code_snippet,\n-               #         \"description\": self.unit_test.description,\n-               #     }\n-               #     if
      self.unit_test\n-               #     else None\n-               # ),\n+               \"reproduction\":
      self.reproduction_instructions,\n+               \"unit_test\": (\n+                   {\n+                       \"file_path\":
      self.unit_test.file_path,\n+                       \"snippet\": self.unit_test.code_snippet,\n+                       \"description\":
      self.unit_test.description,\n+                   }\n+                   if self.unit_test\n+                   else
      None\n+               ),\n                \"code_context\": (\n                    self.relevant_code.model_dump()[\"snippets\"]
      if self.relevant_code else None\n                ),\n            }\n        )\n```\n\nThis
      fix:\n1. Uncomments all the unit test and reproduction related fields in both
      the RootCauseAnalysisItem and RootCauseAnalysisItemPrompt classes\n2. Uncomments
      the unit test and reproduction handling in the from_model() method\n3. Uncomments
      the unit test and reproduction handling in the to_model() method\n\nThe changes
      ensure that:\n- The unit test fields are properly defined in the models\n- The
      conversion between models correctly handles these fields\n- The validation error
      for the missing unit_test.snippet field should be resolved\n\nAfter making these
      changes, the model validation should work correctly when unit test information
      is included in the data."}]}, {"role": "user", "content": [{"type": "text",
      "text": "Break down the task of fixing the issue into steps. Your list of steps
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nEnclose this plan between <plan_steps> and </plan_steps>
      tags. Make sure to strictly follow this format and include all necessary details
      within the tags. Your output must follow the format properly according to the
      following guidelines:\n\n<plan_steps>\n<step file_path=\"path/to/file.py\" repo_name=\"owner/repo\"
      type=\"Either ''file_change'', ''file_create'', or ''file_delete''\">\n<diff>\n#
      Here provide the EXACT unified diff of the code change required to accomplish
      this step.\n# You must prefix lines that are removed with a ''-'' and lines
      that are added with a ''+''. Context lines around the change are required and
      must be prefixed with a space.\n# Make sure the diff is complete and the code
      is EXACTLY matching the files you see.\n# For example:\n--- a/path/to/file.py\n+++
      b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return ''fab''\n    y = 2\n    x = 1\n-def
      foo():\n+def foo():\n    return ''foo''\n    def bar():\n    return ''bar''\n</diff>\n<description>\nDescribe
      what you are doing here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n<step
      file_path=\"path/to/file.py\" repo_name=\"owner/repo\" type=\"Either ''file_change'',
      ''file_create'', or ''file_delete''\">\n<diff>\n# Here provide the EXACT unified
      diff of the code change required to accomplish this step.\n# You must prefix
      lines that are removed with a ''-'' and lines that are added with a ''+''. Context
      lines around the change are required and must be prefixed with a space.\n# Make
      sure the diff is complete and the code is EXACTLY matching the files you see.\n#
      For example:\n--- a/path/to/file.py\n+++ b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return
      ''fab''\n    y = 2\n    x = 1\n-def foo():\n+def foo():\n    return ''foo''\n    def
      bar():\n    return ''bar''\n</diff>\n<description>\nDescribe what you are doing
      here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n</plan_steps>\n\n#
      Guidelines:\n- Each file change must be a separate step and be explicit and
      clear.\n  - You MUST include exact file paths for each step you provide. If
      you cannot, find the correct path.\n- No placeholders are allowed, the steps
      must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting the
      steps.\n- The plan must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- Make sure any new files you create don''t
      already exist, if they do, modify the existing file.\n- EVERY TIME before you
      use a tool, think step-by-step each time before using the tools provided to
      you.\n- You also MUST think step-by-step before giving the final answer."}]}],
      "stream": true, "tools": [{"name": "list_directory", "description": "Given the
      path for a directory in this codebase, returns the immediate contents of the
      directory such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '27712'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-ae6e9dcf4aa5ad72-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        AgAAAP//AwDgNQNZO78AAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 15:11:32 GMT
      request-id:
      - req_vrtx_01Fop1NbxXSAzUjXhN6oZu2U
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=802f9b301520f83e63f6b47e6105226d85ce154e
  response:
    body:
      string: !!binary |
        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
        jXP+F/6PwB9//AeFeGlw+iEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:53 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:00 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E079:E60EE:713A390:848C463:677BF2B9
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4995'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '5'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=802f9b301520f83e63f6b47e6105226d85ce154e
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA9Vaa2+jSBb9L/k8mvAImWak1cq4Y8BO3DGOAaNILfOwTcxrAo4fo/nve6ooMGA7
        0zMjrXY/pOMYquo+zz33Vv9+kyzi4ObXmzj1gyj/OTvc/HSTLYo1vsrfvds8CN5vF9sijRdFmCb0
        4zLc33ppnKVJkBT57XuaFt+9xTYPbpub5OsF9hBcTxIkHv8E/hfXcxfLu3t/6UvCF2/5ReQC2Qvu
        uCXH49Q8PEIQ6U745aeb7XuExeuiyPJfb28XWfjzKizWW/dnnHv7HmRpfrsKihznvx9KGb00Kag4
        /0Dqf78Hy3994YSl7IocLwkcRAzuxeW9e/dLcM9zkiDc+18kL+CluwASr4s4+t4WtSFmR0A3St3b
        H938n2gBwSBFR64fMSFW3RIp89u/4DU/3SVRuvA7570vdsxliIt35hzqvY5Z/ksWKQ4ZifJlGBHH
        MXnwhZMMP9ypwgW2krmxt1pY/M4Vh5z+MNi6sczNbSNy+rvVi6hwC0vezq3dqB87B1fgVq+Jp0Wb
        uSXhyVNj5XDtCebYFYzIxcqZaBwWlpRMBHnr4fPcira+9pS/JrrqZI6139iis3ZV7GQbH94qi71Y
        LnRNkRx1sPXV6M0W14Xbh3y28uElkxXe43D2Kh0x6Y+OZR4e4wHvq3KBp5kr3EFSP3KTyda15A1O
        OepqVHiqfPD7yvg1cezxkbxR6QKJIy+U1j5kcK0B1ZXtGC/s1RbfZ65WavmaUAtpwwh7C44pvxFd
        bWG4ngsFVo7fvV2lxThybH07t03OFfg1tPnA6lDCCthZkIiEXct9PT0znnHuzrcnuf5ArfoVq+uV
        xtSxBzw04T7Xgv9wVDP3DkqG1cyGhu3gbOPBsY31AtZ57CsTYndPM+autS+912tr8Zo09YAWR9/i
        Ye9hFsSz7QIW9a1ZQ5vo6IlmNBPNAhY9vCbBJEXsjPM53tQHY6xQdji/ce4unWmIR1vhLJXPX6jn
        drmuGWt47MiFcwHfTPXs2ypd6f3eyomjHPbfwefpt1A5+pq+ep4qa18zDqP+ZkTeIX5CtKjy0o0H
        hfOSNmJ575KItKc9WVcHHFano0m5sydImacpkf81RZxPLGnrigb8Z24sccx54dW4TsmO0GzpC+sM
        7x/J2YM354WfeYkZjUxu1A8hVV/pzYX92hPHBWyQusKklFZFvoUK4tNYOvYaesMauTNdvyH6ar0r
        vXzNPLihQp6l5a5kZ/aD7MJq1VzifG7xlQvp777MuQc5hs+jx0SR9HBXnlutwm8vNncuL2/hb4uP
        nqfDDx+R6oXywUH0XFxRW4sLEWsxMpvE+WGVfYv227a0vWQeDw5DHt+3z876yOjSJk+w+SyWP/yH
        MTJyHM1iM3dsoERiIDuMaFad11/3EU0Ri5TaPoiW88ioo+HTWID/gUzECo0IID5lXjv66uDgD+Qc
        mBYh5jKSwcu+8o1ks/6VoOJLLG8dFkeOJW1sYQ9snd0DgbZAny/6g/SBv0mk0lU/qrfEISK4UYkE
        DF8390yuzKGRCqk49g23sI2cxHtD+g3Q4s2Lox1BIvet9QyR6uKJp5oc9HoGEgBHpbU7KKauIHMT
        YcADgabA0siPgcwPY4IrL9Wa18Ru5TfyWDS+AjGOzmwANN5LnhAd2548aYQsqWtGrdOx2ts7pitU
        iKN/RZbXhEiD6IgCzfCb9jQtKfMHRgQb1JJWGFNZkmAqqVX1uTQ7bBE4oq7udQ35zvCG4o8p13IR
        zMHZml7nrieMSfbT+sEQqc53xGTkqsYS1kP0EDSRgYqj/rCsH2KFiJOwQqGJWqKla5ncQpU3zLNA
        xfkKmQJcQ/VddqUaYZV32K185t/RtFc8l+jIoqVECNg8NjnfHm4/rWWHtQB5GshtArmNGa2h3J9l
        4rU8RI5ptb4tGyOmjnNxCPSldbx61jh/SLDlQmxNwVXc6WVEWFgTln89meQ3t/97WdJ7I5JTCywJ
        upP6cCnGdA2cieAAqS1lvtMYIWc/UYRFtd341rgZKS0caaII8zDORkZSFOhkaI7qy1l8I+dMsBPV
        FAg7I8wLst4hUkGRCEaxvZsVhwPik1r+7qiy6EYyaumQMMIUeZk74QaSP77cUSypqi/FdZVfe3Gx
        cUV/S3Z2Qv1N1wowsn38mBiogPtoae5RS2z1LmzWKMIJFoKB2nK3Gh3ZyoMCRtJAKFSPQBwjzl11
        vm1HhiTbquS5oQ7GMQdaEymlNr6FSuRqZLXe10OgQqM2RjHiDxaabyvb1pZtvsc8ppwsE/ben6e9
        UD88rU5YNlnBxmAmCqpT6R8m26isJXVNxn5OLB90tUIrwv5g1VJ6xiPrZ/evyVlVp3W6K48S6+HT
        m35QfoE21Nd+XwJHphXA5omVzqr8mff6OVjQPAyE8nzwNW1yzeZXdoNVmWbl6kYNvbziijawWpj+
        ZpAa/pL+NgpbetXo+xg7Wc1vtJOW5zYv7a9kYFawcemhx6TGn23FeAjfeU1a8U0l7P5csn/6G+Jh
        R5BpjKiXD8FnkifDqGYhDf9clfws/uaqsupm1Pnq8xwbNiPkZEnYgkQL5ePIq3amdvXv7qrHCtBh
        Pthv6cpm/oB7M47a0AB9A7DF669qxodKJJJ8OjE+MO61q0VH4NoQ8Vx0a3azYhO9UXH/EtvpAaXg
        A3QbqGOa+Ub5UCSDzaHaJ+zv5KmsPuEFzkY5/I9Wg0r6blUgjGtW89IKr21koKOCLz7IJU8DX2hh
        O+NThDNdZlSEiVGvPSDe1cHRE/jIV9cfTo/1TeDosJpK+nh+WXbIuxSMgvSBBbUt6tpn/gBveWFn
        lDmM3sDgvfiO8JLjiJ1zipzKPzzdHXoDn6jHpuf9R4cByEy+GovI3IFyg/wcHc9rqy1EdO5Q1Vqs
        PpZSQAbS0cAGBj8Xr+/oUw4po+6OganP09U5lh1KhLjEBOrIhU3OMvStXRlO3eyzVXbtj8mJa6B+
        96UmN72of8PmLV5J+NqktmVTpwYSXt2xklzpdBC1JXlwdc4WCdPuVo07zHoueaqUlHXpTYxl1iR1
        nfgeklu7bVPiq7uROYcwq/gNRe6WzWHvzbmOZJLDuBLLPbmK4DOPXcuKVl9UdiKT9JLep1pSV0ft
        SbZ2DXbCbNE9W7nah1XnNe3SXd2sYaiEX/lGHY02j52Mvb4aSMm56kyupb+QyddXU59jxtHsk57t
        UyUmuY9acuL/5946q8ZEM6XWBhna2O8k5TnONHOPfCZd159I3ldiV9RPswEylQwZYvYlys/JJLBm
        cOdIUUuv+N0ors/Ouk9KSSl/KdEZZ3VPuiL5hYxo6J1Vfq9Wb6pulfaY4DF1dWB9QKuDrPpHrB5c
        7vfLnkwqpR7I6Ef2Gea6nNNA0ZPkwYUsoJ4Js7KjiEtUtIHYrt1LR6geV/RGl6UTloUKX9f3UCf1
        nLL+qgMDprIerFsn0EFf8R7ZuURlrCY9YB/79i9UBeprvE1+a/nZbpXk7I0yMsJmx6yTDr7sDdr4
        CmYMVGSTz27u1v5lOFr+PawzhOxK5y2kY2rt250kXNsZkrf37vRdJzu36kxc5j1lmuWE/YwnMJRi
        uy/ZFK2ZqcxqjRpxQZMzW5c7kLki/fR5VpQeO/Tq7KjOb8RaTKdfZPbC+q3PYqBEKFLHSFd8Vm2q
        O4olIrUgvNg6nLzlHYY+JoeEr51it5qGlrOfadnnNucMTYuRz0TyS5WPa1qqNYF9sc0cWL9DZZwS
        XKsngArm6HlgjzOPk3lfU3h/QDgUv/OvTmPndHYIRvsZSphsF6T16Zbg2qznRTQ5TzO5z/oC0hUg
        1lSZd4Q1R2aIp1ssNvln8YVejMOkFjE5yG2RIhksO+Bplhwxaxn71h58FZN48zLOdeUhM0jUMTrh
        v9rZ1Pc3bBLZvPmBzavbnZppg6MQKYF+YPMDch+FHqH8zsDUFjdruccQlE6CSZ9VMdt2N0HuMCLu
        NIEubySq+xwJPXB7AjzEPQXvmGPetTDvSaLmFIlmC05D1xthWiwXJM553NRtMHHbZ+De7otlogcZ
        ALHome5nk2Iy0yxnxZVNL1inuhfLql69jDDCHSD5+TSsMYGmFQm3MDRDNCBSzGPOVd74YUolDiPc
        KNSz8W7HRvq11wRXqEHipX6YrHCH6i7y4P4O332PwmST3/z6+00eRMv/gwt83Hj/RSn/1h05+X8C
        jXP+F/6PwB9//AeFeGlw+iEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:54 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:00 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E079:E60EE:713A3DD:848C4BD:677BF2B9
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4994'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '6'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=802f9b301520f83e63f6b47e6105226d85ce154e
  response:
    body:
      string: !!binary |
        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
        jXP+F/6PwB9//AeFeGlw+iEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 15:11:55 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:00 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - E079:E60EE:713A435:848C51C:677BF2BA
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4993'
      X-RateLimit-Reset:
      - '1736179854'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '7'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Describe the following changes:\n\n--- src/seer/automation/autofix/components/root_cause/models.py\n+++
      src/seer/automation/autofix/components/root_cause/models.py\n@@ -64,8 +64,8
      @@\n     id: int = -1\n     title: str\n     description: str\n-    # unit_test:
      UnitTestSnippet | None = None\n-    # reproduction: str | None = None\n+    unit_test:
      UnitTestSnippet | None = None\n+    reproduction: str | None = None\n     code_context:
      Optional[list[RootCauseRelevantContext]] = None\n \n     def to_markdown_string(self)
      -> str:\n@@ -91,8 +91,8 @@\n class RootCauseAnalysisItemPrompt(BaseModel):\n     title:
      str\n     description: str\n-    # reproduction_instructions: str | None = None\n-    #
      unit_test: UnitTestSnippetPrompt | None = None\n+    reproduction_instructions:
      str | None = None\n+    unit_test: UnitTestSnippetPrompt | None = None\n     relevant_code:
      Optional[RootCauseAnalysisRelevantContext]\n \n     @classmethod\n@@ -100,16
      +100,16 @@\n         return cls(\n             title=model.title,\n             description=model.description,\n-            #
      reproduction_instructions=model.reproduction,\n-            # unit_test=(\n-            #     UnitTestSnippetPrompt(\n-            #         file_path=model.unit_test.file_path,\n-            #         code_snippet=model.unit_test.snippet,\n-            #         description=model.unit_test.description,\n-            #     )\n-            #     if
      model.unit_test\n-            #     else None\n-            # ),\n+            reproduction_instructions=model.reproduction,\n+            unit_test=(\n+                UnitTestSnippetPrompt(\n+                    file_path=model.unit_test.file_path,\n+                    code_snippet=model.unit_test.snippet,\n+                    description=model.unit_test.description,\n+                )\n+                if
      model.unit_test\n+                else None\n+            ),\n             relevant_code=(\n                 RootCauseAnalysisRelevantContext(\n                     snippets=[\n@@
      -131,16 +131,16 @@\n         return RootCauseAnalysisItem.model_validate(\n             {\n                 **self.model_dump(),\n-                #
      \"reproduction\": self.reproduction_instructions,\n-                # \"unit_test\":
      (\n-                #     {\n-                #         \"file_path\": self.unit_test.file_path,\n-                #         \"snippet\":
      self.unit_test.code_snippet,\n-                #         \"description\": self.unit_test.description,\n-                #     }\n-                #     if
      self.unit_test\n-                #     else None\n-                # ),\n+                \"reproduction\":
      self.reproduction_instructions,\n+                \"unit_test\": (\n+                    {\n+                        \"file_path\":
      self.unit_test.file_path,\n+                        \"snippet\": self.unit_test.code_snippet,\n+                        \"description\":
      self.unit_test.description,\n+                    }\n+                    if
      self.unit_test\n+                    else None\n+                ),\n                 \"code_context\":
      (\n                     self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                 ),\n\nIn the style of:\nDescribe the code changes
      in the following branch for a pull request.\n\nYou must output a title and description
      of the changes in the JSON, follow the format of:\n{\n    \"title\": \"Title
      of the change\",\n    \"description\": \"Description of the change\"\n}", "role":
      "user"}], "model": "gpt-4o-mini", "response_format": {"type": "json_schema",
      "json_schema": {"schema": {"properties": {"title": {"title": "Title", "type":
      "string"}, "description": {"title": "Description", "type": "string"}}, "required":
      ["title", "description"], "title": "ChangeDescriptionOutput", "type": "object",
      "additionalProperties": false}, "name": "ChangeDescriptionOutput", "strict":
      true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=117483fe3ce34b6193f000ab61870f9a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '3987'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 117483fe3ce34b6193f000ab61870f9a-bf65a974e1d65989-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFRNbxoxEL3zK0Y+A4KQAOIWtU3FoVGUpuqhVDDYs6xTr731zCZFUf57
        ZS9hiZJKvaysefNm3nztUw9AWaMWoHSJoqvaDS6r+8l9sf/0+c/opsLl9ff5fkdXVx/L6+nvB9VP
        jLC9Jy0vrKEOVe1IbPAtrCOhUIo6nk2m49l0Mr7IQBUMuUTb1TI4D4PKejs4G52dD0azwXh+YJfB
        amK1gB89AICn/E06vaE/agGj/oulImbckVocnQBUDC5ZFDJbFvSi+h2ogxfyWfrTSokVRyu1WKlb
        KlBLiHAbgsAHbJjgS1LLIAGWXrvGENxSHYNpdCoVlp4ltm8G9Aa+eStwRyy8Uv2VMsQ62jrhOcVd
        SaBL9DtiIF+i1wRSUs7YJqzahNs9NF6HqiIv1u9ybDQmPQtLzjAUIUKTsknKlh3iqTR7Im0IX2vS
        trAandv3c8pNIq8TeZPJm1P2BlAk2m0jxFDiA8GWyEMk1GIf0mDB+jbMUfoGtENulbwBLz26PVte
        ClU3MVS1HNyHcFdaBtt2l6GpDeaKE78iKYNhkBIlF4ReLEruGRO0K5inQ56bmO170CFG0uL2UKI3
        7sW7qyg1oGFA58Jj7miIUIVIYEjQOjIQ0wboPBA8KIdHK+WhLt6zUDVcqefTvYpUNIxpt33j3MH+
        fFxUF3Z1DFs+4Ed7Yb3lch0JOfi0lCyhVhl97gH8zAfRvNpxVecWriX8Ip8CzmYXbTzV3WGHjkfT
        AypB0HXAfD7uvxNw3faBT25KadQlmY7aHSA2xoYToHdS9ls578VuS7d+9z/hO0BrqoXMuo5krH5d
        cucWKS3Jv9yObc6CVTvYdWH9jmIdbfuXKOr1CHFuJnQ22qrec+8vAAAA//8DAPZXpc8zBQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdca4b35ebc45c0-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 15:11:56 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=6cpNRLZ1GEEsCr6CqFJQ5.nviqDcdpQ4enDJcbw7a8I-1736176316-1.0.1.1-xs2X6BSGbcAlU1tMCannauae5Cx1s28k2mUsgW_PPVrUmdfhym24333oeFbgrKoT9NZMPLYWHjLcOjrAHUTFhQ;
        path=/; expires=Mon, 06-Jan-25 15:41:56 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=x92lMYC9GPmjt1XSZTWZmDMDJWkRVnhPN7J29L1itow-1736176316975-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '1289'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999135'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_1dda85b844e3c2979645d088bd01d940
    status:
      code: 200
      message: OK
version: 1
