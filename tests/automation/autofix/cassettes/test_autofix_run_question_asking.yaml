interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repositories/439438299
  response:
    body:
      string: !!binary |
        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
        2nMiLY0aAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:34 GMT
      ETag:
      - W/"48d1f73e7fc22e31a0b665e02513fc70d6e7a1fa11c7f042a10bd18264bce818"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - CEDF:1DDF36:6EFA76D:820AF74:677BBA2A
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4994'
      X-RateLimit-Reset:
      - '1736165315'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '6'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/branches/main
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA91Ya3fiRhL9Kzrsl+QwHr2R8El2w1PGvMFgxJJDWlILSUgtoRcPn/nvqQZsY+9k
        MnjyafUJWn2rq6vrVt3WU4GgABduCwFySeFTwQyDwE0Lt0+FxEEwrHKCXTZEjpcFzlZFXBLtkiEp
        uMRzsiCULFU2MS9LGKAktPDStQBUW6639b7mNTtCOay066ttN9Bl3etuuw+TfVfTpa4wEbqCLuje
        UJw/6LtuHca9+bpfn3rzhwbf0yZvnEFZ6oQxdevsbgXts8Rhxjh1YCIG731YGB1HPycw+luCSRrv
        P7shvLdQSvcocIJ8w/E3nPggiLeScMtx88KX502n+HIBzU3vMuPCNgljHPn731Zu6mTGZwjU3xsO
        cJKgFV3aBPfxT4iEAfL3jIVTbKZuSH6+ZVrE9DMLM8hamiGx3RXjEiZJYTrjhyvmp3/xJaX884Is
        yM3z3IRJnUuAl4SEougoYBImi2CA2nDJ6jTXx3HKIGIt4gXZOvg09w+XJJltu6YLsVqmLriLYxcn
        S4gX+oPBcRzGjEtXi8MtzY40xrCZ59wQDVRW+DLiFAOrFpIEyIyyUpZUzpZEQcKWyhvYliwAZjE9
        HidNo+SWZVHkfn4NIwtxDRN2hdPTkbEJxjEL71m6XMJ+9zJwkh9b55T0CXtFslMIDZoZZgTown0q
        5BA6CCWix0pjdPqPgQ9pnOFPhRgjOCaIQo58YMmnQuKuCEqzmKbHDX2qDa3VYwbagBm3tF7lYTJq
        HMfp2W+TplmtVKq1SmVYHd4TfDdr1UY1Hg2VLJMnjl+Bl/fbYaVZ0qp36lxodpqdfUvpqmmzphnu
        gpgPeq70DriuDRSd0/xo23VT+YFdV0S1PR7tWmjUmsnt4a5+t3K6SNoPp558QP1+Z5B1lZK9IGok
        N/R5JJRanBS4nu6Hd4oz1SUkiiOz1/QJL4XWrK/WgnVjrrG7h7rXHFVZfjhJ7TyQ+gtS0u4Pwkyw
        g66tO3HPXtdw9V6U2wZRy3xxIjlRY7c2PTfRi4/RQTyEEmc7lWrZlu6KE63aWRBntOkQbyd2oh2H
        W3nQFWTJN7gHnO97/jh7KFaklOtUlVE+nFSLk0m+GWCM0OwgKruR/thbkPIjn7eddtfe1Hsa1g9e
        z2y1dFvQGk3v4JZES4mad5uh3lZ2m3nR27WssfaobZM2HM4k9LwFqY5H+nArjov5rL2xp3Z1ZVj1
        qB3U1525vuoHVS1o5rVoMx1aIe6t5V1zcHe/VXO7vZpXzTZakL5nzOaVtewKzlqfqvpwLhuS2xJx
        Be/avqxI+GDsvcmIr0/vJKHTmXb1+f1aGJjBeDTqxPyC+IP8vqZaQqm83zaC8UxIDeORHxTdoNSs
        KVx5kHJCO2YHwbQvltioPiuKVrlbdYIwvmd3UQ3yYZ74cQmPvLs8XFUGaoqm5eFEP/TEmdecr0Nz
        7xrRwS3yZS22hg46eJPqBo17jmYGQ1PjFmRI8KFpZZnNlzMzF+U5J9cePcKuWZzLebbhhW07fnQa
        Ye1hsxVH++5aDVtuZ6SuE1QzmqsFGYizYs0Zd6ad4uOKN9T7fS9ZkF/zZjqCckefRq/+VUYAfyK0
        90NE+w2tE8z3lokFiVAM1GVMReQMS1FLZWhrhqiItoxEm+OQKcolS8Air5QwFLcFOXUf5qLnML98
        tdX8m+EVUS5LiiJwzA2nchClU3GB5sKcWgrzy/92kq/hAPl/0TOe6+ASQZ38ixb8ocr9gartpIG/
        fNsjLvrQuw50sv+BppC8W+J72t21m2HPDSgBIryKI2j+oOKeddBNQmUZVWS8oooix8nQpl5V2mS5
        XtX7tU1jvl1RKzk0/fi968fB5NytM5AHoFFSYA/VP2zGvhj+T/6rBEZW8dnMUQf+XeOn9hL2xKST
        s98+oMuZduj74Rbw7z1+qy3eLcG+wMC302+QSB8xAbAnNgTFBSGDbXyhm3eT9Ep3jpAnEDtJCtKZ
        Gkkg3jG2rnPpDAKHtgR8eTpKqqO1zEjM2I2oKLnStTdQMBXGK0Tcw1HfXGkKoDRPjzrvuo0dIQDF
        OeTcldgT5omNYjdH5p6GI8YmdnOI7kfsvQODuXQfUfE2gfOHfzQNlrmLt8vzeJQZvmvSU3BTvERW
        QLlpIz/B7+8cz7zdYuPGhrQGzJG2ZbUkSZJyydpufViaznq+6TXkfl3nevWhCNM/xt6z/R8g74XH
        3+buxcSrqPuM+zhz31n4EeK+mPoh3r5Y+edo+2rykvCQF1ez9sXStaR9AV7P2RfoP0PZC0/e0P0H
        GXuSjUnh9r/PF+DvVZC0OFx9AX5WBFcs8m0Gfl3efLf5L79D1Vr6LllDCCAC2LevvNIbMQJNCzf6
        87cm6u6Fib9WYlTfn0DgQhSH9OPJ68X6PHC+dmOCDP/y1r3JXNpPgWtplixhffO0AUzsMDbx8Rbv
        Q+JRV0hITnWa9pyj0tml9MALRub6VuF3GDzjIQfO7wF2egtFOIqOH8B4WSypEK9Xb8G5bze+r34D
        eRMw6GPHjdN9fvkT/TE/orcTAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:35 GMT
      ETag:
      - W/"3e93798030c4bf1052ae0329418816b326e4fb55b3df0fdc2bee3a54717c647c"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - CEDF:1DDF36:6EFA7EA:820B005:677BBA2A
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4993'
      X-RateLimit-Reset:
      - '1736165315'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '7'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/802f9b301520f83e63f6b47e6105226d85ce154e?recursive=1
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA+WdS5McOXal/8pYrVVMAA6Hu/dOpu6FzEaSmbSYxdhYGp5kdOVLEZGsomT67/Mh
        IhnuJJPJi0CtqrrbisyqLru8ABy4j3PP+e+fDh/8T3/5aVamLGFQejSqzEN2Q3HBTtlpNRrj0jzG
        rEebf/qHn573d/wLH47Hp8Nfbm780+7d+93xw3N4Fx/vb/b56fFw8z4fD/nhuP90c8h5f8M/vznu
        cz7cNJip/8JPf/m///3Tkz9+wOC7/PDxXf7N3z/d1T/F/WPiH/+klXLW8vPx01P9Odw9Bn46O1Wc
        0eM4mMmpZAftyqyU4Rc7zMOQrJ+Kd+M41n/9sPsv/vVpnK/1rxo+3Igt/s8/fOHYPgpdGkupO7Mk
        Zfw0LXaOLoxDWnKYolrm4AfrlmHwF5fs5PpcElvcuvQ+vjsc/fvdw/t3u/cPj3vpjnkzKD/NPnuz
        6BzxKQ5jziXEmdM5L7PTxms9X9wzqs87scEvvDud93XHlFX8Zz2Ep6P7+RBGO3k/6HmY8zxmNq64
        aP2so58HpWaXBxMXtxT+hZ4vS2zmW0du/unf/vq3f/s///q3f/8P4Smc7BC9jjrpMkx+GvRS5jjm
        wansl0UtNqdlmUs91OcPSw+dp1Bs8RX3fn3c/1LuHn89CHfML9a54icfjEnJ81UlpW2xY1lM8kbP
        WZvZnDa8Z8fEZt5y6eZu93Csn9mn+zvh5s3ZcRnO3BvBqlAid+Kckin1c/PGjPwtP9myXDbPTEpf
        6+r5WhSbfNPVYz4cDw2OajUr7bJX1rphXMyUfDZmGtQ4Fh1sSHlUS7JmddRY0+eo2OSbjn70d7vk
        j/nnp91TZoNzi9fGmXFyCx+MnyOP3BInm9U8TM4mZZPjb4Q5h3rfnL9No1yn12KTX3nd9DSokJMK
        TsVpHqKe5pQHfl0MrsVx8GFM7Kmeho1fvcdWbHLr19M+/0wkdL878stD2fFpevG3OS5KRTwc5+xn
        NVrcm/yI00Yvw5i4YvnZj+u3yUIMfUdWbHLr5MdDrPHXJQx78wUsRumg1JCczeOY3BT4Gke/BN74
        4vzsA99m1vVB7blPxWa+dYQw9Vhv0cO7vx8eH4T3qFn8PNshmCmOaSDmWkrSifPozFymonggOaNx
        jS6HofMaFVvcePhPj/dE5PndXx/jL3lfduLgmZcuzYszg104hXmOOhOrLPM0eD+NWg8m5Enn9Xsb
        VedJFFvcuPfXf353n4QbRmzi2KFEQpPJaOaAJ3mYilvmpfDuBTUteknrzcgraTq3TGxz61PrVs05
        h7lw/GIkHtNeRefTrJWb3KjsnAbC6TL7zZVPXnTtx/b5RRea3Pj1v//5n/72r//xN/mGlZxyGsbR
        LdwSJs+THobZeeOinsOSMw+aMUTSlyt/4Obs80tscuPXv/hfcsOHZYKznKslEHF5l+KyxDJZG5ay
        EJ4MmTsjRL61i1dEo53Rs9jkxqt//9s//vVfGjZrXlJIPhTuwqz8GHwetV+mcVxCmgxBRvBkB9Zd
        3HLdqanY5MatkB/ih3u//0X4eI2qjNO86Dgsg096cnXzIi8zr7AuRNGJoDmmmnD3PF5iM6+5cnN7
        u3vYHW9v3z19kt6FbknZLCEYbkTyARtmnmOfp2nk6ogmU1kYh0Vfdqszz85Se6/6d/cYnw/H+o3J
        PVzwi1uPC8RNKpm0jCVxUQ6jLZMi+B8z5Sw1rO+XXpbl2k08X4pik1snd5t4480wylHY8cZbzWtl
        l7SotPgyDkSEJQyavCbMVpGudp5EsZkvnbiJd4/P6RLyiiPePHsCWkUA5fI0BzVPqahElSdTUNAz
        qWheRpPXgpZxujPOEJv82sN9rkmZf0g/Pz/dPfr08+kyqT4fPVna/t3hwxefH5cfP79WmfQkn5YP
        zGitk1JTdV3n2U0x6HqdGDcVY+L6Bhht+86m2OLrTl+uzZ/3+T+fScR/vufVa/CYdzsUq4cSbZj0
        6L1RaUwmhmky1JaHaKhi2nPd7FSL1ZSi+1wWm/yRy7WI/fP7p2f5/poY+fPzuJO5KWvcPOE16UHQ
        MY56sFGPaiIQvVyv2vRGz2KTIm8/3sudTeQIdgnWmjRRbRhICmII8zJqx4kOKgSSIaVOdfnz1o5T
        Z5gmNvmVs/v78zdbA4CfT9va4ugQSIXIGahCzBTKSIpG+guWpIgYzqWRPLCWlTa7OnQeYbHFr/18
        fvj5/GieahFcWfLt1MsU6m56YuwRh62yzmsTXUxlipqUadHG2Xq1vRSQ7NT3oYotbryM+S7vPwVu
        5K89+34/KAfvqDgkk0lgzRLjEEs2YRhsyiTtzlEBNcu0Vlds760rtviNZ7Vo/e39+n3fFh1Cnq12
        ejLFRh7OIeiZF4Zw7nRQ0zIQ/6xn0/VW/cQWt77VICE87+44jy/9IXnh2hV2qAy4VBIpIDX60TpL
        4c/R4uPxpMuSvqjnajV19vPEJl/3saHyx9GMk6nh6pRtGSgC6sWT+HJ/KsI7ihWKJ0WvEcFiO0Ny
        scWtb1T94uPHhiK8CzFaStIq0xaKXCVj5DlQQek4mqIdcd68qDBdbhOex77bRGxx41fKH2kvr8Hb
        m4G48n4uc6KdwJNHDqgtr17RU+KZn2ry6/nUcuitZ4rNfOPHzUvhmaTwi3j0+7cH6Z/yIeucl0L1
        SNHQo/mvCVmmmCj/aerr/LA+4cYtncdPbPJb9w6fHqI8ERxnOkDsV73aaQgpRz19HPI4RUowSxhn
        NXtKFWudVpNN9R1Bscmtb6eqX32uT/Xa+Jx8w2c28l5TM8pOLX5IcYxe4R95Io+ctbl4gA8xpVoq
        /dz16UwoxBa/72P7EzDN7FZNfBeecEexIhiCkyXrJdODN7lk66MPmyZQ7wsgtvh9N+UvXK1JDGEo
        NNGpBFLFNTONPEtjfbHLlBUVGrrGm7SB/1dnaVBscuPf+8e4qbm/eVeW4CgyTVQt+OCmWQcT/ULW
        m8FAmJCKtjRo2T/OZU/5TGzmKy9uLh1W4d0/U30eKdW6aZ4yN2ahMWJCHDKIABpBTrvoiy51eXr8
        EZv5rj8n5NXP+benvN/dg8Xydy19SOMNBQhbgtYcN46kX5Inba93p6pIAUu+ToFmvU7GofM9EJv8
        2uVjBhJGYUYK7wAwRnkaNBH7xJnU+KIs9+WsdVSnai5t8uR662hiM9/15yb4bUHpze/MUeQ0jkyU
        S99QJ6QXnoMmD1/SwLVP9FXmQjTbeS7FZt526iZ+yPGXn08lw5dsQFo5m0GtjJn+iKL6r4G7DYB0
        iClptVJK491zjk5z3hQbepsnYosin1+wkuJKIU3myCsOaIw6ITELLa4YQLQMYyxUyMjqCK1pq1++
        RG06aytiiz/y91wuPQNBKRveZU9cI3acoIUiGsWV0RPT0Eya2V2gLC7VTgxdM0tA4/Qmopk6Ewex
        xR84njLV4U9yTxcuVgPmcfL0zygljYn3ZdSW1A+A3RJn8DxEOWtQM3U3KqQWf+DpnjLT/e793h93
        jw8Hucegiyum09MqBHJLlTAvqqQUgQ0mciunQWxZjvzlUNveQy22+H2PKzTkIZ+7UA0wEU8X3oBC
        rjErVTRa9DP9qJkCW2ERCF4TACarN3C7XhCy2KLMV+qIv7TgYnh/PO9pLLQQA7kxgTo31cJtnQ1g
        n8LbpIza9DaGsfPDFVv8vsOtcSA3cvIl8vTYxfrkxmUG5MilPE3cWj5T9E5BlV6MqNiMwLNTRPju
        bhfO53gNeN/E0J9xom5Miv4iAFgFGLZQggMAXO/hEFMEaOi2ieXUiZkRm/y+0ydXXz5YoaP10Jql
        jDQgwdcb70zOCfjoRN2D2MJTOqY3N62Fqv4CqtTi1s/9Uzzk/ceW0jDFQ5IU0JKDoqlqwWVPGfAv
        sx2TpgIXKiaKGuMKqh/HzlhebHHr2fPDLj7uH75+Rb5ftHKWQr4Lhcb9mO0ye1coB1gXCHaDXrh1
        2EuzbAB4qrOuI7a48asOqtxJc5OaZEVbtK/jNpQQLRD7TIl7tIqIp3ZKJ2I+33utiM1848dNHfZp
        wu3G6H3MXJdWgfgkxSJu04EujKUMbFNZKN4T0VaXXrqDvdg0scWNd0+fnvaPf8/x+O74KMYuxIXC
        YuHAgZ6nvsjwVFZsmwJGHsGeFDdYwA1uE5tzVK8tDJwhJmKTG99qx363z7UKcKhghcNxD1wBKP3x
        t6PwcsRNviZCNVKvNFHPB0eewdGYrBP1RcZyuDkHtX5qhu+xz1Oxye95ChD7jMNu8LPw2QFQ8Mvo
        6MCAcKUOUqvi3ClMf0yjrcgMkIiXw+o6b0qxwe942eAbFWLHcaS+78mrTv2kVFIhzh609Xb0+EX1
        dEWJAjTqnYcQ29y4d3q7nx7eC48muNfBLDR9smcWLlNtZGCMLAKoHi0M5uPAvpJVrACiirrpO5pi
        k194dXx+eheL2K2pXiJAkkHicQBToWalqEqVmc+QbBBoJZiKTT+QQl1nKRgUqszkN27JYYdlYFyM
        ZAxAwVznL7n569wiIHOfGRkDc05PJq6wQ7AGfXuVpRa3Tm3HMd8su5VBncoSTMAx41AhS7x0E+cx
        MtQ3aXqfNKiN6y27ic186cTNGSRx65+e1o/pTX9qUZR8nIbfpJiOmtWgACWriVFTDVp+ZmoDnNZc
        77+e8rbYzHf9+YNCXg/7uNk0hquf5H1OetFq4Ili2M17EHaaUYAl8Gh5fcpdYp7JY6ZNZZRhjmv3
        8RyNiE1+fx9fWtXiG4QhkSV4r3g4kyMSnujAMMTtckXvOKAulJUYG15vkKm3US22+H0nj/7wy0G+
        k6WonOw8BFDhXB56pL1F4MVMJhnqWEfYrfLM5lyiEFpPvXGI1ORXThJH5s/1P+EdMydq91MF1U8j
        NT8mvJnAIT31CfCET4x6k8wB7+m8Y8Rm3vDoD3zLbDcOvMgJ1iPcwBH4RJgnRgfsqTaigC5pTZ16
        iHSZqFtPE6B719vTFZt5awNfPLv5X3/MEYn6Xry2k5939Dbe7Uj75FePA8HLINlE+kbJgRlGk0kC
        hjJmQmuTa3vUFH69XD1M9vcWVaQmv9rntfEgPLfZMgLOoJXL0TACaAFKegp8VL8WAMm12DInhqMr
        RLInuBGb+a4/N+fZq9WtNyu09HbtbC0ldqAikJoARWCewoHcspWzhWJemZjB2lCCdIbUYoPfd9Df
        5fuwi+/kCLVR80LRwGaIzDHyxyhx3UZLvY/eSQmgnphptJtp28V1dhXEFr/vZqWsEUc2YbHU0k0I
        npScwtFULM5mKoFqKTROMk3QiTLg5dOjoNaZ8YlNft/FQ9zvnuoF846BkEfhkQViAZZkUHQOEnw2
        DK4yjQZ4EmgNHD21OkjlBZTG6urSiVYTW/y+p9TcD7XNKbxtAjxDoORHkGlAg6hDqJGhMzD0JeBZ
        nChY1BnqXpSo2MyPHbtRcO/wpwM1qPXt5XqVn+DE3eNofBEG0KRfaINx3/JYcHgHsJe0jyhecEWt
        jwdn4NrL9pyBiE1K3IfoCnwFXS13lfuUARjN401ZKByaMnE3Ub6n2M2UJRgGQJmaAlvYkDeMQydW
        Q2xS4j4MS7kouFFKvmb3FwNQJVEC8RkkhS1mAvsHeIaSOFC/+jhN8Ddt2jGchb7NF1uUeF8xlylA
        aORMwxxtIPi1DNnTc2CmG24OoiZipiHQTASPFRxLymW2xktD75aLLQqc1sAyITww0xRyg9P08EcY
        4WbjRyCQTEYvFjo1cDoMLJCRG5qLjIGrFR3ITd+302KLEqcXMEWQcjHEdN1nbuj7O2BJfqLkwEij
        BgtfSIdoFahhhndhIQMqK1yHxl2f91FqUeJ9LHyRdViwjNd85ZBfUecskZo6Q32Lh6wGMBoBJgME
        emSSKjBIpTZoegN+tM99sUmJ+1QYktbBTTld4z5IFl438DqFcsUyMtRJC4XZzZoJq5ERXt70yDd1
        eeLgCesM0sQmBe4bkoQE/wRD1f427R+fbh/v0u37/ePzE/Q3t7Vjtk+H26MPLaP2hG8wpViwE4r8
        g2L4OILrAuhk/KL8QEjnlgzyaX33war2nQmxScmiOEMkTeE7pqsuBNJlDy/JQG9+CFMuTHQDaaNt
        w+PPcNMcWRa6EJvGmpo7Xz6xSYn7sI4kM5lEUeeaTwIWk4Uvnjx6Ymx/Yd+BlwwunDrgYXHMAtMd
        16v7s+1sDYstCrwfbK4kVI7hIH+N9+wxXTjmAfTETArlZz2w8QwjJuhq5nFJIw3IyWzgDSxW59mX
        mpS5T8xnAgjFq56DbMjjqLjz1Ttq8AWgIxQpFK0Z8vc0lisHhwl+/fTpivV5L7Yo8X7R1BFiCrO+
        6ujzwft5Ir0LIABPY6ikY/QjOAAhVGJWiKa4WtZQgFuyz3uxRYn3pP+Ap0YC2OGao++plo0mQlTB
        /UnVgsW0jMFAKgmnqYeFEFggYeF2HF53RkJikwL3AVLRYaF4tKh4jfvF+KCVHhbSHEIhhhG4BsZc
        aJsy25iYm4SehUD48uqREfdtvtiixPtK5cahBerorvGeMflsIXyFgivSVWSKXoG94F1nBioFHgEm
        RhfY/tYSDqNefe6LTUrcdxr8wbiwhfYa9xlmZj7XVLYW8vwlMJgAyxVhoQp056jT2TpDNG9IvOjX
        9bkvNilxn0IPbCzwFF65+0y+aU/66Kn3aHhOii/c8qoszoLHCfOgK7508+mrpTMLWKQmBe7zKAF0
        oldFHnTN7msKemAoDR2RgYYl8R+cWWSUjDFkiOkY2qC3yR94DXhNL8ZdbFLiPpBMPtVKix6ucR+u
        sEkNTDnWuVvq8IERSHA2I2hbQgDI3jJBASHl6j65dt/hF5sUuM/HCaXgANlCnG4B5+Zjvj3YwzkN
        +pwDyaueHAHF8ec68Q6a3QJJCnwpsYwF9EyEfhEOXmKEdTUoCvcthtiiZDEMdOuwrsMWoq45Cw5u
        H5gkakmEl4DZPGI+MFCkgBMTEPPMMCLXxLRG/3DK9HkvtijwngwVIDLVSRvLNd5DlMCYgAeyQMmD
        tIS2BcthyPqsogwIJBZwYt7S8auls10qNilxH1JGrnAwGPGqCBA4GDRPDBTQ72cVHfkupwAgH70P
        qGNn9p5C4YZrGgLPzgBYbFLiPnoJMKxkgFPmmt3n2NAsgQ9+YWh4YZLCM/RLGQAFg6Ao/FoIv2CW
        2ELbu+9BqUmJ++BY0Y2geOGnhuovA0/UAD3NyvE0Gu40J526d02i7QJbn/JJwdNzuf27q79iiwKn
        wTFS/6P3xqfa4DQUbpDUgMclak4kNoQ9iwEa6YaJegeHvkDSPZxoEc5TDN11frFFidMMTde2MqW5
        q6qe5PYMHgBGtpS9GSeH0w2K+RwS1cQB6uQIXJ4ZlW241ztqIzYpcd8RkMD0zJu0XPOdg2UCfQ1z
        TKbUTXRDta/SaUEfaujnwZbmSX3BJG7CvV7gvNikxH3AWpXxlEHyq0pchPVQGALOpnJOrms0994A
        CxyodIiOwN4zl45kxkaUhRH8vjdebFLgPqk5QHlDNfa6Ig+DKBR1qBJZ+LdcnOFyrMTvEMehpwA+
        Hfag2g1bd39WnRGO2KLE+8qQg1gQI+VXlbgskBMLrYKGQxfyXLiSaHVWKni6xLB6AWCgzMkNsJ59
        azvDW7FJifvM0td5iYEQ95pPn3E8A5sTJWsyfLj+HUx6Ffu4sKQRzo3aMNcch02Rp7PEJbYo8Z7Y
        lDFssrJxaXnsqF3DeM1XXQAdaWJZ8t0KrIayljENnyzjUETMv+NjJ7UocDowugUE3CFBdFVyjzhY
        geOG6hXtXVJaSgWZh9MxIsUkjoGieISPflif+nnqDOnFFiXeJ6pwhDj89arCFoUbB1oFWCfEzBQy
        aW4vfPuJ+WD2HqZO6ibMtW+yWejp+y57sUmB+xWCUmsROsWrrjsmNkHaKyqX0WbgDPy2vh5c9xQ2
        oII/MbBMm34GAiydt73YpMB9iLOJRCLKHOGqs0+loiK3hskCVYNnEypRyDgiAlA08Whyw75GqTet
        193cm9CILUq8nynBWM2lnK86+6bOeCL1xdgT0A7Nd1CLmOCF6WKA5JnJlkjpNkVdsv/OVqbYpMh9
        6i0QTY8ASa9562zlnaloWgt6CRw0bXuSHeJ6kJlciLRzgTUhv7cp6/Uq2ohNStyn9FLB6xzVq3af
        Oi6MFlCW0M8jqYURDE0OT3I3s6oTsEhlM6WOzdnvZXcWW5R4T3APvx4Uv9z78uLlRKOOL5vRT0Ar
        fNk0sYjrefkYqgJKTm7nAqC9FbLZndeKLQqcLrzPMOXTx8pXda8571DR0qP2Y4Wugvusv4eLfgrM
        RteTAHHhNrqjT9z31oktSrwnGhsLAh7QHF/zvVObjDDvD1xucPKA2IBMDaA5nOMTjwhNXNCbrO9m
        zAzWsT73xSa/cr/OhHPtvIi+vjnCWoe/qcpAoBXol/JiQz5BOQqkItEsFWla1sCSS6Uq6JrykJp5
        xZM/8FhZ3agb//B47+8+0Vs5wqgBZl64dYhsAii0My8uEyyUEOsodfLAaCaa9NDWAKqil9A7WCY2
        89rWfePbNZsJdW3VYhyZ65lmsFwFxSfglEjweAauw0jKSYq1AYr3wuS50WUWZS5TA8iHw+O+YabV
        kTQMNMcBH2ZUBBjhoRdQ1V7qjETGfyBitEs2dQSmRDuBUmKbQq+/PtbyZ9aQNFAdp1wOU2UdO6NZ
        RL8A4V+mJnlhUSMyyLBuCqiVbOXaG+o8GiG2eaX3t2knXwBwwYwXGDrmpS5AZTHirxVAACswgqwm
        mxNB9xpbEsX2+S82KfP/fJlx5oWXGfAvECHo3UDhAecRfLr0RJcaWmsIg6mdVdgwWLnOd0hsptHL
        K641mAeoiiEbjy4fYz4zpTEqx47yiZ8YiWHEGwJreiaXPYYzo3OLpRZbnf/ylm+66FA3VZUjg14J
        CQRoQLjmFaUTpg2qPnsEDwxUymwudwW9d986iG22rgPcjyduz5envGkhYL8CGGnRW8tVM6cOvNEz
        gK8N0kTmJLgJiDUhprschwnCir51EJtsXYf7p1sUb/dMAMqvvIwcHLVX5mIg0WY2BPVKBJJoCCvK
        xhQnufaXyjC4XnmMSHXe+WKbVyzA83F31+A+2SMlROYA6BLSLCbPgJW5Asao+CBATQM2MMgbNpMS
        undiV2yy1fuHxz0BLdpVLftPYwhmU+oIAEQBSFI3BygDRIz2OeNBhHh0kGFk2ego6d5JGbHJ1gU4
        3D8+Hj80uU9OPkDvH6A0JoI34KBmIhI+fi5GCG/ZK8idIam5HH+YVDu7hmKTre7/untIj7/e1s7+
        7QHAWDw23YR0zaksIRsK4fE8ExAkiixxQP+GNiqqr7RnowI5vC4FLYa+m1BsUrYUTSSW5Bo0DQjn
        SGuQjeHxh9sZZDA9RNKdsXJLGYggeyMfsZkWF68Iexh3hZMdRCGXGvUYPbOZzMfx0oGEpzvgkLtg
        GGAT9rjOZ05ssclzf/f+8baVjolmQR3vrZqGjBFNUDIw/0m/DN2BGVxwVQEkvzNr0VSz+31HW2yy
        yfsIPf0DDH1iugYGJ2bYQnjXFVBfOkYLkFiAoI5Rf8Q8mQVHHwNZgk1G07ntYottjj8+wGxwbLrb
        LawUY4wnpnqo4YC/aNi4GAGqdRrg/xBy8eiZDX97rwyP2GKT7+nTg7/fxVvoSPYNJDlVjoFnDFgA
        uEemXRnzYNyZzJ7mC0Dfiv11yNStiBBnOkEBYotN7uff2PYHlGHEhx4hOmSJRrg1qVckhJj4znnT
        EebD6QTXBYJMlQn2cugHhiI6P3epySbXkaMgsfmYbz9nOPI1yOw1swNQltEhVgS1YD8dY8CMERZE
        ZEa+f/CgmzQX+Ya+JRBbbFqCI7pAUInvckNQD39Fom45UpxF1g9BMSQN6JIR6oGAZCBkhu6DQZAv
        cprOSEZs8krnb8+5ftsyRDiQEvBmChpVnRHBZkXBGkkaNAC4+OvFUDnj19TWDJ2NI8JGmUnZMjQy
        EjImhPYT/SECWYQdIkEciF8uPqa7GSiHkjAYKP3W1jABYGcwLzb5qsMtxJnoNABooddd+76AW+h3
        M8VL2sJA8wz36cjHTeNhU5uklNXZCBPbfNW7Z0jKT3UZDpikJwaIA9IH+tt09cFs1im1hbkPGHoo
        UUDPA8db5MbqlbwSm3nbqSti8OwgkIIYFPdo4dqBd5iHiOoD7KfgXiF7IxoDq3n5IDtjULG9H3jq
        38POJ9xEiGkQFjVUyaHhq2JQqPnSIKORMGeoFlDmGJm+HHvTKrEZiWt/tq28OW2oPJZAzhLSDDi+
        GaesinskyhapHK3oCpIpVUYmBOPVWiRDCKrzXhWbFO1vK7/kAKkdSBMIe0dFfsz0AGhyGvYUyMEa
        LCflK9r1a7I8EEF2hk9imyKPz6UQ+RZzx2YiZWSO4TpnVgqxEi4iIKaQ32pWIjM5xAD1Rv+JPmlf
        vCg2KXL4+PjYUvcl+4fCj1AB9CASZoyFgZpnaI0YkVYIuBqQhEAK1x2GHaXPXbFFkbuNZW5HzAco
        zhESJFgP4EdFWph5T2juqX1VUVAEXGDFuLw8DDN1+is2+SN/CSPK7jfh84M8HW16qveUcWOdb7NU
        sivHKFEwUjUzAmeostvqaBeuRmpG5tyf6QE6b+eNP/962/gU0aBlmBMgIC156vTOE0ypOihf3yZk
        zpjo5j2ya7uiKjFfu9cvCAWpSeFef/acIuaR2ob8joYxfyIDcPDHQgoAHam3ZHFUdijyEEZODqEU
        oGubtJbRj868VmxT6PxJOPyhavwIP+gRWCtBB8x9xBgD7KQQGQ2McTLNhfcQzSDuQ0hZ056eD1ps
        ptnPP+G3vW4yErr+4X2mMV8ZeEOVzPm0bvybhNEjCuO2zifTh1bDAk0pBXxKd/V6p2VjORXMepo1
        WYLep/PJEptsPwQwvENdJzzzYGWpzDAlwXU2MdLDsDYDXTzeCDZWXAaTd+ALu7WfxWaudfdPfvRP
        Ww7H/cuNJz/6QyUmNsxsMqXONJen1APb7+wKwx2VxAbI8wB/zaZdVeWkr70Az6+c2ObVh6E1JYH/
        sSYlI2gsxZgcmFrnygIwhUo1HTtk+SLjvGojmcUwXN8iiE1evQjo990/IWonvgYZYcwMMwFNU6wH
        XUvQqKjaDfQXDap99HBQPoAo9BK5Q1k+dvZxxDavXobG9KXQxYEEDqSaBpkGvhoCR6j0MzoQlb4L
        JSt0VIJfPwhWpTPqE5tsX4Pdw2H3/sPx9vDB7+WPAlUHiLoBZyFOPNY5AQ9aibZDLRkWYDsZVUfm
        v2rk2xMIic10+/3nfh2+OgRXPRPoW1q0F2LFctK6yUOGyA/+CL4WDZiLvD4ioLv29h0h87Wn4+WV
        kJrsPx2tz8WYmIBf3FyquiLdA8pLrIdTML1Bh2Gp6WiQftOG/qJb0Vts8orVONzuAbPdRv98yLeP
        4ePu8bnh1ajVd+o78InM4LcAPKQJFWXKWgxtUOaLPKiokpktrLFXZU1ssn0x1pUQBtDLkKEzq7yf
        /KUkBhqgRiGOgu4qjgtS4NCA+VTql9F1V0rN9Lh8zc0QqBCkZIBx1m2HRQ51FmQ9IP4GzwsBWoRT
        MC1qfS8nhlyuXYvzzSA22bUWrZcCMwyceDYdfY+ZqRZ4JmqVBKgXvN+VCzRmy8jPmkRCD9QZPIlN
        di1EcxxZlQ4AAbiFOXFIT+mtxkQIBRco+E7+fqF1DwHeNoTqnSIVmxSvxEPZvZeHzpOC2A/iW7aZ
        M8BPsABXKR8D8XflSEL+hH65WwGtwAf6PgKxRaHH+aO/ez610BvufjVVtVoqI8BZWQB4fiFHgPZ+
        BAcU0RpGVoHUwa13vx4oLvQ5LrYpdpwS4e29f6A83FAz4nNmLBz0Nki3EYpjz3AHihdQvFbNJrAT
        JyIcs6F5NHMn3FFsUuh56w0XqpoNbTuCHqCMsNtz66PDPDFPDPyDFQiJpUib/NAx9dS322KbQp+b
        L7Na95/rbA6fMIxxfqgU7owwAG9KcSqKmSby5LhBtXZ3AcQmhT7vn1u+abrNNf+fZkqAztN1B88K
        bGTiRYPQFcUqCF0Be66l/0l15r9ii0J/D0d/zPK7G7ge7B718VZgOSuVIeKdo3JVhI0BTGa1qrb4
        tGJ3KY/1HWqxRbHD+Una5ODUjkb5kVvbgJnheQJBkYHqT/R4AHUBnkl0O2qpqydeFZtpcfGbEv/t
        4ZgbEOp1g51yU1zI0BDcQ5mN+lal66RvyzQyg3koseeNMCS9mmvX4Ryrik22rcOp3tvoPSQPkZeK
        a8xEanwakAkyD8BMmMpAQMPCZFWp8dawjBndTh4vsckm7zfZatv+Vw16VKSR52AgB94excA5Mk0J
        6Sf4L5D8GqiAolpxKXBCndS5/2KTTStQ3W4I0wz5JwSVSNChCQpRX0aHEcliC6NRJeeHib6CcMZN
        9YbiRt+5F5sU+t0Izx2qeB2xGNQZyO/BUMd3XSB5rzMoiLHQqyY7hbP3stMV/Nl5q4ttSl1ugxmB
        Qc7AdaueIqmG5QkP8HMBTIFiAT5v5isJ3vKGp44eR+8ogtim0OXGWj0yxYzSwtYO4yrSJcwfFADY
        aE8AXOC/cG/PvOinubozB7ElS+k712KTP/C4ynAHf6ifnASvnCKBdm1GV2IMtAZ5qBmr8hq4K1pz
        c+XZZ/TAVQxZ16stNSP07sYfGkAnHioEUCUMxM9QvnhOL97N2YOrqTLbYG9OZItrNsnj2ok5EZuU
        Olz3lYlYv48f5BEoW4m/4OthFmMMlJAMyViqZnTgYL0BQ0fXieLCijQCkNIZc4tNSh0vu7t8++SP
        8UPL+Ayai+wqICuAVjDSWr5mZJKAW1E/Zyw8Qf9D321DMcfsaGfRTGxS6nlrGl2Qb4QmXdFjLFzN
        00wEmi3CifAJQ6dHaglsn8br5daiEX3tZ30OQsUWpS7v8xOTsXe7Jmg3DeSJ7mFNN2aGZIHVoBMC
        wgSFGDsBfibJdozSbN5kyFU7v2+xTannjbklxHHEmQxdkFQy4868P2jCxBsFjLC20rxhZozy4GWv
        ebr69lpsUepx45s8kEzCsTxm1M9OLHqQezAWxzxkGKtkACTKBamArfiL6iyFik0KXGZaQfgkLwls
        IM9VRuRgMHxiVe8x6CVOsJvMeaROAnzkdGn3PMliMzLnaPGkjJN1rr0NEkrqCGY/glsfYa7gCqt4
        fdyGD5iSAUBJZAASJFZrSG1N5yMlNtnoe/54Vcm3ctUw4BvQGF8CNFZw6Acg4GYeqQSH6LjTGffe
        NMFRUelsgotNCleg9a2i9AXzHixlvMFAQOp0P5D2BSE3SN8JT2DpAC6zbClbeiNssUmhy80V35nG
        PhVBih/wkNQRJLjTySMc6naVCZXe5sIETlirBCSXnXUSsUmhz42vFKwMzHY62lckUyOIV9zmWCNq
        zmQrmQVwwESJf1sf6LyyxRbFDrfUAasuKRI9FDvr8DZ4byZVoEXlQh+p9TPiCsJ9mDZDZgaivmuv
        8XMIJjYpdLixHsLXWhijm6sYOdNBzCZzaYN1ZFcj9QL0mQt8ZGHTuiHB7PNYbFLo8fPD7nh7zAeA
        Kufq5xVoVwhKuKmB9ifQbFZDN8kSAOMpyFjEyPVO405DaX55w+hWdqYbYpPNy/B+d/zwHG6f9rdx
        nz0ETPKEk3ogCmf1VKsJyC/KnIweKtB9mWeNMVoKKeBAy4Z9082dH4DYZMM6nE5DWwmY/IOpQ6OZ
        aCda4Vmjb1mZnqEKn5lzr5kJeM+yojQG+vl9H4LY5A89b0Z308Tj+UpodsC1CPEggdsMppPnrPI/
        e4q0QY/wVazph+4MWMQWf+Bsa6BC8I1yLWXO+gWTQoPZRX+KAKyimdVIwxIee+Sq1ugUFGNnLVBs
        8we+Pu2e8t3uoaFliZ8MQ1eCXCTIqBtVEQ6UFZlFVJR50d4CjuW0WkdoAbR3xuJikz9wtjE0qRJl
        hRq+GmJNtqiWwLbCmD8cqjUgQ10R0alYVqgl0VlnbCI2+UNPm5o0DNWhkkktDMA5onpwX1sojxHT
        RE6W2SQDhqxqOaztOZpVnTeT2OSPPH2+vwdf/l/SanahxzbwfXLxklFWxUnEQn1RCEiDFK3IJrTk
        /ElCqyd1FpuRunezOxyeGz5TPyIBPFL1geR29BR6IOGoWwouDgUVdDCBVHBVreEGfZvOZ1ZsUuxz
        601MMdNxaOGzLUjBG8C/WdfLGTYONAiGqqOD8OK8reJ3YoTEFsU+U9+8858aOqzMAvPILOPEe+MT
        ZPDQvMJjQa0vwWYJfQXoigipzPrQAoO99nR/ziiEJn/gdWsmoXVB9meMTFRSvmRQki0FkI3QEPQN
        YEfoubrJryEFPACdZxqVQZnJH3jaWMmExMyjnwSfG5xA/EBcQSOGqX6AvLCXUvrhnQVOsO4pvBV9
        eyo2+ZqnARB/C19jlWsErc6cH1Ew6Fy4VkImSBqgYtZFIy6B4AQ8HWvIRD+9zz+xydf8OzNxPu9P
        IFV5rgPzeh1mR6QOahk06+BppGwXKpgPnBs9cAb9FK3Ui5so4HRuo9jka26m0OAbhMpou0WU6Ko+
        Bm9NYBiB4U0AyJAvojfNmD43zcU3TmxvgwGcp8zmq87lp/yQ8kP8dLt7+PtZC0XuLpiNkHle0N1E
        PoJQ31FnJ15Y+DMB7aiTqfxuC0BVbuwM8sU2X3M3/xbzUyOmmglLTinMKYVLD/RCVX6dASSyy+XU
        QCI+8qC3LnsKv17vVym0+JqL7/ePz0/y0UIwDImoxyUUpxfgZsCSrGffkM0lfUGpD/o8VCB6SVPE
        Zt5y6Y8+Nfh5624+/0b+JZqqeMnkz8KrAcCK5Iy6mSN1WSgTE/cwOk3r1a7xDtXG3sdRbPP1PX2K
        cvdoZtG0rWPfmWowjwRkTWaemPxNyCEaplfA4UDsuT79XPl9H6HY5Gve7R5K3nOr5tvWaD2Rh1ED
        mxAtBoVBaShD60KmDT4SNkvYfD2Fo0GvlYRhXDqvG7HJ1zz9+wHtDf/UILTDhApvxAz2EbjzBJ47
        ASuinJlRr55ITmhqaV6V1UMobjrzarHJ1zy8g8WkMIkpP6213V6fhxH4MmEAasy5BjmDJQ7nyFL5
        Kp4u7dqkg4u7s7gvNvmqh4++wpflDs5wp5NTUqZfIgNGxWgKXrXKBdE6hBW0qZi0G+xGKkt3Jldi
        i6/79/59k38LOg0aUEghyaD5BDCQ4wojnIaFoWrv1q4NyN21O0P1pPMjFJt8zcF9y11K34l5AjLj
        VBuKtFJhSRtq6DYDvSbIofUGLN2tmzdSnO+7S8UmX3PuADpgvztuuIPeVFecT2guH6C+nrVNSFuB
        WIQLjuoyPVR4SBXpx3LqJfbUssRm3nLpjx7QfN66m8+/Icl4eRjllw3Uo5V+8xRvg6VGrQvFhsxg
        BLUdyOAgOk9cqBvqM+b/O98LsclXN/f+8Zd8aozKfQRXyTAAvA1MPHB10ixhfo9ZAEYBErhxIOOE
        dfOmRqfBOFx7gM/lKrHJV308PoeGapwfAOSQB4NKGpjkmolZbO17IVMeUbB1ilcEovptdKo7gYZi
        k6+5d/TvG7zL9Hbg6GK4NsEZiz73DPPGzMAVpSpgZ4bquYOCc6NQ3E23L7X4qnMEpqlZ+RRCiQCh
        PkPVFZWBVpSuohpVUyX60VTBuEL/a6kReM+1KjYj8OyPfrsev9xIkIQPhxZ6Kaqpmg4P+BOGLaNl
        CK0skZsHgRCT6cJDkwsL8hdi8r2FOLFJyfa26l2SUMEHuyAAFCtQlLlhBqZBzlXIEV3MpcrFwJhR
        K+U9R1hspsnHKw4zmRX62DCE0gOoyraV/IUuEMiKhZFiDey7xkgnnenzNA74k2tdP78pYottrsfn
        w/P9emPJn1WkXVyEcR71dBYCBfXZR0dHDs14Djhn3dD54+lZV0B3Z9Nim5I12H7iLXgiuiSmkHnS
        qobf2Y3k2uh7TZNPHtAJbbHM1AVwu4vjdUStc++lJl/zu7ETBLsTUBlI2MHLAURgPhzYXO3mLp6/
        Q+YJChjB5g16rnt+Umxy697zU95/3CFDnd7VZgmr/TJb9ib7aRzphCBDGQKF2UD5HC6PiWkFZ5Hm
        hKmFCJG4cDs4yKh83+aJTW68qxGudMidYfa5jmMSp2vILWF1ZHqKqgdTVXQrUWMD80ftp1vyXmrm
        azeuuF3FAhufb9fOCojY3je+VdLpJjEWtO3JmTNgrTr7Bls8mh6LIT5AKhE6Zs4mJMwQqnc+lGIz
        b3h0lrNYP6w3SwMUEoESwoFiSCihSYHvKQ4UlBlAHtABBQoClp78pNMvsZkf+nUT/eGQj3xpQg8H
        xGSY7Cnc/cCxiG1qpqxSmCzcP5RBAJIidOB7x1LFZho8vDmBR/3D8cP+8QnFO2ZiMq3lmklDlP7J
        398Jr8+6ixxgaBBJwZYqrONRMQXpwjMIKILsE0Ikd1qDlyFkRhz7rk+xyd9rPQDZAjG+b1kWJiQK
        PPkBZLFlqBFqaWhOB0eZ01mSVDNWzbwtP9JodGc4KDb5Oy/L7a8gsW/PqiANB4fKLpWmEXJEBp6Z
        /ISOBNQfrFITJV9KTXSfmF3fVH2d6SWeEZv83VbouqWBiWOAbhcSg9krVkkzkTINhJXEWSfSjgxy
        m1rc5ZsChNRZwBGbbF6a9/l+97D78oK5LZAz3/6aw+dZ8YZzw/RZzRwnM2jeFtg8HJNn0CyioIys
        pstVepZndEVg8eB0fllik82L8wgexG8Wh4vmOR6f9zm1XDaTYWAnQ0/FEM8MHwJJFloOC8MbCWZa
        5GeAp9HqW5eEcZ/eJZGa7F6S1gepwi8tjhPqQtcVqecuY5lBxzA7H4KmHVqFxfVmMWje9z1IYpO/
        y2Jc8RrFIRakWiJ0R3UiGWkDaHoZe4E8oyxAGbh7Kfb79UKppFB9ayI2+XuuyZVPkbd1cGBi0hHg
        LmC4ymVLwZ56MlyrE0KmA5E4fY71vgW23Lc8YpO/z/Jc+Q4Z3hzCFgs7x8CYGBD1gUd4ZPAgL9CY
        0o9G5DhtSu1QPvatS5CabF4XaABvd+gbn/GTDQ+OCQM4ZkbFGC1JLAY8lHAaGIoei0YwIBfUQhYK
        8pfTwUnpxBeITV61Cvf+t3UlDrcXlF7Lk8PIO8sxQ4SIyC/UFSOq15YkCIV76NGR/0UGHv7XzaJQ
        5u47GmKTVy3K6QshUDnu/B1DhVU7omU9yN99gYjI05ixmWiqciBE2EGBFVe0JuEaz0xc0dK0HDtf
        HbHJ69ejBvUQo9+h99fwwQSmdiKdVWaK0TxOgAICJXA9naTAoToBvDICuFrrhRO8uH1nQ2zyx2tx
        TozbZDuRCIJKkVoNXKHMFeMeBMjAqxlNm8mCmTNl5Ice7JoET72qGWKTLR6/ZHFiyRTqilUCIKL4
        nI0mvZ2hQrdghmu7G8HSVP9Kpfrit+k+9WKTTX63VsQndIFAeday3Uyivwx1vtKfGESBXMOo6qa8
        bFhe6Ox1FiRRBJWZFPrdSl9EjYtomkYA0gbw6cH7C0lXoAlgbSJ4Grj4SAnKeuHT21GdN5zY5ps+
        N6laglYKozJgQOjLOmiAmQCpIqVoetLrgNl6Aubk525lbKkZgWfNZUtYHzSFBRjaoainU1eRFAkW
        E1jMgb0y+4Lz2Z3Cup7OrNhMk48vhcsXTcvT6D/Ea/uW96mO9tDhgQEDVibqTpb8GF1aBuLhxK1s
        uMjwTnNcO7VA9lznURbb7FiMGuGW57u7lrUg+4P0GcVp5rngek4EuUg2zAXNOw7GGNIA/yAxzeUG
        B4kJ9dG1J+PcuBYb7VyMD/7p6VNl5fvQsiQV3FvbygZWK6h/KG3zmoEGQw2UdLkiq0oJYB4vS0K4
        363CLTbauSQb8mAo/+8+HXZNod2SkK0elZ6hEEkg6NQ0BxjCmW5l8sEF+FUprsyn0eWXaj8QtO7j
        IjV6xdp8kRXePjzefsh3Ty/x/+2vH2AKe0Ab6AGi/7aSHIQTrATSmSM3bK5dZd5LRvDQfgbsS0GB
        EtQCJG89RHVCr++zEtvsXqcXUqnb8rg/L5g/kjuRXKOi0fKpUbRkBr5SsCM5pyCsKIZWAIQG1BoQ
        IZ1JFZCV2hKxwBrZiZwQ2/z9V+kBYlSkNrbZd8tqoSMz0mJDnhGAJ3VMinnQysDjlBjOgQN4cmQe
        oAM3FxMUGX1nSmyze7VeEvAvBPtaVocpVyCRaFKDdwgFHC8EhLSZYW+D3J8+LGtU6v/Wq4mRgs46
        jdjm77M6//mcn3O6ZTqGY5QPByRbmm5vBbyQiZ9Kd0T/cbSFMacBNmUDG+sEDBr1X4iglnXkuXLS
        dn5uYptXLFGVdcxcPKczc6i390P+9fJzy+FB7YPSHpT4CpAesHfNQCa4vSqHwfRCQTqgQjfDmt3w
        DXYujNikaGFaxb6BKgxzolDnFCoFSBtCDEWXqKoV6bLQSYLlj6niXuiC2Eybk5XGUz50i3g1BVv6
        qeTnPDR8AdBJw7RC0k4fyFS1a0WzrBdMLTZzla/nvOd67jcmG9hshBgpsKPbNIA3IIiFkWUiNAGg
        yvnXcNRu4KmUrzqvR7HN/hVpHfxUFYtrJusTFQyIeXkzPC0y6MYZjyCSJeT3sHFvhgbt2DkCIjbZ
        vxqN5aw5grygrxMc/2WYGXUM2uqJ2yCRB1HGd6xW8tvAAk7nvsBCbLNxNU7l212fpicNHq4KIgeG
        ZLxHK0d550CqxLSUCPqI6hBMztsRk2XqPBxik9csx5r0ycHcEFPNiF9rJsGgY9A1uIIIBp2YpSJi
        OR7IvA2A+NZg0xKa9p0JsU3JIpxEYvjTSfQlaFUQU1PsgyQQsBb1HmZvAO2jmIJQ+TBB4E35tfSS
        WYvNiP37shrWqItjR0RgUiUNZF4K1U6qnNDQKyICgEYQt3twARmtpMsWTyxM3w6LTTauwNWaSGUq
        Q/24Kf/R+J+gZINJpXL/KggdoJ9WGWaHbR+T4mBn4Cc2KVmDc7fqpRpKPvDQMAaZLeqNjoo2AkFk
        BGkcKX9SxgfVStAL1h9lQ/C5K1JGM8XTWQcV22x2vpnRXWd2nslz5ZbFozgBgWQKEW6LuaBrCeCD
        aXtjN5yZ2pqls4ctttns/lUCpjzqhWJLAJwN6BL2GQemw00McgeIhBArANc8jcNGvBoqys6gUGzz
        iiW4iteeew/aKFTgqNNBNAC+cmZFUF7xzLaYUo+HRqNjvQZhIzK9iyC12bwIjQSjnssNmTcOP9LE
        Eaz6CN9L1XxEuFYRDS+MJBIXbiRsx95QR2yy2fdGLr8MDyOFtFq4hvzdOVjgueyRhOT5q7UiKkYV
        w7Bh94dHpTPEEdtsd75NLw1JTzoaAy/eMnPLZ8i2QjDgeSobHGMZhpyAosDKnVYlxfoef7HJZt8b
        8x1yvmE8vev0PbnVQVjXZJdqIZGA0dAQjtarjSAg+lOd7XuxSbHvrRkvGw0vJRQdCEwhtAVygywX
        Yqcx0M6BO86kinncFgDY/U6vxTbFXreJ+fIZQ4ptNUO5oBcY00RXC8ocwPO0eJlMrSwCiszmEuGS
        7na6LDb5lsuN8nggE3hVPdUdmIJQi6MGDpC1wuCJ5GB+gM4CiQ3VW8wTm5G49pK5tNB2oLxNTgLA
        CPgCsyFMlwH6rzqAlO+QPIT2BmQqUr6b3eyuUkhNyl2+SiIPVKVCeycxSFQrEYjWMpvKjoOzY84M
        MVcaswzObAh2u0dwxSblrl8nklfPMV8wbxXPk4YacknEqooP2WmoBACtUKMBXXnZdi64zo9YbFLu
        +1WacTzAVFz4fmdSkypbgq4YfMIgzlSCTWpEayxNVLLXEw9jSGd6KrYp9731ea4sgwhecmFzyC00
        NpnU/NTLc4CzKDPRzYMbZS09jb1MGYBUZSZ/5LRcQA3CViiyqDclGv+oapXKPli/ZfIQxf7C+09/
        8nSse1BYYjMCz8539qpE06Y9MhdoA0BbMVAwQRNOBVlXdTx7olzUmsEtIMPwZF62dUab+Vrnz0Aj
        scm3nIcNo4nenxlgquX0ByHGUnSIgcUwGkvSaKknkGxSbEtI2fbS+4vNiHw7b20jwb9KcJw6eMCJ
        r0C5lwAZM9IUQAqZmSmhtuGJTMZVgBgm0c45RbHJBq+b6e4JlSPlEUMDCTEZ5rw1AsTQuUD4r05t
        ZA3vPwJCl5PMNGfnrSw2+Zbfl2LhmZ+gmS0VKUv0S9FKA3ECDozaKDw+SGktNBbBEFIzpWOcNoIO
        QMJdZ8VMbLPF8cZCATCbwfPYDuSHE7gt6sKGL5jCCTOnvMToUCOptCmUwhDS2R4Tm2xxu/EdBigC
        72jFBBgAWag4MOJCeRwU9AA1p6UzYIHJxu2MT6/bYpM/dLuxF0J3y/CfEikAUQl3jgEVBnggqWLi
        K1ArWEBC6WUthzAU17nFYpPf+FrZbdoYD6NmyhM52ghYv1IeDhNo34RmJyN8s4HImjFzIqu1w8uH
        21npF5v8xr3kjxVcK2ncqRnYG4NVPCzIQQWSeuZQyPeZwYEFcPIQUIHyOs3m9QRRYjOv+nJTKWHK
        7rcTOPu2MGR2+ACMi1LGu8rnvLr6Jk+R0pULXyPzhVKfD0kjBg80CXUoqIAX1EnHmX5N2MKSje7d
        RLHRtx3fZ6BrpPoN7qKiTDGSzitU6wnEDkrhqI9CYuRr4QoFLGry7PWGNxch1s7irNjm696Cin36
        kI8v1GlAY08lundPv0i5VDi9HmpHRBrpvXtfgbFwYigmbBgmAqsUuZFKUNt4qlfOQmzyG5dfGGMe
        9w3cnZGpqMDkCU1Umm+0V6AinRQ1mzIxSDosTBUzc70NIBjBufbTPacAYpPfOFgBze/P48JiHAGi
        mlVusMQqJ8scKF8gI4Ag6hw0FdBW85poHo7O68hJzbzp0wVRluPjx2Y5e3CSzEUxHAJtLhXVAPsR
        DBRWQQSXSWJrX1kTE26EkPipbyvFJr9x+5DzXviiGA+JIegHsjdG3fJQUEIAyz9XQXfjuV/h8AnU
        0Du3UGzmVV/+0ARqdbNu/AMkanefmolzobigRrQgAglcFyXnypsLmo0GJ6xjgBwWaioLdFWd2yc2
        8/r2fePdn3BDb1oJZeESpRgKUIciSpxQX4ccyrvapPIwb0L5wmASLLO9dRWxGenWXvz8U2/yZ8K5
        7WfdFDtYoFmwcSJfDF1ndAUoGZFSrDh1ZGpC5SNFv/nEJ3wePYNytxetJLbZfhZOtZi7x3iiI7mE
        jA2xlKrva4jQyaEiYRCTQmuBjAA5G0DuRFUoiDJftkEvMIfXqywhtnnletw/3R7i4z63xJR8+PTu
        A8MsTCGyIogWLvRMGG7wQLsjSb2rvbINeLm/PyS2ef06NNZqJj6JSGGOOBP4WrKFRtlsSOIho+bp
        o1Na5pHx1cvXARlzJ5ZTbPLKRThFAKjqthyGqAYUhE8N74DUAZ0UmihwEwx0zyAhrXJd9M9OvPkv
        lwSBXl9UKjZ55TIc7hG2/NC0ChAWkXPYqksGqglMH0QcVKkXlOUQUkHb8lTBjGsxC8BLJ7ZHbPLK
        Vfh195Aef72tmwZn4B3SiU2PB0XLcUDNBCEeHRFGJsdERZHnBIlBNCFBvY2Z72eFDlRuwb5zITYp
        XZEz4EeYxthB2UQEjFgkDac8G2q1wJ3MnCCmn0OlqoWQ3dVmW09hTGymzck/Y6R03t7PSfkDKkzM
        UzfEA4jz8oGPCpqCzOmGoY18B3AnPRp6ywxyIDcFFeaKZoSZ99rNfymtSC02bv4pNDrumHBFiYoJ
        VzEdkS0M+kULjzv9F8S2uPagPwezbm1YgItAPUViuKwkXFWhu28NxCb71gCm5tNr2LIaC4zC8DGA
        jKJIs+QSYBfPzP7NAF5hbUCMhGnx8ZQvvQhSAPHsWw2xSelqnDuWCIofoPVvOAmgeBHQQZGBoBeO
        WASQ7TJFU6Z8UmOPMA9P/H59AXkB5k6wgdhmm/NfF0LknwPVZIAG0PLBrlwbIjQPoKGOlD9gZZ/4
        QCzyyF5vRrgcQNC+EyC22bQI8S77h+en28a+LfRrlH7okwBQqBcD6O2x0pHR/4KNfliQa4WVYyvT
        ivx35yCf2GbTAjS1xAZg7cPsOe9Uoqv6A1SVRDyMMla6p5FZBmomNdTpefkhdpeZafbz5vAJWvp8
        hJX+/AAIQ54lkdJAz4loQuWGBswPBGVkqI+wF9Y4kGREfygSdTouNtPv+A0NQf1y9X+6dfPtoIy9
        5T1bWjpp3Pegy4AhwfLL7Dc6U4wz8iACnETrjqPAd+DQ51lTQ9efHIqN/j6rZCB/+FxUHd3tz5r/
        tawRoQJOo4uCBEecq96Lj3UgCCxT1CDUmIJ2IIs3EqT0lXuHgMRGf581Gi4naTTXnSQSB/h5CTLJ
        pDVQZMIqAgi48ZD5Yk6WOgvapmmDgyHBAFlw7UVzjjLFRn+fVbKbk2RN+0kCGARziPcJRQyKleCy
        IQMNiGYiZ0ARpiQUIMK85WKHtb5XflFstGmNGktQeQ4eItdlIJVeIL7izSmMjpfgmbOiCKe4b0iz
        N+wyS68Cmtjk635/Fn4XPjCRjUxjgR3BkVV4PB2oRhsEYGpdGiLoE0nA1JtTi8287dQfP4f+vH3n
        nPnzT/L4WIe6i3CzAWBlFCqNIKJIkAKKAQDNJzdDbYvg5iZdXCig9N1mYpvfbO4pFYqUvvaf5C5m
        Bt1g9ifUJfCD3xKGl1i/0OBQ3kvkgBND7i5tvsmhWwxBavI7Hl6rPojYJUChzOgusQe9oZEbmECn
        Sv0C0QRW45HGsHZN+TT8Hp2IBLHN131NGfmPlB/iJ0ir/k5Nk1aQfG+5Ukf0+CjvEb4xFjRDZlO1
        jBkiWBAfBC0GKzW6g5e4DrRmZ3YnNvm6v+/j3eNzuoW0Facr0fqhJUaDfKRy7mcLZRF5G818+O9C
        lbCgzc/cm4ZGnLx2nYGCd73vYxVbfN3dina79U87+ZbSs+CBYY5Lg5FiSBEkI8xjCKnCsgxfEwBN
        pvpKWUP1CXR9n49ik6/7eOcf3hcI6eQ+DjMzPKhhUmwCxzhxBxeEJZgNgYgEILWqMNxsN+P2AzWs
        Ph/FJl/38X73GQYm9xKdXzXDIZAgV6HowDml+WQgQ4civV7Fjn014KcuHyezIp2NKLHJ173cP8UG
        9xyMCdy2lRwbgHTl7JzhD0CAiIeTaUx4ZZjySevTaanA9W0iwmkyk6+7V1FFcv80pW0kchh3qHhb
        zqiGJRl+PJqogIqqyh2cKTluBu+AiHXiwcU2v+cgLYPdsT4lJaNVHRu+SQY4EKrIFAMgOOb54Frh
        rJp6aBOqoVVikYKqW7eTw91ZOBeb/MbbxrRkjMBGGMQiJEBHDamWAaYfwHwOTQp2EsA//wjwyFoG
        73VNbPF//t8//ITg1wMgkJx++kvhQcz/8/8BAgiB1oJrAQA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:35 GMT
      ETag:
      - W/"d785e36cb46613bcad684414d2d703614ffe6622b99c6593455270d57cd3613c"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - CEDF:1DDF36:6EFA858:820B06A:677BBA2B
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4992'
      X-RateLimit-Reset:
      - '1736165315'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '8'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nThe
      root cause of this is not clear and you must search the codebase for the hidden
      answer\nExceptions:\n<exception_0 is_exception_handled=\"no\" type=\"ValidationError\"
      message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9042'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-83f8ffb933ae8e64-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3RSu47bMBDs9RXE1lYgyRc/1AVBiisOQYAAV+QCgiZXMhOKy3CpPGD43wPJtiQj
        uYbFzs5wZrCnTAiwBmoB+qiS7oLL33XN4/tP5U/z/OPt02HzYf/x8emZ7edetb8aWA0MOnxDnW6s
        N5q64DBZ8hdYR1QJB9Vyu96Um3K33oxARwbdQGtDyh8o76y3eVVUD3mxzcvdlX0kq5GhFl8yIYQ4
        je/g0xv8DbUoVrdJh8yqRainJSEgkhsmoJgtJ+UTrGZQk0/oR+unF7AsI1GSWvWMUjtU8QXqRjnG
        85IVselZDc5979x1fp5sOGpDpANf8WneWG/5KCMqJj98yYkCjOg5E+LrGLe/SwAhUheSTPQd/SBY
        7qvtRRDmmhfwtQxIlJRb0tY32p2iNJiUdbyoDLTSRzQL7nZfTRlUbyzNWJEtov/r6H/yl/jWtwuV
        V+VnQGsMCY0MEY3V96nntYjDJb62NlU9Ggb+wwk72VjfYgzRXu6gCbJQamfWWBUHyM7ZXwAAAP//
        AwCsqB5yFQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdb4334ad1645c3-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 11:10:36 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=prCmMDuENWdJurzaYg4jDEb_bme9wAcXw3vBw9AYeE8-1736161836-1.0.1.1-bDCDGPUqhDYl38_M_apsc2bIu4BInIUqMJwHq6Z0yBwnzcFiiAtK8KlNqQLUoSIIfXmoK8Wicq50Wc0zUJgf2w;
        path=/; expires=Mon, 06-Jan-25 11:40:36 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=brrdm3ltNdtANbeC_IJpNxb.5735XJPYZlwnRVjbqNc-1736161836910-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '364'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997899'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_70cc3c434c3be84bc8cb478c4716993b
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71RubKjSBD05ytePHulxymJ8ZA4hKQGcYjLIYDmaG5xCMHG/vvCG2OcjRhvne6O
        7KrMysq/f3x8fPphGHWd19d5VH3+/PicfILZ+hirWXS5p+D4iLFo3NDAu6qVyT1Zb9rICDPj+5UB
        Vwx44caCKuvtBRpeqR5VSrcRXNd8mhSbMz3PUipiU1w7D2nL3x8W4dJH9moDXTT1V3ZpYtexhM35
        nNO7QGkUVTlJu9tBMeRmaECXS099stQbLZptYM+SHcfjbqBeVXh3NY8KToR/SpwrC1Wd1SRdUM+i
        TQDUMTfSPz9cpLgHA55BlJHv/Yjhe/rzr9Vz9G5QG3UeWh2TNMN8o11YN9G6guWqEPxI+77pfn59
        jeO4Teo6KSK/Qd02rMsvf+jTr+5ZdFH7QmG0LeoEVX9sCIt6gJum8Pu4bss/lg8LO6riehuVPip+
        Tf4dk9dPvwY9Rn4btb9+EPydYTRd0kAMkYIu+mOWcBlJnVT2jbssV8oS2iEes2zklDOrJCCEEliX
        3DE05JYOLVsPwpkTEswOJhvsBLgFLXl0O12wyGZXzquJqyhWt4tME5JghWp41sZwrl83QsgcgsGD
        SptvJXwFBOxcnc4CAlsp0qhaKSRSztRR4ZxRNnhqkenlSpjkM0u45LGRy3RYMCI8q5RrNXhoJLMr
        5rPMCTW0pcGxj2M40VVAMFUgmnhImNOiOUDRHODptxa01P9La4aWtGq9wcIFDGcEs4rJHDvKWU4D
        40ErnLrW1d8RVHKx7GeKdLoJpjUas3esopOyGvmlOQSI7qFlDi6ppZAwi1Bklrecquf/7rNJtwjL
        ovQtM5eyBgsrs/j2LzC1Y8v1yqvwfebY7jWonDEgXetBgtHI36qKmWf4zVWkcJkNGOEsZ/ziIZkV
        fUSunY5L/1ueweoLlzlAL9HX9/EaE4NSRtow8wFidlaOxCre3Xr0PMUU5I6FyYect8s1YdLAySKe
        qhOV58Q+lMkF6U/+hfGvTXbDc8aJKVAdbacZ8NuBy3PibulAFW7M7jJf6oMcbSpp9xbfE6o6Rep9
        NSlfRA0C0Lx2Ylo9fJc9cSemGXUu6eBm32nEoGEX2KV4SvIb1yt3saS3TlC79ETd8gzaSFBfHKZ5
        x5jJTDSTZabGyBeN8EQf+7a99TZV3elpx9ptB59khK5HXWzc4Vns+5MZeUmckPkVXaRk9B3tLsy9
        pRyg1M3qjhKEPRVkPC9ppbOcOve8DtTs4lodP4iYxt17u6Ffgh9vjPZ0mUJHH0Zv71D8+Pnjn38B
        PsaIcJQFAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:39 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nThe root cause of this is not clear and you must search the codebase
      for the hidden answer\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK."}]}], "stream": true,
      "system": "You are an exceptional principal engineer that is amazing at finding
      the root cause of any issue.\n\nYou have tools to search a codebase to find
      the root cause of an issue. Please use the tools as many times as you want to
      find the root cause of the issue.\n\n# Guidelines:\n- Don''t always assume data
      being passed is correct, it could be incorrect! Sometimes the API request is
      malformed, or there is a bug on the client/server side that is causing the issue.\n-
      You are not able to search in or make changes to external libraries. If the
      error is caused by an external library or the stacktrace only contains frames
      from external libraries, do not attempt to search in external libraries.\n-
      At any point, please feel free to ask your teammates (who are much more familiar
      with the codebase) any specific questions that would help you in your analysis.\n-
      At any point, please feel free to Google for information that would help you
      in your analysis, using the tool provided.\n- If you are not able to find any
      potential root causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20
      word reason for why.\n- If multiple searches turn up no viable results, you
      should conclude the session.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.\n\nIt is important that we find the potential root causes of
      the issue.", "tools": [{"name": "list_directory", "description": "Given the
      path for a directory in this codebase, returns the immediate contents of the
      directory such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '14363'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-817c995338525cdb-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        QnMPNl8hyykhJRYAAAAA//8DAERooCZMIwAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 11:10:41 GMT
      request-id:
      - req_vrtx_01RCH28hDzhGKaVYmg1qpoQq
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=802f9b301520f83e63f6b47e6105226d85ce154e
  response:
    body:
      string: !!binary |
        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
        jXP+F/6PwB9//AeFeGlw+iEAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:45 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:00 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - CEDF:1DDF36:6EFADAE:820B683:677BBA2B
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4991'
      X-RateLimit-Reset:
      - '1736165315'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '9'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71UOZOjOBjN51d0dbzu5mybyTC3DbIxmCtxccggLmEOY9ja/77QE0yyVZNtpnr6
        vnfoVenvH29v72Ecw6679biA9fvPt/cppLiPkOAvLlttt0W/uVHKVXYfxvWy78+7ebcjPUuU1Ap/
        ySM9OuRQi3nbbulOfZIGd2VOcD5svaB0vN2Q6saX21QPVVSQ9yw08XnGOuAE5eUh9l7kZ4+vTiQ4
        UuU0cY7qyhk8m2FdQzNoDHDiDoxlSZIlVm1w3S1zih9Q1aMtLuNeFwQ+i0AopP6RD3mLv2iWbKqK
        RxkIMzqyaonx6VgAl7Gn1EyZeYLcsu9/rZnhq0Et7G5oTUyzHPeNdjFu4PoEWd833c/Pz3EcP1KM
        0xKGDeo+Ylx9hkOffQ4dbFF9xx+wClH59qfx7lEuC08Uw48Sp6j+40Jc4iHZNGXY33FbvS2uapT8
        cv5d062ffhndw7CF7a8blPzuEE6HLFJidEIH6zprJEBap1V9Ewjal5anrE9dZ2AXjD+btEHJleEe
        Ct++oKDyWeBeKX9OaWP2CWDzkyEuaCUhXTgQ0ONXzqNDmuhufiwyTUwbK4QT9TLGM37qlJz7FEdG
        9WXWq+QZUUkXWGweUcRKkcF6pdBokJvjSfRHYEvMItODWp6AylMBvW9AlQ0LRsWqyQRuQ8Z2OgdK
        MQNRxomnDb63H+OJrSOKqyPFIWPKmRbNIVGcIRF+ayWu+X9pzYmrrVovY+EybH80ZpMAIj+CvGAN
        +8qeRHOdw98V1KBc3meCFttE01qN0/tu2Wk5RmHlDBFi+8R1hoC+ZAnllLHCLWeQmep/73l0UMZV
        WYWuU2h5Q8S1U37nlznsewCvvFfZ6a75gXbEgg7kdIyVQAfuAUM1I67WylVmyeLNsOMZ5NKSISUA
        GlHgZeOy/wKzseYigWhSS/XVpun5h0dIu7vCWYxM65302g7+3p1yItqO9W7smqOTiq6b5n5x2NnC
        XvB66STbw817VqOD9o8C65mjat74JRXnQDzrQ9nu9YeAuky0prTbQlvdFQPVWu0ey5z65WrbbGdM
        e+0oVckjMtHyc2UPPeIvUb6dZ6TshZvgR4qdH9iTb4n36d4nbMhuIPvq78XryGC2isJnFpZUyORi
        PMBjT8p84HoZzWj6634hma+lbx/6jH0jNIkgRN8cRLnp7THZUK80MduWVmjtQY71FsT3Idud053j
        HsVL4By7E8GcjTumu41a1ufuPIkWxu1s57LLx034OLCpIEDCGdhZQZoZPm9UId06SGqR+xzff/zz
        L+72ZHGUBQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 11:10:46 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for figuring
      out what is causing the issue (not thinking about solutions yet):\nnot started
      yet\n\nWrite the next under-20-word conclusion in the chain of thought based
      on the notes below.  The criteria for a good conclusion are that it should be
      a large, novel jump in insights, not similar to any item in the existing chain
      of thought, it should be a complete conclusion after some meaty analysis, not
      a plan of what to analyze next, and it should be valuable for figuring out what
      is causing the issue (not thinking about solutions yet). It should also be very
      concrete, to-the-point, and specific. Every item in the chain of thought should
      read like a chain that clearly builds off of the previous step.\n\nIf you do
      write something, write it so that someone else could immediately understand
      your point in detail.\n\nNOTES TO ANALYZE:\nI''ll help investigate this issue
      by thinking through it step by step.\n\nLet me start by analyzing what I see
      in the error:\n1. There''s a ValidationError happening in RootCauseAnalysisItem
      model\n2. The error specifically mentions \"unit_test.snippet\" field is required
      but missing\n3. The error occurs during model validation\n\nFirst, I should
      look at the models to understand the validation requirements.", "role": "user"}],
      "model": "gpt-4o-mini-2024-07-18", "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1384'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-80ea46b970a5dc34-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFLBatwwEL37Kwad14u92XjN3lIooVAoLaGXphitNLYnlSVVGpemYf+9
        yLtZOySFXnR4b95j3hs9ZQCCtNiDUL1kNXiT3wzth483t5919/CzquS1Cp++6qG+e/fl/Z9bsUoK
        d3hAxc+qtXKDN8jk7IlWASVjci13V1VZlfX2eiIGp9EkWec537p8IEv5pths82KXl/VZ3TtSGMUe
        vmUAAE/Tm/a0Gn+LPRSrZ2TAGGWHYn8ZAhDBmYQIGSNFlpbFaiaVs4x2Wv2uRxgoRrId3IvREjeM
        kdfRkvfI9wJaQqOBrCYlGSNI8C6pSRpwvzBE6noGsqAlS0DL4RFcgCklKGdb6sYgUy/r5Q4B2zHK
        1IMdjTnjx0so4zof3CGe+QvekqXYNwFldDYFiOy8mNhjBvB9Km980YfwwQ2eG3Y/0CbDTVWd/MR8
        swVbnkl2LM0Cr3erN/wajSzJxEX9QknVo56l863kqMktiGyR+vU2b3mfkpPt/sd+JpRCz6gbH1CT
        epl4HguYvvS/xi4tTwuL+BgZh6Yl22HwgU4fqvVNIWWtr3BTHER2zP4CAAD//wMAahQN1l4DAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdb43700d6745ca-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 11:10:46 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=feXOjijd18EGXyCuTGPU3z_rJgELef9xQX6qYnk_9sM-1736161846-1.0.1.1-YWHp_rlGJRNRo.JVQlahmcx2KY4Y.GAX3c8NB9qmQLdKlp9M.1IoG.LwOjnERQOuxtEnVxYfMAkPG.H1Fd0IoA;
        path=/; expires=Mon, 06-Jan-25 11:40:46 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=VWzKhx34r5neSzb1bLn3Cj1EqOxvC57G9tj.CGGAGeE-1736161846546-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '504'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999666'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_f009e8624e1020d72ac98eaa6bc2462b
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nThe root cause of this is not
      clear and you must search the codebase for the hidden answer\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK.", "role": "user"},
      {"content": "I''ll help investigate this issue by thinking through it step by
      step.\n\nLet me start by analyzing what I see in the error:\n1. There''s a ValidationError
      happening in RootCauseAnalysisItem model\n2. The error specifically mentions
      \"unit_test.snippet\" field is required but missing\n3. The error occurs during
      model validation\n\nFirst, I should look at the models to understand the validation
      requirements.", "role": "assistant"}, {"content": "from typing import Annotated,
      Optional\n\nfrom pydantic import BaseModel, StringConstraints, field_validator\nfrom
      pydantic_xml import attr\n\nfrom seer.automation.agent.models import Message\nfrom
      seer.automation.autofix.utils import remove_code_backticks\nfrom seer.automation.component
      import BaseComponentOutput, BaseComponentRequest\nfrom seer.automation.models
      import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue import
      IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "role":
      "user"}, {"content": "Return the pieces of context from the issue details or
      the files in the codebase that are directly relevant to the text below:\nThe
      missing \"unit_test.snippet\" field indicates a potential oversight in data
      entry or model configuration.\n\nThat means choose the most relevant codebase
      snippets (codebase_context), event logs (breadcrumb_context), or stacktrace/variable
      data (stacktrace_context), that show specifically what the text mentions. Don''t
      include any repeated information; just include what''s needed.\n\nAlso provide
      a one-line explanation of how the pieces of context directly explain the text.\n\nTo
      know what''s needed, reference these notes:\nI''ll help investigate this issue
      by thinking through it step by step.\n\nLet me start by analyzing what I see
      in the error:\n1. There''s a ValidationError happening in RootCauseAnalysisItem
      model\n2. The error specifically mentions \"unit_test.snippet\" field is required
      but missing\n3. The error occurs during model validation\n\nFirst, I should
      look at the models to understand the validation requirements.", "role": "user"}],
      "model": "gpt-4o-mini-2024-07-18", "max_tokens": 4096, "response_format": {"type":
      "json_schema", "json_schema": {"schema": {"$defs": {"BreadcrumbContext": {"properties":
      {"type": {"title": "Type", "type": "string"}, "category": {"title": "Category",
      "type": "string"}, "body": {"title": "Body", "type": "string"}, "level": {"title":
      "Level", "type": "string"}, "data_as_json": {"title": "Data As Json", "type":
      "string"}}, "required": ["type", "category", "body", "level", "data_as_json"],
      "title": "BreadcrumbContext", "type": "object", "additionalProperties": false},
      "CodeSnippetContext": {"properties": {"repo_name": {"title": "Repo Name", "type":
      "string"}, "file_path": {"title": "File Path", "type": "string"}, "snippet":
      {"title": "Snippet", "type": "string"}}, "required": ["repo_name", "file_path",
      "snippet"], "title": "CodeSnippetContext", "type": "object", "additionalProperties":
      false}, "StacktraceContext": {"properties": {"file_name": {"title": "File Name",
      "type": "string"}, "repo_name": {"title": "Repo Name", "type": "string"}, "function":
      {"title": "Function", "type": "string"}, "line_no": {"title": "Line No", "type":
      "integer"}, "col_no": {"title": "Col No", "type": "integer"}, "code_snippet":
      {"title": "Code Snippet", "type": "string"}, "vars_as_json": {"title": "Vars
      As Json", "type": "string"}}, "required": ["file_name", "repo_name", "function",
      "line_no", "col_no", "code_snippet", "vars_as_json"], "title": "StacktraceContext",
      "type": "object", "additionalProperties": false}}, "properties": {"explanation":
      {"title": "Explanation", "type": "string"}, "codebase_context": {"items": {"$ref":
      "#/$defs/CodeSnippetContext"}, "title": "Codebase Context", "type": "array"},
      "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"}, "title":
      "Stacktrace Context", "type": "array"}, "event_log_context": {"items": {"$ref":
      "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type": "array"}},
      "required": ["explanation", "codebase_context", "stacktrace_context", "event_log_context"],
      "title": "InsightContextOutput", "type": "object", "additionalProperties": false},
      "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19138'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-88e93b4ff862bf72-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//1FZLbxs3EL7rVww2B8uBtJZs1XEFuEASNEEOSQ07bYNaxoLmzkp0uCTD
        mXXsuvrvBfctS05ToJfqoF3N4+M3nIfmYQAQqTSaQyRXgmXu9Phlnr17/8rhmS8+fbp78+PFh+KP
        P28mb89+v7g4ikbBw17foOTGK5Y2dxpZWVOppUfBGFCnL46Op8fTk9lxqchtijq4LR2PZ3acK6PG
        h5PD2XjyYjw9qb1XVkmkaA6XAwCAh/I78DQp3kVzmIwaSY5EYonRvDUCiLzVQRIJIkUsDEejTimt
        YTQl9YeFAVhEeOe0MCKwX0RzWEQfVwi5IlJmCXuFUZwwEsdklHPIe5Ap1CkoAxwMQ0SgTKqkYCTg
        leCeQlqTqWXhS3hILRIYyyCktIVhyKwHXikCj18K5TGtwEegUaThfLYg4FZolVYI6L318SIaVdyl
        TfFaECZlWHccArgMKoCH6hGsPDqbGJFjFd8SmdCwvz8gRF9jVZaZ0pg4wavKkrwsbQ5EwTYvGZSv
        mbo7CDm3Bg3TgbeWEykKwoMyaord/QZsfXUVqNSCCM6t5dfB5aUR+p4UvWPMh68E4fsAsT9fVO4q
        nYMyDKcwntYiVqxxDsS+FqRI0isX6PXFz6BN3hx+NYo/IvFFRQX+gg/WIJyWj9bBo/M2LWQLtdMu
        3Hpz43P4pTxY6EutiC/buM5R460w/Lqyu7rqMFraGbBNcuE/p/arSYi9Msshoc72YfxTOL65hYpd
        HMe93x658AYa9zi4u+H+IqpM1qP/bx2ceZs73lEN35/6fiYTZYh99U5Pp/Vb9VIx2unm60QnoSx6
        5bAV2eOKaDMVHld1RxML+Zm9kP/Q02WGulz+Vxn6FyVSGNnNzFDHAXDDRCuDibHBYno06Smk1Y18
        Q5pislEidYnvrJG4PC+pZyMOF80VdR3y/HnopdowLXI33B9tNNRiUUbcFkr4PYfS6cn62UZoq6Zy
        H24YPOb0rHkpXbs+607u/nFa7ehJgOa6drnXuqede82zE6Cn3wZZb0lU9ghgywI1Yb91Ks1GUgKR
        /nzdvtPwqVPUa7yNLF/2robC+1VLbsNpJ6GWToiwGae9Mr0VnhJByQ01xf9QHoc6q8iG72+NtXKI
        ne79nDu+h4u23+G37m/+jVC68BiWjLfeFk6Z5Tl+KZAYyoG4N+pPvtM4jvfDqeudIwVv0XCi7XJj
        olwtzLq/GHnMChJhOTOF1rV83W5a2i6dt9dU61t5poyiVeJRkDVhqyK2Liq160HgEDa6YmNJi1x5
        Dwnbz2gC4NHJ8WEFGHWbZKf+YdZo2bLQnWI2m8xGOyCTFFkoTb21MJJCrjDtfLsdUhSpsj3FoBf4
        Np9d2FXwyiy/B75TSImOMU2cx1TJzZg7M49h1X7KrL3oknBE98SYJ5kyS/TOq2rRzVwyEeIkPcLD
        yXU0WA/+BgAA//8DAP0ZskP2CwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdb4375ceeb4b8f-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 11:10:51 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=MScLJwiColz_ky7nAIBxxhPo_NeQN85JUz8nSnm4JrU-1736161851-1.0.1.1-kCjBWXkNNca1fQYssvxvRdU96TBdz63dPLwQysLTI17z0S4unRgCFi7hvbTa27_8P.Cef.GbQp3CFZm.cZEjrg;
        path=/; expires=Mon, 06-Jan-25 11:40:51 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=2GYCelCYrsbZqgH.4uRh.pFAvO_6L0sZux4z.xki6_o-1736161851705-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '4711'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149991838'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_ac8ca7951fd0caead60449108589f5b7
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nThe root cause of this is not clear and you must search the codebase
      for the hidden answer\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_01WPxpUgjP4g8t514mwQ4Axg",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_01WPxpUgjP4g8t514mwQ4Axg"}]}], "stream": true, "system": "You are
      an exceptional principal engineer that is amazing at finding the root cause
      of any issue.\n\nYou have tools to search a codebase to find the root cause
      of an issue. Please use the tools as many times as you want to find the root
      cause of the issue.\n\n# Guidelines:\n- Don''t always assume data being passed
      is correct, it could be incorrect! Sometimes the API request is malformed, or
      there is a bug on the client/server side that is causing the issue.\n- You are
      not able to search in or make changes to external libraries. If the error is
      caused by an external library or the stacktrace only contains frames from external
      libraries, do not attempt to search in external libraries.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- If you are not able to find any potential
      root causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20 word
      reason for why.\n- If multiple searches turn up no viable results, you should
      conclude the session.\n- At EVERY step of your investigation, you MUST think
      out loud! Share what you''re learning and thinking along the way, EVERY TIME
      YOU SPEAK.\n\nIt is important that we find the potential root causes of the
      issue.", "tools": [{"name": "list_directory", "description": "Given the path
      for a directory in this codebase, returns the immediate contents of the directory
      such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '20396'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-b97431ffadb7d9ac-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 11:10:48 GMT
      request-id:
      - req_vrtx_01PCWzd1rgCKFnjjmTbVNkuW
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for figuring
      out what is causing the issue (not thinking about solutions yet):\n1. The missing
      \"unit_test.snippet\" field indicates a potential oversight in data entry or
      model configuration.\n\nWrite the next under-20-word conclusion in the chain
      of thought based on the notes below. If there is no clear conclusion that adds
      a ton of new insight and value, return <NO_INSIGHT/>. If it is similar to a
      previous conclusion, return <NO_INSIGHT/>. The criteria for a good conclusion
      are that it should be a large, novel jump in insights, not similar to any item
      in the existing chain of thought, it should be a complete conclusion after some
      meaty analysis, not a plan of what to analyze next, and it should be valuable
      for figuring out what is causing the issue (not thinking about solutions yet).
      It should also be very concrete, to-the-point, and specific. Every item in the
      chain of thought should read like a chain that clearly builds off of the previous
      step.\n\nIf you do write something, write it so that someone else could immediately
      understand your point in detail.\n\nNOTES TO ANALYZE:\n\n\nLet me think through
      this...\n\nLooking at the error message, we have a validation error for RootCauseAnalysisItem
      where it''s saying a field \"unit_test.snippet\" is required but missing. However,
      I notice something interesting in the code - the unit_test field appears to
      be commented out in the models. This seems suspicious.\n\nLet me ask a question
      to get more context.", "role": "user"}], "model": "gpt-4o-mini-2024-07-18",
      "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1610'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-bfc6b29f403db9dd-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFJNb9NAEL37V4z2HFeJXZo0N04ICW4FVBCy1rtjZ2C/ujNWA1X+O7KT
        xqkoEpc9vDfvad6bfSoAFFm1BWV2WoxPrnzru/d3dbXGr/tkP3Wf390/th9+f/loHm75Xi1GRWx/
        oJFn1ZWJPjkUiuFIm4xacHRdreub1c1q86aeCB8tulHWJymvY+kpUFktq+tyuS5Xm5N6F8kgqy18
        KwAAnqZ33DNY3KstLBfPiEdm3aPanocAVI5uRJRmJhYdRC1m0sQgGKbV73YIJnqPQdCWcRAYAkkj
        yAIdobPAQ98jCwNNIopBO8C9cQNTDAugYMloodCDhhSZqXUInlg76sNoDC3KI2KAjA8DZRwxBh0s
        TFWARaY+XF1umLEbWI8thcG5E344R3axTzm2fOLPeEeBeNdk1BzDGI8lJjWxhwLg+1Tt8KItlXL0
        SRqJPzGMhvVqffRT80VntqpOpETR7kJV3y5e8WssiibHF8dRRpsd2lk6X1IPluIFUVyk/nub17yP
        ySn0/2M/E8ZgErRNymjJvEw8j2UcP/y/xs4tTwsr/sWCvuko9JhTpuN361Kz1Hpja6yWrSoOxR8A
        AAD//wMAQzyAOnwDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdb439d3aa14ba0-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 11:10:53 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=gsTbaG.Jmcjuo9rwMOEfhzMWWDgPEjgwNhUgfuhxW00-1736161853-1.0.1.1-ZGiFnGKoE6cxVJI2d5J0GckXVndlon7Uc2Tqj6KRbUBgoOi5nmC8J4x32k_7IqksRLI1Qvz7IdwCKUkXB3c20Q;
        path=/; expires=Mon, 06-Jan-25 11:40:53 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Ind00m0_ktbuWqwoODVp9FZdOGYk4G._Xfq10qnEizY-1736161853850-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '596'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999609'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_951490d3f0ccbbcc741f036846ab8972
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nThe root cause of this is not
      clear and you must search the codebase for the hidden answer\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK.", "role": "user"},
      {"content": "I''ll help investigate this issue by thinking through it step by
      step.\n\nLet me start by analyzing what I see in the error:\n1. There''s a ValidationError
      happening in RootCauseAnalysisItem model\n2. The error specifically mentions
      \"unit_test.snippet\" field is required but missing\n3. The error occurs during
      model validation\n\nFirst, I should look at the models to understand the validation
      requirements.", "role": "assistant"}, {"content": "from typing import Annotated,
      Optional\n\nfrom pydantic import BaseModel, StringConstraints, field_validator\nfrom
      pydantic_xml import attr\n\nfrom seer.automation.agent.models import Message\nfrom
      seer.automation.autofix.utils import remove_code_backticks\nfrom seer.automation.component
      import BaseComponentOutput, BaseComponentRequest\nfrom seer.automation.models
      import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue import
      IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "role":
      "user"}, {"content": "\n\nLet me think through this...\n\nLooking at the error
      message, we have a validation error for RootCauseAnalysisItem where it''s saying
      a field \"unit_test.snippet\" is required but missing. However, I notice something
      interesting in the code - the unit_test field appears to be commented out in
      the models. This seems suspicious.\n\nLet me ask a question to get more context.",
      "role": "assistant"}, {"content": ".", "role": "user"}, {"content": "Return
      the pieces of context from the issue details or the files in the codebase that
      are directly relevant to the text below:\nThe commented-out unit_test field
      suggests intentional exclusion, indicating a possible misalignment between requirements
      and model design.\n\nThat means choose the most relevant codebase snippets (codebase_context),
      event logs (breadcrumb_context), or stacktrace/variable data (stacktrace_context),
      that show specifically what the text mentions. Don''t include any repeated information;
      just include what''s needed.\n\nAlso provide a one-line explanation of how the
      pieces of context directly explain the text.\n\nTo know what''s needed, reference
      these notes:\n\n\nLet me think through this...\n\nLooking at the error message,
      we have a validation error for RootCauseAnalysisItem where it''s saying a field
      \"unit_test.snippet\" is required but missing. However, I notice something interesting
      in the code - the unit_test field appears to be commented out in the models.
      This seems suspicious.\n\nLet me ask a question to get more context.", "role":
      "user"}], "model": "gpt-4o-mini-2024-07-18", "max_tokens": 4096, "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"$defs": {"BreadcrumbContext":
      {"properties": {"type": {"title": "Type", "type": "string"}, "category": {"title":
      "Category", "type": "string"}, "body": {"title": "Body", "type": "string"},
      "level": {"title": "Level", "type": "string"}, "data_as_json": {"title": "Data
      As Json", "type": "string"}}, "required": ["type", "category", "body", "level",
      "data_as_json"], "title": "BreadcrumbContext", "type": "object", "additionalProperties":
      false}, "CodeSnippetContext": {"properties": {"repo_name": {"title": "Repo Name",
      "type": "string"}, "file_path": {"title": "File Path", "type": "string"}, "snippet":
      {"title": "Snippet", "type": "string"}}, "required": ["repo_name", "file_path",
      "snippet"], "title": "CodeSnippetContext", "type": "object", "additionalProperties":
      false}, "StacktraceContext": {"properties": {"file_name": {"title": "File Name",
      "type": "string"}, "repo_name": {"title": "Repo Name", "type": "string"}, "function":
      {"title": "Function", "type": "string"}, "line_no": {"title": "Line No", "type":
      "integer"}, "col_no": {"title": "Col No", "type": "integer"}, "code_snippet":
      {"title": "Code Snippet", "type": "string"}, "vars_as_json": {"title": "Vars
      As Json", "type": "string"}}, "required": ["file_name", "repo_name", "function",
      "line_no", "col_no", "code_snippet", "vars_as_json"], "title": "StacktraceContext",
      "type": "object", "additionalProperties": false}}, "properties": {"explanation":
      {"title": "Explanation", "type": "string"}, "codebase_context": {"items": {"$ref":
      "#/$defs/CodeSnippetContext"}, "title": "Codebase Context", "type": "array"},
      "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"}, "title":
      "Stacktrace Context", "type": "array"}, "event_log_context": {"items": {"$ref":
      "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type": "array"}},
      "required": ["explanation", "codebase_context", "stacktrace_context", "event_log_context"],
      "title": "InsightContextOutput", "type": "object", "additionalProperties": false},
      "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=408a75c59ebb4b28b86fddb2acbc19c8,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19586'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 408a75c59ebb4b28b86fddb2acbc19c8-a384f906986c6eae-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//rFZtb9s2EP7uX3FgPjQpbMeOnZcJyIeu24pi6DqkTVAkCgSGOtlsKVIl
        T5kNz/99ICXrpXYwDJg/WNTdcw/vhXfUZgDAZMoiYGLJSeSFGr3Js/e3H8svd+e/rH6/v3u3ym/u
        v9zeG3c3+XDLht7CPH1FQTursTB5oZCk0ZVaWOSEnnV6ObuYXkyvzudBkZsUlTdbFDSam1EutRyd
        Tc7mo8nlaHpVWy+NFOhYBA8DAIBN+Pd+6hRXLILJcCfJ0Tm+QBY1IABmjfISxp2TjrgmNmyVwmhC
        HVzfxBogZrgqFNfcex+zCGL2eYkgTJ6jJkxHpiQotaSE0BFkElUKUgMtEW6Mobe8dPhGc7V20r0n
        zCHECFKnUnBCB7TkFOCVIkUnFxpyvgZtCLjyb39JWgaMKK1FTWDxeykteh/cEBTyVOoFkAmgZ65k
        GhwGtNbYccyGVSzCpPjEHSYhzBX5gB68CmBTPTzKYmESzXOs4l0gOdRk16cO0dZcFTKTCpOC07JC
        OisC5pSXZPLgQVhmcnXqz4DR3t9TawwlwifmNMTsxsW6R+u0LAqkilQo7tzhXB7/zB1+8BQnUVyZ
        yzQCqQmuYTStRSRJYQSObC1I0QkrC+9eV3zU1jGCWy3pMzr6VLkCf8MfRiNch0djYLGwJi1FQ3UQ
        57O+y3gEH8PGXD0o6eihiesGFT5zTW8r3OPjjoNVJFv/eKzr6IiLb2S5+JdKhvq0lfy/6vMfDkip
        Rds5ZJJA2IMoqTHRxiOms0lHIYzayXvSFJPeAbFIpdWHT8g47JfUHYHH8S5FO0KA168dqqwGpmVe
        HJ8MO+ojiOMQcVNo/x5BMOqKE6kd2Wrt9hmas1WZH/cAP/p0tFsE07bL2p0bunGjHb5IsEvXIfNu
        Pl9m6LTMQZaOfp9kuyeR2Q8EewhUDrs9VGl6lfGOdFtrP7H+V9epaq7E43ulfujkx/n1Y+Ncz+ig
        Q407PsKTulMryRBi9sytS7hLvrpdA2zCbqiyylf/f/DY/mlNXtBxmFzXr37NC1rDp6bn4a4d8L9x
        qUqL/sp5Z01ZSL24we+lv4vCYHw17I676/F4vO1PlDBQNEA9WfAZNSXKLHqD5THW2+4taTErHfc3
        tS6VquXb5tpVZlFY8+RqfSPPpJZumVjkzmh/xToyBQva7cBPN3+9l70bmxUhFQmZb6g94eyn+VVF
        yNrPilY9P5vVWjLEVUcxu5wOD1AmKRKXynW+EZjgYolpZ8/5+UUTBC9TaVrdZNCJfd+lQ/RV/FIv
        Oiwv0rcKIbAgTJPCYipFP+wWZtF/er0Ea3IdHGZu7QjzJJN6gbawsvrwyYpkwvlVOsOzyRMbbAf/
        AAAA//8DALMeUqMGCgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdb43a388634ba6-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 11:10:57 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=DA4UoD7XR_0BCrGNZ97p7b3Vql71T0fGR29v1eSLDKc-1736161857-1.0.1.1-_JQpyFiXCjDv9dPLirbE6XKzDFkAlT2_a9bl7feh6Qs1fFQqtgEkiSlmgIKQSrT8zeo1qRb5.bvrbN47HFm5tw;
        path=/; expires=Mon, 06-Jan-25 11:40:57 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=KsBMYwaRS.ik_2qPD3B9KzB00ndX6iKL6uCcbYDJHQs-1736161857862-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '3555'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149991828'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_834f1602e80ac9f52ab2f9d646816943
    status:
      code: 200
      message: OK
version: 1
