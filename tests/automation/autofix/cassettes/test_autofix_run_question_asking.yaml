interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repositories/439438299
  response:
    body:
      string: !!binary |
        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
        32+Mzp7/AxorTVyNGgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 17:48:52 GMT
      ETag:
      - W/"7fdcaf66cb4686b48210d5567acc510b95202b6408f14237678699761a646702"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - repo
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - C586:1A6427:6F9EEC8:831B7B5:677C1784
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4982'
      X-RateLimit-Reset:
      - '1736186640'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '18'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/branches/main
  response:
    body:
      string: !!binary |
        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
        eRMw6GPHjdN9fvkT/TE/orcTAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 17:48:53 GMT
      ETag:
      - W/"3e93798030c4bf1052ae0329418816b326e4fb55b3df0fdc2bee3a54717c647c"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - C586:1A6427:6F9EF13:831B81C:677C1784
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4981'
      X-RateLimit-Reset:
      - '1736186640'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '19'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/802f9b301520f83e63f6b47e6105226d85ce154e?recursive=1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 17:48:53 GMT
      ETag:
      - W/"d785e36cb46613bcad684414d2d703614ffe6622b99c6593455270d57cd3613c"
      Last-Modified:
      - Fri, 03 Jan 2025 23:42:03 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Accepted-OAuth-Scopes:
      - ''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - C586:1A6427:6F9EF5E:831B875:677C1785
      X-OAuth-Scopes:
      - repo
      X-RateLimit-Limit:
      - '5000'
      X-RateLimit-Remaining:
      - '4980'
      X-RateLimit-Reset:
      - '1736186640'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '20'
      X-XSS-Protection:
      - '0'
      github-authentication-token-expiration:
      - 2025-02-02 19:42:38 UTC
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nThe
      root cause of this is not clear and you must search the codebase for the hidden
      answer\nExceptions:\n<exception_0 is_exception_handled=\"no\" type=\"ValidationError\"
      message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=e77b600d7fbc4f0c88f426887ec097aa,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9042'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - e77b600d7fbc4f0c88f426887ec097aa-94bf019d368e3b4e-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dFJNj9MwFLznV1jv3KB8dEk3NyS4sCc4rJBYZLn2S2JwbGO/SKCq/x05
        bZNUy158ePNmPDN6p4wx0ApaBnIQJEdv8g+jecaJ5P6jHb910/D0++vDc/nlMz19MjXsEsMdf6Kk
        G+uddKM3SNrZCywDCsKkWjb1+/Lw0NT7GRidQpNovad87/JRW51XRbXPiyYvD1f24LTECC37njHG
        2Gl+k0+r8A+0rNjdJiPGKHqEdlliDIIzaQIiRh1JWILdCkpnCe1s/fQCOvLgHHEppohcGhThBdpO
        mIjnLStgN0WRnNvJmOv8vNgwrvfBHeMVX+adtjoOPKCIzqYvIzkPM3rOGPsxx53uEoAPbvTEyf1C
        mwTLx6q5CMJa8wa+lgHkSJgtrb7R7hS5QhLaxE1lIIUcUG24zWO1ZBCT0m7FimwT/bWj/8lf4mvb
        b1TelF8BKdETKu4DKi3vU69rAdMlvrW2VD0bhvg3Eo6807bH4IO+3EHneSHEQdVYFUfIztk/AAAA
        //8DADomF4kVAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdd8aa7299e45c3-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 17:48:55 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Ui5oZtv11CjPcYs4Mas6CGvnqfgwDh3igZTCaF2Q_d0-1736185735-1.0.1.1-xEaLEK_ulMVjpHwLpxXmq3ZvXoY.8Gd5I4597IcYEaOGwW7NTc5_o45_S9d_6JjH_E5d293dQObqvSU5lDeUGg;
        path=/; expires=Mon, 06-Jan-25 18:18:55 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=.al2fD7GqyQIMNSsiVP4q9dHVivkBTBy6YyA8uTXB50-1736185735131-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '479'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997899'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_ae3cf19e6a97f4240aa85c6930de19d6
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71UyZKjOBC991dU1HlcxWLsom/YmM1GFJj94gAJMKswi1km5t8H3Ie+TETf5iRF
        KvO9l/ky9PePt7f3AMKobW8dzqPq/efb+xRQ7EdAcIbDlPtd4R8lI8bO7izlNG/2+6rnt1zA0t2o
        Eg4oOOnMPYY9c3HCKh4PGWairx3idMn2jYBMxtZBo3qJgp2S1t4hp7iW7qCTZLhpb4q1edy0rFbb
        NoKkvHmwg0JKlZBd1SJBPv+c2XHQhKfp2F/fbtM+gwZFkL3JDtZxubshlUflgQuOiXfmrvjKGfJV
        0CXRpdR0gkeRb1piLHaK9rgLfRRXKkeQ+/37X2vX0VinTdTe0rVnmmHZV7SFuI7WIdy7rm5/fn4O
        w/CRYJwUUVCn7QfE5WfQd/dPWOAebeoi6GLclG9/Su/bqEmrGH9EZZAWbwtJlaI/VrWPYql7pjD6
        KHCyKH1pfBl166ZfQg9R0ETNr5cU/XYxmpR7KMJUS5WrNcskSOVWLrvaP8o7OUsYj7JmYOZbb9Zp
        lRJK1VFyzzRSv/QY4FiUNye0OnsEMLlJ5ZdoeUovR4WIXG7FPNuknsb6x0JTQ1pdQxhJxgBn/LxQ
        QuZRLBlWxnwp0TOkUOtfmSykiBXiHlUrhEyDTB803huAedouNB2ohAlIHOXThxqU936JUVDSt75T
        k9BMZl/MZ8ALGLly77mHAU5MFVJsFYo2CSl7Wjh7JNo9Ov7mQo7+f3HNyJFXrlFdsFTTG9RZJwDP
        DSDLGdW0GI3X1zz8sqACxTKfKboydTit1tid5xStnOE0KO0+TJkOOXbv08YdUXYBRXa5g7su/Xed
        S/sFLIsycOxczmoCVnbx6l9gsecCvOKiImGQZfQWXYum409mZhztDJx82prQC6u4o0WbasIZZOuc
        lnMaUt+9D0v9CGZ16Sth1FmlF+vPsuzU6WNZLHtDzJQq10mrbY+P9ORo6ZUrT/Q+LLUbNsenOOwz
        MoQS3dHOpoaucqC1EXR0zDEssGSfOIyBflvWJCeVDff1daBPcGZ1t2quLvOdhWyzfDaiGMIxAJ6P
        3XIZ8EOL+c54TCTXSGoSfHcEpLxc4uRsz/eiA7Utc42ahLseoVfvToFoIQKjUxLrUq8QsSYpgBQk
        XLuBNjx35u7gUbeLccnu9mE8qXWmgccxyscNEas5mW7a87Hfx0QkJFvPRCP7vZ9uR40SwKKjqdsu
        UfDeNlOroSUL6WqUO4RpzfNdUMan8yxKatp+GXgk+HhDOwenj9KdKSs5m9OGDbxsts85wW/J5P3H
        P/8CJ2t0opYFAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 17:48:57 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nThe root cause of this is not clear and you must search the codebase
      for the hidden answer\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK."}]}], "stream": true,
      "system": "You are an exceptional principal engineer that is amazing at finding
      the root cause of any issue.\n\nYou have tools to search a codebase to find
      the root cause of an issue. Please use the tools as many times as you want to
      find the root cause of the issue.\n\n# Guidelines:\n- Don''t always assume data
      being passed is correct, it could be incorrect! Sometimes the API request is
      malformed, or there is a bug on the client/server side that is causing the issue.\n-
      You are not able to search in or make changes to external libraries. If the
      error is caused by an external library or the stacktrace only contains frames
      from external libraries, do not attempt to search in external libraries.\n-
      At any point, please feel free to ask your teammates (who are much more familiar
      with the codebase) any specific questions that would help you in your analysis.\n-
      At any point, please feel free to Google for information that would help you
      in your analysis, using the tool provided.\n- If you are not able to find any
      potential root causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20
      word reason for why.\n- If multiple searches turn up no viable results, you
      should conclude the session.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.\n\nIt is important that we find the potential root causes of
      the issue.", "tools": [{"name": "list_directory", "description": "Given the
      path for a directory in this codebase, returns the immediate contents of the
      directory such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=e77b600d7fbc4f0c88f426887ec097aa,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '14363'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - e77b600d7fbc4f0c88f426887ec097aa-b0e2cf3b6166e906-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 17:48:59 GMT
      request-id:
      - req_vrtx_016DopLViax2wsaofZLZTm5f
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for figuring
      out what is causing the issue (not thinking about solutions yet):\nnot started
      yet\n\nWrite the next under-20-word conclusion in the chain of thought based
      on the notes below.  The criteria for a good conclusion are that it should be
      a large, novel jump in insights, not similar to any item in the existing chain
      of thought, it should be a complete conclusion after some meaty analysis, not
      a plan of what to analyze next, and it should be valuable for figuring out what
      is causing the issue (not thinking about solutions yet). It should also be very
      concrete, to-the-point, and specific. Every item in the chain of thought should
      read like a chain that clearly builds off of the previous step.\n\nIf you do
      write something, write it so that someone else could immediately understand
      your point in detail.\n\nNOTES TO ANALYZE:\nI''ll help investigate this issue
      by thinking through it step by step.\n\nLet me start by analyzing the exception:\n1.
      We''re seeing a ValidationError for RootCauseAnalysisItem\n2. Specifically,
      it''s complaining about \"unit_test.snippet\" being a required field that''s
      missing\n3. This is happening in models.py during the to_model() conversion\n\nFirst,
      let me ask our team a question to better understand the context:", "role": "user"}],
      "model": "gpt-4o-mini-2024-07-18", "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=e77b600d7fbc4f0c88f426887ec097aa,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1394'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - e77b600d7fbc4f0c88f426887ec097aa-89296acab2a48b48-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jFJNj9MwEL3nV4x8bqqk2267vQES2hNCYsUBFkWuPUkGHI9lTxCrVf87
        SvqRVIDExYf35j3Ne+PXDECRVXtQptViuuDyN537zG+/PPar4v3904eN7h6bl9CH8t3m4ye1GBR8
        +I5GLqql4S44FGJ/ok1ELTi4ltu7+3K32a7XI9GxRTfImiD5mvOOPOWrYrXOi21e7s7qlslgUnv4
        mgEAvI7vsKe3+EvtoVhckA5T0g2q/XUIQEV2A6J0SpREe1GLiTTsBf24+lOL0FFK5Bt4Vr0nqQST
        LJOnEFCeFdSEzgJ5S0YLJtAQeFCTdsA/MSZqWgHyYLVoCBGDjnqoAQ5Yc0QY84JhPw6zX85XiVj3
        SQ91+N65M368ZnPchMiHdOaveE2eUltF1In9kCMJBzWyxwzg29hhf1OLCpG7IJXwD/SD4Wp77lBN
        p5ux5ZkUFu1m+MOFuPGrLIoml2ZXUEabFu0knU6me0s8I7JZ6j+3+Zv3KTn55n/sJ8IYDIK2ChEt
        mdvE01jE4Wf/a+za8riwSi9JsKtq8g3GEOn0r+pQFVrv7B2uioPKjtlvAAAA//8DAC//J9RlAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdd8ae5f9b645d0-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 17:49:05 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=l5707vpQhI2ensuAt_KjNSF6V8i2GpOaMGChUJl.oOM-1736185745-1.0.1.1-yWZx6AOfvnMxf3ZTFxWonoWWPq41IrCms94oMns10wawRPUU8lQQdi9Md6qnRQSQIpLIqY1CYzKKpuAqA1TpgQ;
        path=/; expires=Mon, 06-Jan-25 18:19:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ucceMAcgP4WNZL8qOtZumq_SSgYQLOrDIH4BWtDs1Vw-1736185745162-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '581'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999663'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_91369235c6de91f5f67dca03b8e5da80
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nThe root cause of this is not
      clear and you must search the codebase for the hidden answer\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nInstructions have been provided. Please ensure that
      they are reflected in your work:\n\"The root cause of this is not clear and
      you must think it through. You MUST use the question asking tool and ask a question.\"\n\n\nWhen
      ready with your final answer, detail the potential root cause of the issue.\n\n#
      Guidelines:\n- The root cause should be inside its own <root_cause> block.\n-
      Include a title and description in the root cause. Your description may be as
      long as you need to help your team understand the issue, explaining the issue,
      the root cause, why this is happening, and how you came to your conclusion.\n-
      In the root cause, provide snippets of the original code, each with their own
      titles and descriptions, to highlight where and why the issue is occurring so
      that your colleagues fully understand the root cause. Provide as many snippets
      as you want. Within your snippets, you may highlight specific lines with a comment
      beginning with ***.\n- You MUST include the EXACT file name and repository name
      in the code snippets you provide. If you cannot, do not provide a code snippet.\n-
      At EVERY step of your investigation, you MUST think out loud! Share what you''re
      learning and thinking along the way, EVERY TIME YOU SPEAK.", "role": "user"},
      {"content": "I''ll help investigate this issue by thinking through it step by
      step.\n\nLet me start by analyzing the exception:\n1. We''re seeing a ValidationError
      for RootCauseAnalysisItem\n2. Specifically, it''s complaining about \"unit_test.snippet\"
      being a required field that''s missing\n3. This is happening in models.py during
      the to_model() conversion\n\nFirst, let me ask our team a question to better
      understand the context:", "role": "assistant"}, {"content": ".", "role": "user"},
      {"content": "Return the pieces of context from the issue details or the files
      in the codebase that are directly relevant to the text below:\nThe missing \"unit_test.snippet\"
      field indicates a potential oversight in data preparation before model conversion.\n\nThat
      means choose the most relevant codebase snippets (codebase_context), event logs
      (breadcrumb_context), or stacktrace/variable data (stacktrace_context), that
      show specifically what the text mentions. Don''t include any repeated information;
      just include what''s needed.\n\nAlso provide a one-line explanation of how the
      pieces of context directly explain the text.\n\nTo know what''s needed, reference
      these notes:\nI''ll help investigate this issue by thinking through it step
      by step.\n\nLet me start by analyzing the exception:\n1. We''re seeing a ValidationError
      for RootCauseAnalysisItem\n2. Specifically, it''s complaining about \"unit_test.snippet\"
      being a required field that''s missing\n3. This is happening in models.py during
      the to_model() conversion\n\nFirst, let me ask our team a question to better
      understand the context:", "role": "user"}], "model": "gpt-4o-mini-2024-07-18",
      "max_tokens": 4096, "response_format": {"type": "json_schema", "json_schema":
      {"schema": {"$defs": {"BreadcrumbContext": {"properties": {"type": {"title":
      "Type", "type": "string"}, "category": {"title": "Category", "type": "string"},
      "body": {"title": "Body", "type": "string"}, "level": {"title": "Level", "type":
      "string"}, "data_as_json": {"title": "Data As Json", "type": "string"}}, "required":
      ["type", "category", "body", "level", "data_as_json"], "title": "BreadcrumbContext",
      "type": "object", "additionalProperties": false}, "CodeSnippetContext": {"properties":
      {"repo_name": {"title": "Repo Name", "type": "string"}, "file_path": {"title":
      "File Path", "type": "string"}, "snippet": {"title": "Snippet", "type": "string"}},
      "required": ["repo_name", "file_path", "snippet"], "title": "CodeSnippetContext",
      "type": "object", "additionalProperties": false}, "StacktraceContext": {"properties":
      {"file_name": {"title": "File Name", "type": "string"}, "repo_name": {"title":
      "Repo Name", "type": "string"}, "function": {"title": "Function", "type": "string"},
      "line_no": {"title": "Line No", "type": "integer"}, "col_no": {"title": "Col
      No", "type": "integer"}, "code_snippet": {"title": "Code Snippet", "type": "string"},
      "vars_as_json": {"title": "Vars As Json", "type": "string"}}, "required": ["file_name",
      "repo_name", "function", "line_no", "col_no", "code_snippet", "vars_as_json"],
      "title": "StacktraceContext", "type": "object", "additionalProperties": false}},
      "properties": {"explanation": {"title": "Explanation", "type": "string"}, "codebase_context":
      {"items": {"$ref": "#/$defs/CodeSnippetContext"}, "title": "Codebase Context",
      "type": "array"}, "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"},
      "title": "Stacktrace Context", "type": "array"}, "event_log_context": {"items":
      {"$ref": "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type":
      "array"}}, "required": ["explanation", "codebase_context", "stacktrace_context",
      "event_log_context"], "title": "InsightContextOutput", "type": "object", "additionalProperties":
      false}, "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=e77b600d7fbc4f0c88f426887ec097aa,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '13506'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - e77b600d7fbc4f0c88f426887ec097aa-afd1d3ad281a1c9e-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//rFZNb9s4EL37VxDsIU7hz9j5WGMv3Wx2YaANik3bS1UINDWy2FIklzNK
        nRr+7wtSsi3XLoIF4oNMzLx5fEM+ebzuMMZVxmeMy0KQLJ3uvyn1J1dQOX+3+lflxafF1Y8/FtX3
        298m90XBe6HCLr6CpG3VQNrSaSBlTZ2WHgRBYB1fT67GN5fX08uYKG0GOpQtHfWntl8qo/oXo4tp
        f3TdH9801YVVEpDP2OcOY4yt4zPoNBms+IyNettICYhiCXy2AzHGvdUhwgWiQhKGeG+flNYQmCh9
        nRjGEg4rp4URQX3CZyzhHwpgudXafldmyWLBiphTIAFZoZaFVsuCGBXASoUYQGeVUZQSIA3QKOeA
        zliuQGdMmIwpQqZKp5WMuyDLKh+qIkM4kbDJI3hU1jDnrQTEQcJ7tT5pM1gIhLRREkR+DinG1vVX
        QHlwNjWihLqHJRCCIf80RADfcNXIXGlInaCiRqKXETMUFdkyCozLXK2G4V6tAUM49NZSKkWFMIyS
        ceCeDmibvmvSDHJGNo3ILoLOz2dJDfVAlTfsH2vpNrC9MUI/ocI5QTmI+PRRaJUJgi5jv/f77OHj
        w/u72w/s7fz+LtnuF3rfr8Pn9euwT0ORVaXrnvd+grxiSRJPytuskvHCk6A3FrbDqTJIvl7jaZbd
        hdcU3SPQKY2vdquzrU2a3Xd0aZPo1c2/mz88zO//Zn/N797+eZJtcxQ96HubPk94vdiEry+Nt5CE
        /EZeyGfcFT2zd9dLeeZ/mLYycv+Gbq11ANHKQGpsQIwno1ZCWr2NH0QzSA9M+yLWbF/5M5Z81kjH
        Jno5Ax2bp2WcEN4apo60Du5ReEwFpl9xex3rID2oqFsIz5OH+N7b0lF3MBicB8zm0JLRkabZKuHw
        CIZSbZcHzvySmE3759xDXqEII8VUWjfxzW4+aLt03i6wye/iuTIKi9SDQGvCLECyjsfsphNejzCH
        qoPRwl1Un5L9BiYQXlxfjWtCvp9/+/TkctJkyZLQrcR4PO2doEwzIKE0toYZl0IWkLX2nIymuyZE
        lSm7z406rd6PJZ2ir/tXZtli+SX9PiElOIIsdR4yJQ/b3sM8hP8Iv4LtzjoK5viEBGWaK7ME77yq
        J3Tu0pEQN9kELkYL3tl0/gMAAP//AwA9i+yTrwgAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fdd8aec581f45c0-BKK
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 17:49:11 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Ewz4DBTIbZZkXHdCYUXpIU0zzcXdWvrBU7x8qsQ71C4-1736185751-1.0.1.1-tUHMHNLV0JDspgjlPrSjctHhXxHd2phJXrXLYORyWCVkExCjaq9cqEejwVmB8dppx6jBe.8wN7UarM0k6sL0Fw;
        path=/; expires=Mon, 06-Jan-25 18:19:11 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=IJ5H8qpT2yZkt6_02PxGeiFAJCnoDlMxHrr34camClo-1736185751036-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '5374'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149993189'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 2ms
      x-request-id:
      - req_0fe329bd8209ee0d32422306ded19144
    status:
      code: 200
      message: OK
version: 1
