interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:03 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D28B:294ECB:3980357:3A958BF:677C41FB
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14995'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '5'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nValidationError:
      1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9013'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-a694a585e675ac42-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/3WRTU/DMAyG/wrKmaKsGxvlxpEPceKABCjKEq8NpHEUu4hp6n8nKV+bNG7paz9v
        X9s74ay4PBGm02z66KurHm+3d9umaz4ezm+ur9r7++HdpofrxSNFcXoicP0Khn+YM4OZAnYYStEk
        0AzFcbaaL2fNcikXWe7Rgi9IG7laYNW74Kpa1otKrqrZxUR26AxQbnraCRcsfOSnLCwQ6Rby104k
        9OUhNJEj1oEnEgNDmBLtnoUjlRBZGT0QKONBp2dxyWmAsTQn2AykS5YweD9mxWMbE67pW8rKJqej
        TuVRKE+VbYkxivEll4bfKJnpIyvGNwiFnTW1nML8rGOvVAqMrP1++7yoBy7KAmvnafI32nRg94BV
        U2dAD9bhnyrHY/88MPoaw4V2jzpiVCRjIObrqZjAOnM4hJyWV07/X8NYstCWGHqVV9hCisl93WUT
        ldT6ws6hlmsxfgLJjk1ndQIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde94068ef77c35-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:04 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Ulzq2MzPOck8A02SshP5ntNZoG09ShEQmETBK4O8mb4-1736196604-1.0.1.1-57DxSE_zvR8pEf6Qh.fOiVKxoEj3qwGOpYS2yR5WdPFQjI1Ad.TNLmKfveZvLxD_Zu7nUPvEGPZ3yh1rO3wf1A;
        path=/; expires=Mon, 06-Jan-25 21:20:04 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=qzGGThHbAg3cuB8g70KTRI.4lyp3fyNPSRjev0pCk6k-1736196604230-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '193'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997907'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2a28878beebb55a2a9ab8e274aee52a6
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/4WPMQ7CMAxFrxJlhmRADO1lqshxW4u0DrFLQYi7k8LCgNTV/k9672kDAIp0yhec
        bWtswRhAMdqDsXjPVFA62j6nc9PUmwBn3IajapbW+3Vd3cA8JAyZxAFPPiw6eki8xGNOQXsuk6nU
        TNHsUYtgoblnh1OgtDuXa6rAjQBd4qF6VsNPSqePr+ZvD8U/na83m/cHygQBAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:06 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK."}]}], "stream": true, "system": "You are an exceptional principal
      engineer that is amazing at finding the root cause of any issue.\n\n\n\n# Guidelines:\n-
      Don''t always assume data being passed is correct, it could be incorrect! Sometimes
      the API request is malformed, or there is a bug on the client/server side that
      is causing the issue.\n\n\n\n- If you are not able to find any potential root
      causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20 word reason
      for why.\n\n- At EVERY step of your investigation, you MUST think out loud!
      Share what you''re learning and thinking along the way, EVERY TIME YOU SPEAK.\n\nIt
      is important that we find the potential root causes of the issue.", "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '10229'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-8e0abc3d377f0776-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        AAAAAP//ovOWpTzIrCgwOBAL+QAAAAD//6KvE7BVWCghAgAAAP//onM6iVEqzQOdRAi0GQAAAP//
        onNqQL4cC2g7AAAA//8auMwJth4AAAD//6JzsGugNKABAAAA//8a2CIaBKphDVgAAAAA//+it1Og
        o1AQywEAAAD//6L/RIaRngLqGcrIaQIAAAD//6JzmgiAnGGMuZUMAAAA//+isztgExrI0wno805A
        VwEAAAD//6Kzq+BTC/pooQMAAAD//6L/kDpkjB+RbAEAAAD//6L3LAtobgF5eAIAAAD//6Kv/ahz
        CvrofR4AAAAA//+i925oyHwCYmgf0ugFAAAA//+i87QGruMCgC4BAAAA//+is0uSMUozoBsAAAAA
        //+i8zQtYnYBaDcAAAD//xqYyQXMdhUAAAD//6JzceUILMjToZvLAAAAAP//GoidTCkoN+cAAAAA
        //+i/wr0JPjxVgAAAAD//xrgjdBAFwAAAAD//6KzC/JKc1OLMpPBN0MAbQcAAAD//xqI9cqpoHVV
        yEEBdAcAAAD//6L3mBioNMR6rx0AAAD//6L7ulws/U4AAAAA//+i94hMUWpOalkiShsT6AoAAAAA
        //+i+zBlCmSpHwAAAP//GoC9cyAmZjQAAAAA//+id4NfCzpSD7EdAAAA//8aiBwBKxUBAAAA//+i
        c2cb88w9oBsAAAAA//+is/9tcV5GAXIMAAAA//+ic46Mh91GoVeQWISIFgAAAAD//6KzK9DulwMA
        AAD//xqAlSjg8gAAAAD//6Jz+xA6HAsAAAD//6KvrYhTL4FWAwAAAP//Gojch3InDNANAAAAAP//
        onPuAw01Am0FAAAA//8agEWSxQqgA3nhV4giQgAAAAD//6J/NVSWWgTfegJ0AAAAAP//GphdMKBJ
        fZQzFwEAAAD//6J3LYjI+AAAAAD//xqIfKCXiTaAAwAAAP//ondbzFYBzQEAAAAA//+irwMMEIOe
        QLsBAAAA//8aiE2V0FlJAAAAAP//onPqR5zxiNgiDXQFAAAA//8aiK6pAuJ8jUSsZ9cBAAAA//8a
        JJs6gS4BAAAA//8a+D2dIFcAAAAA//8aoC4b0GYAAAAA//8akM2TcNsBAAAA//+is7/LUM8wBAAA
        AP//oncGhawwy4WOosIjHwAAAP//GoDWIdheAAAAAP//orP3Q/IV0jIroG1TAAAAAP//onu2yyzW
        UUjNhF5lggh7AAAAAP//ovPUAjjZAQAAAP//oneVZIi0DB4AAAD//6JzuIcWgBacIpV6aIfjw5wF
        AAAA//+i+xheck5pCureYAAAAAD//6L/xlSM4ztQd7ajBBAAAAD//6J3MZ1UiXJBGcgJAAAAAP//
        Gvg9m0BHAAAAAP//GlTbNQEAAAD//6J3RjbSU/BNzEY7GRoAAAD//xrg4X+QEwAAAAD//6J/aw55
        Eh/oAAAAAAD//6L3+nHozuoC6DE8mXloUwEAAAAA//+i96YOeJUOAAAA//8auDwKtBwAAAD//xok
        eRPoEgAAAAD//xqIfdQxecZ6aIUVAAAA//+i//oWpGsOkNwBAAAA//+isztSUtMSS3NKoBd9ggal
        sZ+eDAAAAP//GphiA+VMBgAAAAD//xqgMxlwHkoFAAAA//8aBIU5AAAA//8akEFD0JlYsDvmY/Js
        9JHKUgAAAAD//6Lzqmb4QhM7RKMZAAAA///C6oTikvwC/C4AqUByAMw0AAAAAP//gpqWC/RqYnoq
        dq+gSCohOR1kZnxRamIxsAtrpZSalxIP3kuoA5EoBibt1LxkoAl5pTk5tTpKpSBTQPryS0sKSkvi
        S/KzU/OKlazMLczR4x0AAAD//0JzFjbvIcspYaRdAAAAAP//AwDvKmP85aoAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:07 GMT
      request-id:
      - req_vrtx_019QNvpxa3NXik4RNY5h9uHx
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.", "role": "user"}, {"content": "Let me analyze this step by
      step:\n\n1. First, I notice there''s a ValidationError for a RootCauseAnalysisItem
      model. Let me trace through what''s happening...\n\n2. Looking at the error
      message, it indicates a required field is missing:\n```\nField required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n```\n\n3.
      The error occurs in the to_model() method in src/seer/automation/autofix/components/root_cause/models.py
      when trying to validate a RootCauseAnalysisItem.\n\n4. Following the call stack:\n-
      It starts in root_cause_step.py which invokes the RootCauseAnalysisComponent\n-
      This component processes the response and calls to_model() on the formatted
      response\n- During validation, it fails because a required field is missing\n\n5.
      Looking at the variable values, I can see the RootCauseAnalysisItemPrompt has
      a title and description, but seems to be missing other required fields in the
      model.\n\n6. The key insight is that there''s a mismatch between the data being
      passed to model_validate() and what the RootCauseAnalysisItem model requires.\n\nLet
      me provide a detailed root cause:\n\n<root_cause>\nTitle: Missing Required Field
      in RootCauseAnalysisItem Model Validation\n\nDescription: \nThe issue occurs
      during the conversion of a RootCauseAnalysisItemPrompt to a RootCauseAnalysisItem
      model. The validation is failing because a required field is missing in the
      input data structure. While the prompt contains ''title'' and ''description'',
      the RootCauseAnalysisItem model appears to have additional required fields that
      aren''t being provided during the conversion.\n\nThis indicates a contract mismatch
      between the prompt structure and the expected model structure. The prompt is
      generating or providing incomplete data that doesn''t satisfy all the required
      fields of the RootCauseAnalysisItem model.\n\nCode Snippets:\n\n1. Validation
      Failure Location\nRepository: getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/models.py\n```python\ndef
      to_model(self):\n    *** return RootCauseAnalysisItem.model_validate(  # This
      fails due to missing required fields\n        {\n            **self.model_dump(),\n            #
      commented out code shows some expected fields:\n            # \"reproduction\":
      self.reproduction_instructions,\n            # \"unit_test\": (\n            #     {\n```\n\n2.
      Component Processing Location\nRepository: getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/component.py\n```python\n#
      Assign the ids to be the numerical indices of the causes and relevant code context\n***
      cause_model = formatted_response.parsed.cause.to_model()  # Fails here when
      converting prompt to model\ncause_model.id = 0\n```\n\nThe root cause appears
      to be a structural mismatch between the prompt and model validation requirements.
      To fix this, either:\n1. Update the prompt to include all required fields expected
      by RootCauseAnalysisItem\n2. Make the missing fields optional in the RootCauseAnalysisItem
      model\n3. Provide default values for the missing required fields during the
      conversion process\n</root_cause>", "role": "assistant"}, {"content": "Please
      format the output properly.\n\nNote: If the provided root cause analysis is
      not formatted properly, such as code snippets missing descriptions, you can
      derive them from the provided root cause analysis.\n\nReturn only the formatted
      root cause analysis:", "role": "user"}], "model": "gpt-4o-2024-08-06", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"$defs": {"RootCauseAnalysisItemPrompt":
      {"properties": {"title": {"title": "Title", "type": "string"}, "description":
      {"title": "Description", "type": "string"}, "relevant_code": {"anyOf": [{"$ref":
      "#/$defs/RootCauseAnalysisRelevantContext"}, {"type": "null"}]}}, "required":
      ["title", "description", "relevant_code"], "title": "RootCauseAnalysisItemPrompt",
      "type": "object", "additionalProperties": false}, "RootCauseAnalysisRelevantContext":
      {"properties": {"snippets": {"items": {"$ref": "#/$defs/RootCauseRelevantContext"},
      "title": "Snippets", "type": "array"}}, "required": ["snippets"], "title": "RootCauseAnalysisRelevantContext",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantCodeSnippet":
      {"properties": {"file_path": {"title": "File Path", "type": "string"}, "repo_name":
      {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Name"}, "snippet":
      {"title": "Snippet", "type": "string"}, "start_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "Start Line"}, "end_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "End Line"}}, "required": ["file_path", "repo_name",
      "snippet", "start_line", "end_line"], "title": "RootCauseRelevantCodeSnippet",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantContext":
      {"properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title":
      "Title", "type": "string"}, "description": {"title": "Description", "type":
      "string"}, "snippet": {"anyOf": [{"$ref": "#/$defs/RootCauseRelevantCodeSnippet"},
      {"type": "null"}]}}, "required": ["id", "title", "description", "snippet"],
      "title": "RootCauseRelevantContext", "type": "object", "additionalProperties":
      false}}, "properties": {"cause": {"$ref": "#/$defs/RootCauseAnalysisItemPrompt"}},
      "required": ["cause"], "title": "MultipleRootCauseAnalysisOutputPrompt", "type":
      "object", "additionalProperties": false}, "name": "MultipleRootCauseAnalysisOutputPrompt",
      "strict": true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '15008'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-9c52368f651b1851-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde947fa982293a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:35 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=tF4t8QSySZLoiJdbk_dc3x7VJopxVPUWbZ30zMpOLXo-1736196635-1.0.1.1-M7bruecyFj1cucWOgzb7Ytpy.BE01LT8jARvZSQKeK2cd27LDPgqD79mfyUo5IGtlhiTHCnYnJoCNHC_Sxuwng;
        path=/; expires=Mon, 06-Jan-25 21:20:35 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=UhHvUuByY8V4sl84xU9FCgSW3KNE8BdiTIgkFgLUhHM-1736196635453-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '11974'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29996869'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 6ms
      x-request-id:
      - req_ed85f42573420ec0e02d2fe91d9f8c01
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:35 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69A6E:3C7FACC:677C421B
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14994'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '6'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/component.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:36 GMT
      ETag:
      - W/"bc4fdd21e9771f693ce0bd51e896b02cc812d908"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69C49:3C7FCA2:677C421B
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14993'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '7'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:36 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69E25:3C7FEA1:677C421C
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14992'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '8'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/4WPMQ7CMAxFrxJlhmRADO1lqshxW4u0DrFLQYi7k8LCgNTV/l//vacNACjSKV9w
        tq2xBWMAxWgPxuI9U0HpaPuczk1TbwKccQuOqlla79d1dQPzkDBkEgc8+bDo6BfBQnPPDqdAyezF
        IfESjzkF7blMpo7MFHdbck115kaALvFQOSvhR6XTxxfz14fiH8/XGwiM6e4EAQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:39 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}], "stream":
      true, "system": "You are an exceptional principal engineer that is amazing at
      finding and fixing issues in codebases.\n\nYou have access to tools that allow
      you to search a codebase to find the relevant code snippets and view relevant
      files. You can use these tools as many times as you want to find the relevant
      code snippets.\n\n# Guidelines:\n- EVERY TIME before you use a tool, think step-by-step
      each time before using the tools provided to you.\n- You also MUST think step-by-step
      before giving the final answer.", "tools": [{"name": "list_directory", "description":
      "Given the path for a directory in this codebase, returns the immediate contents
      of the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '13861'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-b3718f4dab60ee26-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        QnMUNn8hyykh6wUAAAD//wMA3wd9pIAeAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:40 GMT
      request-id:
      - req_vrtx_01UTStTKbBbpdK9FH5RTd9dH
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:44 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B6BFA8:3C82098:677C421C
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14991'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '9'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/4WPPQ7CMAyFrxJlhmRADO1lqshxW4s0DrFLQYi708LCgNT1/ei972kDAIp0yhfM
        tjW2YgygGO3BWLwXqigdbc7p3DSrJsAFt+CoWqT1flkWNzAPCUMhccCTD7OOHhLP8VhS0J7rZPbi
        ck2C9UaALvFA2awzmeJub15blHt2OAVK2+sPSqeP781fHop/OF9vBp0DHQQBAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:44 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for coming
      up with a fix for the issue:\nnot started yet\n\nWrite the next under-20-word
      conclusion in the chain of thought based on the notes below.  The criteria for
      a good conclusion are that it should be a large, novel jump in insights, not
      similar to any item in the existing chain of thought, it should be a complete
      conclusion after some meaty analysis, not a plan of what to analyze next, and
      it should be valuable for coming up with a fix for the issue. It should also
      be very concrete, to-the-point, and specific. Every item in the chain of thought
      should read like a chain that clearly builds off of the previous step.\n\nIf
      you do write something, write it so that someone else could immediately understand
      your point in detail.\n\nNOTES TO ANALYZE:\nLet me think about this step by
      step.\n\n1) First, I need to understand the error:\n- It''s a ValidationError
      for RootCauseAnalysisItem\n- The error mentions that the \"unit_test.snippet\"
      field is required\n- The error occurs in the to_model() method in models.py\n-
      The issue suggests uncommenting the unit test parts\n\n2) Let''s look at the
      relevant code first. I need to check the models.py file:", "role": "user"}],
      "model": "gpt-4o-mini-2024-07-18", "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1297'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-9f288885dd47efe3-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/31S0U7cMBD8FcvPzSl3nO6gb0g8UFpEVaFKVUGRz94kpo7XeDeo1Sn/3nUo9E4q
        fXNmdyYzY++1d/q90rY3bIcUqvMBP9mry8sLireP9ZX5+OH64enG8rf0+esX/U5p3D2A5RfOwqKw
        gD3GMrQZDENRXG5PNsuzzWa9FnhAB6FQusTVGqvBR1+t6tW6qrfV8nRm9ugtkCx932sfHfyUY124
        QGQ6kK+9zhjKQRsiT2wiz0yMDHF2dNuDGrwMY6fu9Bg9NwzEC4o+JeA7rVoPwSnR91aMkjIqAjjF
        qCDSmEGZEFSGx9FngedtWRI8YRpDyaZ20KIAcyb1ZIJ3psRfFC8Z2pFMiRrHECZBAnYp447+QIK0
        Ep76RpoiKU1cE2PS072MxtekwhmSuMcf4kuQ1WY7R30p+2BSCmZkEw6ws6WARxqNAzY+0Kxuje3B
        /d0vPZvReTyApn/970jlOYF0/X+hAlkLSbprkrTq7XGAeu6tPKq3FqbihX4Rw9BIex3klP3zjbep
        qY05dSewqnd6+g0CR5EyzwIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde95039a450ffc-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:45 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=HPEQHDUNTtzKHU9Os.X3.EHWjQZ3fnZwSqR6uoPFVlc-1736196645-1.0.1.1-ss3I7WN6IkO50RRkOiwzB9acoNnjek3k9de2na2mgUt3lhlzQeoOdtoySypk43RS5aEim0LkQD8r6o8h4RpbqA;
        path=/; expires=Mon, 06-Jan-25 21:20:45 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=V517DjeIPPH6ISVRyo.EYSPBsLT.Dqx730LsXAf8CHA-1736196645116-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '597'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999688'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_fa6addc07c55c3536065df203efd6f95
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer.", "role": "user"},
      {"content": "Let me think about this step by step.\n\n1) First, I need to understand
      the error:\n- It''s a ValidationError for RootCauseAnalysisItem\n- The error
      mentions that the \"unit_test.snippet\" field is required\n- The error occurs
      in the to_model() method in models.py\n- The issue suggests uncommenting the
      unit test parts\n\n2) Let''s look at the relevant code first. I need to check
      the models.py file:", "role": "assistant"}, {"content": "from typing import
      Annotated, Optional\n\nfrom pydantic import BaseModel, StringConstraints, field_validator\nfrom
      pydantic_xml import attr\n\nfrom seer.automation.agent.models import Message\nfrom
      seer.automation.autofix.utils import remove_code_backticks\nfrom seer.automation.component
      import BaseComponentOutput, BaseComponentRequest\nfrom seer.automation.models
      import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue import
      IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "role":
      "user"}, {"content": "Return the pieces of context from the issue details or
      the files in the codebase that are directly relevant to the text below:\nThe
      missing \"unit_test.snippet\" field indicates a need to ensure all required
      fields are populated before model validation.\n\nThat means choose the most
      relevant codebase snippets (codebase_context), event logs (breadcrumb_context),
      or stacktrace/variable data (stacktrace_context), that show specifically what
      the text mentions. Don''t include any repeated information; just include what''s
      needed.\n\nAlso provide a one-line explanation of how the pieces of context
      directly explain the text.\n\nTo know what''s needed, reference these notes:\nLet
      me think about this step by step.\n\n1) First, I need to understand the error:\n-
      It''s a ValidationError for RootCauseAnalysisItem\n- The error mentions that
      the \"unit_test.snippet\" field is required\n- The error occurs in the to_model()
      method in models.py\n- The issue suggests uncommenting the unit test parts\n\n2)
      Let''s look at the relevant code first. I need to check the models.py file:",
      "role": "user"}], "model": "gpt-4o-mini-2024-07-18", "max_tokens": 4096, "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"$defs": {"BreadcrumbContext":
      {"properties": {"type": {"title": "Type", "type": "string"}, "category": {"title":
      "Category", "type": "string"}, "body": {"title": "Body", "type": "string"},
      "level": {"title": "Level", "type": "string"}, "data_as_json": {"title": "Data
      As Json", "type": "string"}}, "required": ["type", "category", "body", "level",
      "data_as_json"], "title": "BreadcrumbContext", "type": "object", "additionalProperties":
      false}, "CodeSnippetContext": {"properties": {"repo_name": {"title": "Repo Name",
      "type": "string"}, "file_path": {"title": "File Path", "type": "string"}, "snippet":
      {"title": "Snippet", "type": "string"}}, "required": ["repo_name", "file_path",
      "snippet"], "title": "CodeSnippetContext", "type": "object", "additionalProperties":
      false}, "StacktraceContext": {"properties": {"file_name": {"title": "File Name",
      "type": "string"}, "repo_name": {"title": "Repo Name", "type": "string"}, "function":
      {"title": "Function", "type": "string"}, "line_no": {"title": "Line No", "type":
      "integer"}, "col_no": {"title": "Col No", "type": "integer"}, "code_snippet":
      {"title": "Code Snippet", "type": "string"}, "vars_as_json": {"title": "Vars
      As Json", "type": "string"}}, "required": ["file_name", "repo_name", "function",
      "line_no", "col_no", "code_snippet", "vars_as_json"], "title": "StacktraceContext",
      "type": "object", "additionalProperties": false}}, "properties": {"explanation":
      {"title": "Explanation", "type": "string"}, "codebase_context": {"items": {"$ref":
      "#/$defs/CodeSnippetContext"}, "title": "Codebase Context", "type": "array"},
      "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"}, "title":
      "Stacktrace Context", "type": "array"}, "event_log_context": {"items": {"$ref":
      "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type": "array"}},
      "required": ["explanation", "codebase_context", "stacktrace_context", "event_log_context"],
      "title": "InsightContextOutput", "type": "object", "additionalProperties": false},
      "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19545'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-b04be3808419c360-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/81W227bOBD9FUJ5iF34bq/TGNiHbp4WaLtFL0CBKBAYamQxoUiBpFxnvfr3HVI3
        K1VT9K0GZFEzZw7nJo5OAY+DHQlYSi3LcjF9k6m38SMz2dvNzfHfd5+2D++TbP/t680K2NdgQgJ1
        /wDMNjYzptAKLFfSKZkGasExLq/W2+X1drv5A8WZikE4k31upxs1zbjk09VitZkurqbL194yVZyB
        QdDtKeAyhiMuF84WjKF7wKdToJVwi4Aaw42l0npLJS1I79EplISEARxzQSV1ToUoDoPPKZBcqwOP
        ISYef7Qk5ftU4GUNsajPOJLKPbksJLeRBWNnRvI8B3tJEg4iJlx64Eel7A0tDLyRVDyhI39byIgP
        cUK+pZylhBvCdME4FSRRmpiCYWgmKUQFIwcqeOz9m4XBpHKaoeaeGohq/5znt05FyKm6OZSGXEWS
        ZlAFtgdrMHb9NDcAuuaqkAkXEOXUphXSaOYxc1pYlfm9/TLhx7mroZLIY+Yag4uYi27uXTWz/KlH
        W+ekImUCKzGckNFfGMs7RzHehZU5j3eYQ0v+JNNlLbLcCtgRY3UtiMEwzXPn3rn4grRV2ZEvuPyM
        q0+VK+Q/8h69R1p3qw1cNptM7sg/npCKW4Ftc9v6+xEEHLCLbirc3V3DEVQk5eQ3z38MCbEq8siR
        AZG0udZgCy2HSzPz+KhuQhiFDbuLtFu736tXjrU2iIssH40nzyAXJAzDoC2Pe9iR0XegIfaLduWs
        uoR5Cr9x9y622smLJE16hih8T9SAl1nOunCQ6Uw/TFQOSnnyjGgQhUWH81butL3cN1uM2251t7v6
        NMHTkT1aTdlPzhOf1q6fh3vuF5q+kKw7dpvW7EEEl7ijcojlenGmYErU8r60K1rF+iut3XTcC338
        0/69ILPZrE12KMtxL54D1SaiJnowTdgn34i4X8Xl/ged/aDxvbcjZB87TNkvpK8jXnVB4YApj4Ta
        9+qJqNLNQA1JYagbsbIQokQJInHi3ZtahJIEh65JI5zQ6KmblsaqPCjvUFW0Ezb3PkVWPYJ0tuvr
        7ZWfsc2U71SblRvtVlkqzoTr6xVKezRRDJZyYfwGjLIU4s7AjXhaxFydicqhHXssVRA4rl8mciIc
        vTl+kkS5hpizfggLnzr3PfMjQOl8MU8GyxVhAvegc82rj40kjxaUvo7XsFrcB+X/Omumc0oJAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde95090af57c7a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:49 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=ol64f38Zsin29_5NZS5.lzEikAco_HEEvPt.jvgMMEo-1736196649-1.0.1.1-MEJWWXmfzDvjDdWCjFFJyMVJ1sfHstuUIoHrcTkXxK2xyJNLQoRbC4CT6oJ.OgcSTIUCjuHytLmmhmImfyA0_w;
        path=/; expires=Mon, 06-Jan-25 21:20:49 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=o6UCo3lz7dF0szu1jbZLFTqzOekjM07KJ83z7j9coek-1736196649542-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '4122'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149991828'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_38dbc2163d67ebe3dfd35eafbc986420
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC"}]}], "stream": true, "system": "You are
      an exceptional principal engineer that is amazing at finding and fixing issues
      in codebases.\n\nYou have access to tools that allow you to search a codebase
      to find the relevant code snippets and view relevant files. You can use these
      tools as many times as you want to find the relevant code snippets.\n\n# Guidelines:\n-
      EVERY TIME before you use a tool, think step-by-step each time before using
      the tools provided to you.\n- You also MUST think step-by-step before giving
      the final answer.", "tools": [{"name": "list_directory", "description": "Given
      the path for a directory in this codebase, returns the immediate contents of
      the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19894'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-84d2fbb28677f26d-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:45 GMT
      request-id:
      - req_vrtx_01FZsaaBCGds8k5jftEsx25s
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/4WPMQ7CMAxFr1JlhmRADO1lqshxW4s0DrFLQIi708LCgNTpS/7P0n9P4wFQpFe+
        YDJdYwoGD4rBHBqD90wFpaetOZ3bdr0JcMYNXCNRaCbVLJ1ztVY7Mo8RfSaxwLPzi04OIi/hmKPX
        gcu8i8s1CpYbAdrII6Xdh2XFKQ1scfYUt9UflV4f35m/PhT+eL7eGykK9wQBAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:06 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC"}]}, {"role": "assistant", "content": [{"type":
      "text", "text": "\n\nLet me think through this step by step:\n\n1. First, analyzing
      the error message:\n   - The error is a ValidationError for RootCauseAnalysisItem\n   -
      Specifically, it''s complaining about a missing field in unit_test.snippet\n   -
      Looking at the stack trace, it''s happening in the to_model() method\n\n2. Looking
      at the code:\n   - The file models.py has commented out sections related to
      unit_test\n   - The issue matches with the user''s instruction that \"we should
      uncomment out the unit test parts\"\n   - There are three main sections that
      are commented out:\n     - In RootCauseAnalysisItem class: unit_test and reproduction
      fields\n     - In RootCauseAnalysisItemPrompt class: reproduction_instructions
      and unit_test fields\n     - In the to_model() method: the unit_test mapping
      section\n\n3. The fix:\n   - We need to uncomment all the unit test related
      code\n   - We also need to uncomment the reproduction related code since they''re
      part of the same data structure\n\nHere''s the detailed fix plan:\n\n1. In `src/seer/automation/autofix/components/root_cause/models.py`,
      we need to make the following changes:\n\n```diff\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n-   # unit_test: UnitTestSnippet
      | None = None\n-   # reproduction: str | None = None\n+   unit_test: UnitTestSnippet
      | None = None\n+   reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n```\n\n```diff\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n-   # reproduction_instructions: str | None = None\n-   #
      unit_test: UnitTestSnippetPrompt | None = None\n+   reproduction_instructions:
      str | None = None\n+   unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code:
      Optional[RootCauseAnalysisRelevantContext]\n```\n\n```diff\n    def to_model(self):\n        return
      RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n-               #
      \"reproduction\": self.reproduction_instructions,\n-               # \"unit_test\":
      (\n-               #     {\n-               #         \"file_path\": self.unit_test.file_path,\n-               #         \"snippet\":
      self.unit_test.code_snippet,\n-               #         \"description\": self.unit_test.description,\n-               #     }\n-               #     if
      self.unit_test\n-               #     else None\n-               # ),\n+               \"reproduction\":
      self.reproduction_instructions,\n+               \"unit_test\": (\n+                   {\n+                       \"file_path\":
      self.unit_test.file_path,\n+                       \"snippet\": self.unit_test.code_snippet,\n+                       \"description\":
      self.unit_test.description,\n+                   }\n+                   if self.unit_test\n+                   else
      None\n+               ),\n                \"code_context\": (\n                    self.relevant_code.model_dump()[\"snippets\"]
      if self.relevant_code else None\n                ),\n            }\n        )\n```\n\nAlso
      in `from_model` method:\n```diff\n    @classmethod\n    def from_model(cls,
      model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n-           #
      reproduction_instructions=model.reproduction,\n-           # unit_test=(\n-           #     UnitTestSnippetPrompt(\n-           #         file_path=model.unit_test.file_path,\n-           #         code_snippet=model.unit_test.snippet,\n-           #         description=model.unit_test.description,\n-           #     )\n-           #     if
      model.unit_test\n-           #     else None\n-           # ),\n+           reproduction_instructions=model.reproduction,\n+           unit_test=(\n+               UnitTestSnippetPrompt(\n+                   file_path=model.unit_test.file_path,\n+                   code_snippet=model.unit_test.snippet,\n+                   description=model.unit_test.description,\n+               )\n+               if
      model.unit_test\n+               else None\n+           ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n```\n\nThis
      fix:\n1. Uncomments and enables the unit_test field in RootCauseAnalysisItem\n2.
      Uncomments and enables the unit_test and reproduction_instructions fields in
      RootCauseAnalysisItemPrompt\n3. Uncomments and enables the unit_test mapping
      in the to_model method\n4. Uncomments and enables the unit_test mapping in the
      from_model method\n5. Also handles the related reproduction fields since they''re
      part of the same data structure\n\nThe fix handles both the validation error
      by enabling the required fields and follows the user''s instruction to uncomment
      the unit test parts. This should allow the validation to proceed correctly when
      unit test information is provided."}]}, {"role": "user", "content": [{"type":
      "text", "text": "Break down the task of fixing the issue into steps. Your list
      of steps should be detailed enough so that following it exactly will lead to
      a fully complete solution.\n\nEnclose this plan between <plan_steps> and </plan_steps>
      tags. Make sure to strictly follow this format and include all necessary details
      within the tags. Your output must follow the format properly according to the
      following guidelines:\n\n<plan_steps>\n<step file_path=\"path/to/file.py\" repo_name=\"owner/repo\"
      type=\"Either ''file_change'', ''file_create'', or ''file_delete''\">\n<diff>\n#
      Here provide the EXACT unified diff of the code change required to accomplish
      this step.\n# You must prefix lines that are removed with a ''-'' and lines
      that are added with a ''+''. Context lines around the change are required and
      must be prefixed with a space.\n# Make sure the diff is complete and the code
      is EXACTLY matching the files you see.\n# For example:\n--- a/path/to/file.py\n+++
      b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return ''fab''\n    y = 2\n    x = 1\n-def
      foo():\n+def foo():\n    return ''foo''\n    def bar():\n    return ''bar''\n</diff>\n<description>\nDescribe
      what you are doing here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n<step
      file_path=\"path/to/file.py\" repo_name=\"owner/repo\" type=\"Either ''file_change'',
      ''file_create'', or ''file_delete''\">\n<diff>\n# Here provide the EXACT unified
      diff of the code change required to accomplish this step.\n# You must prefix
      lines that are removed with a ''-'' and lines that are added with a ''+''. Context
      lines around the change are required and must be prefixed with a space.\n# Make
      sure the diff is complete and the code is EXACTLY matching the files you see.\n#
      For example:\n--- a/path/to/file.py\n+++ b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return
      ''fab''\n    y = 2\n    x = 1\n-def foo():\n+def foo():\n    return ''foo''\n    def
      bar():\n    return ''bar''\n</diff>\n<description>\nDescribe what you are doing
      here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n</plan_steps>\n\n#
      Guidelines:\n- Each file change must be a separate step and be explicit and
      clear.\n  - You MUST include exact file paths for each step you provide. If
      you cannot, find the correct path.\n- No placeholders are allowed, the steps
      must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting the
      steps.\n- The plan must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- Make sure any new files you create don''t
      already exist, if they do, modify the existing file.\n- EVERY TIME before you
      use a tool, think step-by-step each time before using the tools provided to
      you.\n- You also MUST think step-by-step before giving the final answer."}]}],
      "stream": true, "tools": [{"name": "list_directory", "description": "Given the
      path for a directory in this codebase, returns the immediate contents of the
      directory such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '27435'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-a0bd52daec1e0790-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        QnMTNh8iyymB9AAAAAD//wMAW4jo23bjAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:51:07 GMT
      request-id:
      - req_vrtx_01UodGf937aqziGMRWiM6HWB
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:28 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DBDE0:3AF0E13:677C4250
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14990'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '10'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:28 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DBF9D:3AF1008:677C4250
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14989'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '11'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:29 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DC198:3AF11F6:677C4251
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14988'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '12'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Describe the following changes:\n\n--- src/seer/automation/autofix/components/root_cause/models.py\n+++
      src/seer/automation/autofix/components/root_cause/models.py\n@@ -64,8 +64,8
      @@\n     id: int = -1\n     title: str\n     description: str\n-    # unit_test:
      UnitTestSnippet | None = None\n-    # reproduction: str | None = None\n+    unit_test:
      UnitTestSnippet | None = None\n+    reproduction: str | None = None\n     code_context:
      Optional[list[RootCauseRelevantContext]] = None\n \n     def to_markdown_string(self)
      -> str:\n@@ -91,8 +91,8 @@\n class RootCauseAnalysisItemPrompt(BaseModel):\n     title:
      str\n     description: str\n-    # reproduction_instructions: str | None = None\n-    #
      unit_test: UnitTestSnippetPrompt | None = None\n+    reproduction_instructions:
      str | None = None\n+    unit_test: UnitTestSnippetPrompt | None = None\n     relevant_code:
      Optional[RootCauseAnalysisRelevantContext]\n \n     @classmethod\n@@ -100,16
      +100,16 @@\n         return cls(\n             title=model.title,\n             description=model.description,\n-            #
      reproduction_instructions=model.reproduction,\n-            # unit_test=(\n-            #     UnitTestSnippetPrompt(\n-            #         file_path=model.unit_test.file_path,\n-            #         code_snippet=model.unit_test.snippet,\n-            #         description=model.unit_test.description,\n-            #     )\n-            #     if
      model.unit_test\n-            #     else None\n-            # ),\n+            reproduction_instructions=model.reproduction,\n+            unit_test=(\n+                UnitTestSnippetPrompt(\n+                    file_path=model.unit_test.file_path,\n+                    code_snippet=model.unit_test.snippet,\n+                    description=model.unit_test.description,\n+                )\n+                if
      model.unit_test\n+                else None\n+            ),\n             relevant_code=(\n                 RootCauseAnalysisRelevantContext(\n                     snippets=[\n@@
      -131,16 +131,16 @@\n         return RootCauseAnalysisItem.model_validate(\n             {\n                 **self.model_dump(),\n-                #
      \"reproduction\": self.reproduction_instructions,\n-                # \"unit_test\":
      (\n-                #     {\n-                #         \"file_path\": self.unit_test.file_path,\n-                #         \"snippet\":
      self.unit_test.code_snippet,\n-                #         \"description\": self.unit_test.description,\n-                #     }\n-                #     if
      self.unit_test\n-                #     else None\n-                # ),\n+                \"reproduction\":
      self.reproduction_instructions,\n+                \"unit_test\": (\n+                    {\n+                        \"file_path\":
      self.unit_test.file_path,\n+                        \"snippet\": self.unit_test.code_snippet,\n+                        \"description\":
      self.unit_test.description,\n+                    }\n+                    if
      self.unit_test\n+                    else None\n+                ),\n                 \"code_context\":
      (\n                     self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                 ),\n\nIn the style of:\nDescribe the code changes
      in the following branch for a pull request.\n\nYou must output a title and description
      of the changes in the JSON, follow the format of:\n{\n    \"title\": \"Title
      of the change\",\n    \"description\": \"Description of the change\"\n}", "role":
      "user"}], "model": "gpt-4o-mini", "response_format": {"type": "json_schema",
      "json_schema": {"schema": {"properties": {"title": {"title": "Title", "type":
      "string"}, "description": {"title": "Description", "type": "string"}}, "required":
      ["title", "description"], "title": "ChangeDescriptionOutput", "type": "object",
      "additionalProperties": false}, "name": "ChangeDescriptionOutput", "strict":
      true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '3987'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-8e48fd34b2835d3e-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJSsfmcC/31T224TMRD9FcsveclWaVpy6VuKqLhVQhUqSAStHHuyO9RrW/YsNET5d8ZO0rQS
        8Laey5lzZs5uJRp5JaRuFeku2GrR+duPDx+uJ49fG7y/Dd31OsT3b+b2y83bqRwK6Vc/QNOx50x7
        7gJC73JSR1AEGfF8ejE5n08mszmHO2/A5pYmUHXpqw4dVuPR+LIaTavzWelsPWpIXPRtK9EZeOTP
        Ue6FlFQD/NrK6G3+kColTKQclU7vCFxhtF1KQrKwlFdLeQeJfAQjeodUE7+EckZECNGbXmfK4gbB
        miTQiTvvSbxWfQJxm9mmpRwupYGkI4ZcWzA/tyBYtmsgMRA6KlA8gzgRIvxE3ye7EbyVjjmBqXxP
        Yr2fMngiMihMBs+pDDKJjDLITAqRQ9XTe+GU3bDwdwTdp8h7Z5yy2XQmmBgzPwxSEYTzv4SBNTom
        p5LwRYOyIqioOiCI3LQwBvdhuxkK6xvU3BOAt+9I+MLnhNoyzArAiT6YfGRBXvSEFn9DLuxYdIxs
        jYyFTtveoGuOqnhk6xmE2DNi7xJO5Rvy0YVfH0bt5RTdCSKqIzhGwTPV2VLu8skjrPuksqNcb+2O
        I0yed7lKhxBHWDqmtuZRib3J5mA3BLn7zqn+yVChrLEm/wAu906nr4qjjp4+ZeZjTpAnZU+x2WTK
        wRcYtQFSaFNB10q3YE712c6K1+KfhXZ/m/cCZa+Ad/l/oBzSGgJfpmYnGtQvBYzK3vK/+6+CXeaS
        NontVfP2Gogh4v7HWod6pNTMXMB4tJK7Pz4n1yQ2BAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde961e7b827c03-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:51:31 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=B4Tsom9GCOu.PyS6QOwM11OY1wJS09xzGLquJ8A5SQk-1736196691-1.0.1.1-fwlLfZH.hJg9FyQuwz.77gfkTG0YBW2gycMfmxf9n0.BGixYwt0gL6N3GhnjHBmI2Ee5aB8mLMDuxt9BiWr_cg;
        path=/; expires=Mon, 06-Jan-25 21:21:31 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=9jiUdOyMFAPJobQXf0R4ZrsFEPXFI4_5GVJeBoh6V0Q-1736196691042-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '1244'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999135'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_511f737f348e7ecf2ff182fdf055f899
    status:
      code: 200
      message: OK
version: 1
