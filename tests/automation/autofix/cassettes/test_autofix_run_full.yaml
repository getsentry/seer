interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
        D1H8li6sbAEA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:03 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D28B:294ECB:3980357:3A958BF:677C41FB
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14995'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '5'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nValidationError:
      1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9013'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-a694a585e675ac42-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//dJIxb9swEIV3/QqCsxXIsmtH2jImKTJlKNAEBE2eJbYUjyBPRQzD/72g
        bEsykiwa7rv39N6Bx4wxbjSvGVetJNV5mz90+Hz4eaja6uP1x9PjQ/Py0v/T4fVx/St6vkgK3P0B
        RVfVncLOWyCD7oxVAEmQXJfb1WZZbTbFegAdarBJ1njK15h3xpm8LMp1Xmzz5f1F3aJREHnNfmeM
        MXYcvimn0/DBa1YsrpMOYpQN8HpcYowHtGnCZYwmknTEFxNU6AjcEP34xk0UAZGEkn0EoSzI8MZr
        Cj2c5qIA+z7KFNz11l7mpzGFxcYH3MULH+d740xsRQAZ0aU/RkLPB3rKGHsf2vY3BbgP2HkShH/B
        JcNlVV7q8unKM3yFhCTtXLa6khtHoYGksXF2Ma6kakHPtNuqHDvIXhucWJHNqn9O9JX9ub5xzczl
        W/sJKAWeQAsfQBt123paC5Ae4ndr46mHwDweIkEn9sY1EHww52ew96KQ8l6voCx2PDtl/wEAAP//
        AwBM44+RFAMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde94068ef77c35-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:04 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=Ulzq2MzPOck8A02SshP5ntNZoG09ShEQmETBK4O8mb4-1736196604-1.0.1.1-57DxSE_zvR8pEf6Qh.fOiVKxoEj3qwGOpYS2yR5WdPFQjI1Ad.TNLmKfveZvLxD_Zu7nUPvEGPZ3yh1rO3wf1A;
        path=/; expires=Mon, 06-Jan-25 21:20:04 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=qzGGThHbAg3cuB8g70KTRI.4lyp3fyNPSRjev0pCk6k-1736196604230-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '193'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997907'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_2a28878beebb55a2a9ab8e274aee52a6
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71RyZKiShTd91dU1PppMVv2DkEQlbSYSTYGJAjJLINIdrx/f1K96GXv3iojTt4z
        3Ht+/Xh7ew8RSvr+OjRFUr//fHufQ2a7DinR9Phqs5GvVWp/IuVaja5NRmP87MfYYTmMRO3WgrCk
        XKOwoEyft9Kn+kQqIHtTNC7qmDlfVxErm/PteLDpykB5nlR3i8W6wrXjvsGPXLVOJueJEcXvYk7/
        6qpULvv9BMyDEHejyZz7xPlkz0K1FRSePKqRKFRXfrFyG4/ifN+cEayhGEopPIleb4nm3lKMg+oz
        OraCk1NSzy95qEfuXtLYXfkXkaI3m/d/lq2TZ4u7pL/iZWeW326/0R41bbIcIRuGtv/58TFN0zpt
        mrRMwhb3a9RUH+E4ZB+obMZ41ZbhcGu66u3FqnH89jfW2Ccdrm/NOqlCXP51vL+XL8IDo2RdNukr
        6XfG76Kuw/w76C4Ju6T7/YPjPy0m8zGLVIQv+Gg5RKMB1nqtGtpA0gQtT3nIOATYBQeJweqMUune
        sYC2iYMK8sBzGEhSVieQArY46/ILrfb4LB2pxBcXzZNLG/hmrF82LWL1BWrigzkh0jzOjJJDZktH
        tUnOVfyImLgPLD6PGGqRyJJ6kdBYkBvTRYYTsPfcy2YAtTKDg8gE7K4FVTa+MAYdDC7wWhrZKQnU
        ggBZaWJfG6G/m9DM1xGzrSPVpRHjzi/PMVbdMZb+eMWe8X95kdjTFq+nLqc8IJAAIvJ67nB6bpCL
        nVJ6ri1zzXcFNShf95kTi2+jeanGHaBX9lreYFRtG+hxI/TiDNVxFu13JPB4CtXFGHqfi0YZeUob
        KVsm8I9tUJXlohkfjnRgTRj65i1UFRIuPmXgQ1Zx9GpgTMVV48pkYVVybtHaFv1daQv9143y/VL3
        82JDRpfhkodDL75uIwJybdJlbQI1tdaJWqTSg4nEg7q1gzsji80qCr58mk0B2h2KSFJNo6GA3yl8
        gIav2+jWJRphc8LHe6wmhiX6wLrRAV+cL9omedS63wmYK0+K1Dh9tokboQhEfZI+z3wT67JwICtl
        f1O74oQEyRkUkEqc1LfijZUT8Swoz2DlhlQhwIcqD4yIjrsMW8gM0U46ukez6VqfAKHPeZB3HLLN
        zTMgT79LMnjotcyMxlouC+P+rCYxK3U/a62txV7xc8U/6QZm+z2xpV3it6/HYbuHuuKEOryCbLMK
        wlWSoKCau+hwEnRe6W7O4GrzGYRRSdfFfpfzrOK6+Z0+cYTpxa6WMcPcu07oBfN4nT2SMZnsiO8/
        /v0PGveE6IsFAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:06 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK."}]}], "stream": true, "system": "You are an exceptional principal
      engineer that is amazing at finding the root cause of any issue.\n\n\n\n# Guidelines:\n-
      Don''t always assume data being passed is correct, it could be incorrect! Sometimes
      the API request is malformed, or there is a bug on the client/server side that
      is causing the issue.\n\n\n\n- If you are not able to find any potential root
      causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20 word reason
      for why.\n\n- At EVERY step of your investigation, you MUST think out loud!
      Share what you''re learning and thinking along the way, EVERY TIME YOU SPEAK.\n\nIt
      is important that we find the potential root causes of the issue.", "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '10229'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-8e0abc3d377f0776-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        AAAAAP//ovOWpTzIrCgwOBAL+QAAAAD//6KvE7BVWCghAgAAAP//onM6iVEqzQOdRAi0GQAAAP//
        onNqQL4cC2g7AAAA//8auMwJth4AAAD//6JzsGugNKABAAAA//8a2CIaBKphDVgAAAAA//+it1Og
        o1AQywEAAAD//6L/RIaRngLqGcrIaQIAAAD//6JzmgiAnGGMuZUMAAAA//+isztgExrI0wno805A
        VwEAAAD//6Kzq+BTC/pooQMAAAD//6L/kDpkjB+RbAEAAAD//6L3LAtobgF5eAIAAAD//6Kv/ahz
        CvrofR4AAAAA//+i925oyHwCYmgf0ugFAAAA//+i87QGruMCgC4BAAAA//+is0uSMUozoBsAAAAA
        //+i8zQtYnYBaDcAAAD//xqYyQXMdhUAAAD//6JzceUILMjToZvLAAAAAP//GoidTCkoN+cAAAAA
        //+i/wr0JPjxVgAAAAD//xrgjdBAFwAAAAD//6KzC/JKc1OLMpPBN0MAbQcAAAD//xqI9cqpoHVV
        yEEBdAcAAAD//6L3mBioNMR6rx0AAAD//6L7ulws/U4AAAAA//+i94hMUWpOalkiShsT6AoAAAAA
        //+i+zBlCmSpHwAAAP//GoC9cyAmZjQAAAAA//+id4NfCzpSD7EdAAAA//8aiBwBKxUBAAAA//+i
        c2cb88w9oBsAAAAA//+is/9tcV5GAXIMAAAA//+ic46Mh91GoVeQWISIFgAAAAD//6KzK9DulwMA
        AAD//xqAlSjg8gAAAAD//6Jz+xA6HAsAAAD//6KvrYhTL4FWAwAAAP//Gojch3InDNANAAAAAP//
        onPuAw01Am0FAAAA//8agEWSxQqgA3nhV4giQgAAAAD//6J/NVSWWgTfegJ0AAAAAP//GphdMKBJ
        fZQzFwEAAAD//6J3LYjI+AAAAAD//xqIfKCXiTaAAwAAAP//ondbzFYBzQEAAAAA//+irwMMEIOe
        QLsBAAAA//8aiE2V0FlJAAAAAP//onPqR5zxiNgiDXQFAAAA//8aiK6pAuJ8jUSsZ9cBAAAA//8a
        JJs6gS4BAAAA//8a+D2dIFcAAAAA//8aoC4b0GYAAAAA//8akM2TcNsBAAAA//+is7/LUM8wBAAA
        AP//oncGhawwy4WOosIjHwAAAP//GoDWIdheAAAAAP//orP3Q/IV0jIroG1TAAAAAP//onu2yyzW
        UUjNhF5lggh7AAAAAP//ovPUAjjZAQAAAP//oneVZIi0DB4AAAD//6JzuIcWgBacIpV6aIfjw5wF
        AAAA//+i+xheck5pCureYAAAAAD//6L/xlSM4ztQd7ajBBAAAAD//6J3MZ1UiXJBGcgJAAAAAP//
        Gvg9m0BHAAAAAP//GlTbNQEAAAD//6J3RjbSU/BNzEY7GRoAAAD//xrg4X+QEwAAAAD//6J/aw55
        Eh/oAAAAAAD//6L3+nHozuoC6DE8mXloUwEAAAAA//+i96YOeJUOAAAA//8auDwKtBwAAAD//xok
        eRPoEgAAAAD//xqIfdQxecZ6aIUVAAAA//+i//oWpGsOkNwBAAAA//+isztSUtMSS3NKoBd9ggal
        sZ+eDAAAAP//GphiA+VMBgAAAAD//xqgMxlwHkoFAAAA//8aBIU5AAAA//8akEFD0JlYsDvmY/Js
        9JHKUgAAAAD//6Lzqmb4QhM7RKMZAAAA///C6oTikvwC/C4AqUByAMw0AAAAAP//gpqWC/RqYnoq
        dq+gSCohOR1kZnxRamIxsAtrpZSalxIP3kuoA5EoBibt1LxkoAl5pTk5tTpKpSBTQPryS0sKSkvi
        S/KzU/OKlazMLczR4x0AAAD//0JzFjbvIcspYaRdAAAAAP//AwDvKmP85aoAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:07 GMT
      request-id:
      - req_vrtx_019QNvpxa3NXik4RNY5h9uHx
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.", "role": "user"}, {"content": "Let me analyze this step by
      step:\n\n1. First, I notice there''s a ValidationError for a RootCauseAnalysisItem
      model. Let me trace through what''s happening...\n\n2. Looking at the error
      message, it indicates a required field is missing:\n```\nField required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n```\n\n3.
      The error occurs in the to_model() method in src/seer/automation/autofix/components/root_cause/models.py
      when trying to validate a RootCauseAnalysisItem.\n\n4. Following the call stack:\n-
      It starts in root_cause_step.py which invokes the RootCauseAnalysisComponent\n-
      This component processes the response and calls to_model() on the formatted
      response\n- During validation, it fails because a required field is missing\n\n5.
      Looking at the variable values, I can see the RootCauseAnalysisItemPrompt has
      a title and description, but seems to be missing other required fields in the
      model.\n\n6. The key insight is that there''s a mismatch between the data being
      passed to model_validate() and what the RootCauseAnalysisItem model requires.\n\nLet
      me provide a detailed root cause:\n\n<root_cause>\nTitle: Missing Required Field
      in RootCauseAnalysisItem Model Validation\n\nDescription: \nThe issue occurs
      during the conversion of a RootCauseAnalysisItemPrompt to a RootCauseAnalysisItem
      model. The validation is failing because a required field is missing in the
      input data structure. While the prompt contains ''title'' and ''description'',
      the RootCauseAnalysisItem model appears to have additional required fields that
      aren''t being provided during the conversion.\n\nThis indicates a contract mismatch
      between the prompt structure and the expected model structure. The prompt is
      generating or providing incomplete data that doesn''t satisfy all the required
      fields of the RootCauseAnalysisItem model.\n\nCode Snippets:\n\n1. Validation
      Failure Location\nRepository: getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/models.py\n```python\ndef
      to_model(self):\n    *** return RootCauseAnalysisItem.model_validate(  # This
      fails due to missing required fields\n        {\n            **self.model_dump(),\n            #
      commented out code shows some expected fields:\n            # \"reproduction\":
      self.reproduction_instructions,\n            # \"unit_test\": (\n            #     {\n```\n\n2.
      Component Processing Location\nRepository: getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/component.py\n```python\n#
      Assign the ids to be the numerical indices of the causes and relevant code context\n***
      cause_model = formatted_response.parsed.cause.to_model()  # Fails here when
      converting prompt to model\ncause_model.id = 0\n```\n\nThe root cause appears
      to be a structural mismatch between the prompt and model validation requirements.
      To fix this, either:\n1. Update the prompt to include all required fields expected
      by RootCauseAnalysisItem\n2. Make the missing fields optional in the RootCauseAnalysisItem
      model\n3. Provide default values for the missing required fields during the
      conversion process\n</root_cause>", "role": "assistant"}, {"content": "Please
      format the output properly.\n\nNote: If the provided root cause analysis is
      not formatted properly, such as code snippets missing descriptions, you can
      derive them from the provided root cause analysis.\n\nReturn only the formatted
      root cause analysis:", "role": "user"}], "model": "gpt-4o-2024-08-06", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"$defs": {"RootCauseAnalysisItemPrompt":
      {"properties": {"title": {"title": "Title", "type": "string"}, "description":
      {"title": "Description", "type": "string"}, "relevant_code": {"anyOf": [{"$ref":
      "#/$defs/RootCauseAnalysisRelevantContext"}, {"type": "null"}]}}, "required":
      ["title", "description", "relevant_code"], "title": "RootCauseAnalysisItemPrompt",
      "type": "object", "additionalProperties": false}, "RootCauseAnalysisRelevantContext":
      {"properties": {"snippets": {"items": {"$ref": "#/$defs/RootCauseRelevantContext"},
      "title": "Snippets", "type": "array"}}, "required": ["snippets"], "title": "RootCauseAnalysisRelevantContext",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantCodeSnippet":
      {"properties": {"file_path": {"title": "File Path", "type": "string"}, "repo_name":
      {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Name"}, "snippet":
      {"title": "Snippet", "type": "string"}, "start_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "Start Line"}, "end_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "End Line"}}, "required": ["file_path", "repo_name",
      "snippet", "start_line", "end_line"], "title": "RootCauseRelevantCodeSnippet",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantContext":
      {"properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title":
      "Title", "type": "string"}, "description": {"title": "Description", "type":
      "string"}, "snippet": {"anyOf": [{"$ref": "#/$defs/RootCauseRelevantCodeSnippet"},
      {"type": "null"}]}}, "required": ["id", "title", "description", "snippet"],
      "title": "RootCauseRelevantContext", "type": "object", "additionalProperties":
      false}}, "properties": {"cause": {"$ref": "#/$defs/RootCauseAnalysisItemPrompt"}},
      "required": ["cause"], "title": "MultipleRootCauseAnalysisOutputPrompt", "type":
      "object", "additionalProperties": false}, "name": "MultipleRootCauseAnalysisOutputPrompt",
      "strict": true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=3b8a7b6be7224c34adcb089994327df9,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '15008'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 3b8a7b6be7224c34adcb089994327df9-9c52368f651b1851-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        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
        FwAA//8DANSvb6vtDQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde947fa982293a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:35 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=tF4t8QSySZLoiJdbk_dc3x7VJopxVPUWbZ30zMpOLXo-1736196635-1.0.1.1-M7bruecyFj1cucWOgzb7Ytpy.BE01LT8jARvZSQKeK2cd27LDPgqD79mfyUo5IGtlhiTHCnYnJoCNHC_Sxuwng;
        path=/; expires=Mon, 06-Jan-25 21:20:35 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=UhHvUuByY8V4sl84xU9FCgSW3KNE8BdiTIgkFgLUhHM-1736196635453-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '11974'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29996869'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 6ms
      x-request-id:
      - req_ed85f42573420ec0e02d2fe91d9f8c01
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:35 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69A6E:3C7FACC:677C421B
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14994'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '6'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/component.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        LywAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:36 GMT
      ETag:
      - W/"bc4fdd21e9771f693ce0bd51e896b02cc812d908"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69C49:3C7FCA2:677C421B
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14993'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '7'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
        D1H8li6sbAEA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:36 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B69E25:3C7FEA1:677C421C
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14992'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '8'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/72RuZajSBRE/f6KOmVPqSABLe2BWAQSqACxJI4OS4o92YWUfebfR1QbbbY3bmS+
        uPFe/Prx9vYexjEahuvYlAi//3x7f4Zgtwop3vK4esPJO5EFRzPC+lQ7HOQUte0bUZS9cY32m44G
        uB4HsXqg0/4suQd6S4cRU+9RarPNuhxIty57mjW6ci0TVYKgU3CozmrNP8Y1yW4hAsjKG1Y4mgfa
        gU8u3XO2IGhXdeJoQMpM6PaXtJYfkmgpF+6QPHzGDgOQ2oczd+8hQ/tmuE/hkU8km7ckWzYPig/0
        3I13vC1RNcNgoLPXtPriVMxT9Gbz/s+yNXq0eY+Ga77szHC73bc6xE2LliNk49gOPz8/53lepU2T
        Vihs82EVN/VnOI3Z5zSgPse3ZoXqMK/e/vY9rpop+WircLw1ff32guA8+evU0FUvzD2P0apq0lfS
        74zfRV3H5++gAgp71P9+yZM/LaKnlkVKnJ9zzXaIShu5Oqj12AZ7da0WKQeBQ4xLyUJiMjqQa93T
        Snix8qCGnOE5AJKU0QmkjAv/1MWXWkv5aa9RyOcXz6NLm/nNXL0wbczoi9QkB2uOSXM/AbmAYEdH
        2CKnOrlHIBkCmysiQC0WGcKLhcoYhTmfRTgbF4l9YUYDy0/jwIOAEVqjzqaXBuKDyQZeS8eXlARK
        SQxRbhJfnaAvzPGTwxHY4Uhx6Ri4zxdzShR3SvZ/WIln/l8sknjqwnroYsoZBBKD8JxeOKxemOR8
        SSm9UJd/zXcF2Khe93kim2uj51KNO0KvGtSiyeN610CPnaCXZDFOskgSSOBxVIzLKfS2i0cVeXIb
        yTsQ+Fob1FW1eCYHjQ7sOYe+dQsVmYQLp84Gi66KQKn84GApptOM4SVTozKxAue70hb6rxsV0lL3
        43yBQCflkoeNX/P6JSZGoc66qJKzT6263r+uvSGYtjilkuYLWv1xtrNifW7KmD/chVKHD80cfMPN
        hPSUXR4ME6prZ8hcXdfvQvCA5sXCxw8xJFDfHjFAaxwOg3kM+omzWrlz5bUg2JGVfTC2fNNUNjV7
        YOYlMDfs1nDqL0+bbHIPvFuhPqoEtC0/iwo+Oko8Gs6JBZvrJNTDh1NKYgnVfVsP+/GANawVbiYH
        uc501kePitzYNMFJ0XBi0vlIUUV3OgGU8fkmvEpf54oKbOlc8QIt0SkdWQ8GZ73iHYFL+WKmlBvH
        QqKsTY64Me++e6Xv89wBpTuRbTOivGWH/BZHlWWeIop4ITlvkO2C297sgi+qK0SkVmmC+Z0Ib938
        /uPf/wCD32F6iwUAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:39 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}], "stream":
      true, "system": "You are an exceptional principal engineer that is amazing at
      finding and fixing issues in codebases.\n\nYou have access to tools that allow
      you to search a codebase to find the relevant code snippets and view relevant
      files. You can use these tools as many times as you want to find the relevant
      code snippets.\n\n# Guidelines:\n- EVERY TIME before you use a tool, think step-by-step
      each time before using the tools provided to you.\n- You also MUST think step-by-step
      before giving the final answer.", "tools": [{"name": "list_directory", "description":
      "Given the path for a directory in this codebase, returns the immediate contents
      of the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '13861'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-b3718f4dab60ee26-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        QnMUNn8hyykh6wUAAAD//wMA3wd9pIAeAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:40 GMT
      request-id:
      - req_vrtx_01UTStTKbBbpdK9FH5RTd9dH
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:44 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D298:CD9D0:3B6BFA8:3C82098:677C421C
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14991'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '9'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/72RuZajSBRE/f6KOmVPqSAFkmgPBIhdxb44OpAg1mSXkLLP/PuIaqPN9saNzBf3
        vYhfP97e3mMIs2m6zF2dte8/396fMWA2McFaPo32dNajnNnXKommKJdGvzvGW5fLiBqFh35hhMuT
        FtjSbDs3csJgUUx6n+vt8zHinVBx8fyBDTjXwnnnI+e0b+0PlRb3rp3bONCK09BWNVfFxuk2knam
        77dBZqED6aSqy6bc0rvY5T1fv+rXWPEIBZqgq12lNwgpsh5jPxePa7LExzxU2WiyWUuwRVM6BUAv
        vaAgkH1CZw8gxSviyEvAMyfI/f79n/Xq7NGXYzZdyvXmLc0w3+oEuz5bQyjmuZ9+fn4uy7LJuy5v
        srgvpw3s0Gd8m4tP2HS39KNv4vnajejtb9+noZmy8V7CbNN0edm+vTBtmf517vaaKttrt8lQXDa/
        N/8u6jI/fy/KZfGYjb9fyvRPi9lTKZITLM+lYrtYJo1SnmQ099FR3slVTofAxYZTUyE2tzoQke4r
        dehYZYRC2vBdEOJ8q+OQMBz2qfMvFQmldlSILGBXT9UjzfJqbl6YHm71VepSyVog7u4aEKsQMGTS
        WlhD6T0B6RTZdJUAYrUosna1kLdGZS5nPlwMR6BemNloxachsSDacr2BittLA1AyqcjvSejkODrV
        2ODFLg3kWxhwC3zSbQKYNjl5JATe88W8pSfvlh7/sFLf/L9YOPXllfXQ+Zw2cIgNzNJ65VJ6ZeKz
        kxN6Ja//uu8KWqN55fPMbLpPnms13hz6zSRXXQkR04U+dQv9tIBtWiQChyOfJmBb32L/sHo0iS/2
        iciAKFD6CDXN6plKChnZSxkG1jU+iTj+5njh2Rd5u1UUx2usLOCujpf2CWkhS4KrVx8Gr4wqYa37
        cXZCYPDmug8FX/O6A7FRyYvOy4QhEZtxyGmVkXanR31hirLKjsewOsx9/KEfrv5WrA4WR4iO4tke
        86BrJXlcs8O5/TBndbGpiGjLHgrmzteu/BDIYttRLJtTnU+XiL7bJbsH2MtmRjtfWn57BmTVDMFh
        blJrP5AFNdB6t4iGbTGyYoyBemZvxXgfVPlLz12f8wxF1RwINEZAd1KIeCfeRdRiaUJJgDmPx0Gn
        TPGRM6l5jDLs9x+LBphRvfPsfBchSQxixC9bu4sFgRHzpm4HJEkH4bGj/a+LCri9QVaSWUF4tMBR
        iNR42LKVm17aee4QhNhaJFOD1tIMsP3iL5XFa511v8bwgu8Kg477QZCJVI9xBJxXpmowceI5b/L3
        H//+B7vl99eLBQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:44 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Given the chain of thought below for coming
      up with a fix for the issue:\nnot started yet\n\nWrite the next under-20-word
      conclusion in the chain of thought based on the notes below.  The criteria for
      a good conclusion are that it should be a large, novel jump in insights, not
      similar to any item in the existing chain of thought, it should be a complete
      conclusion after some meaty analysis, not a plan of what to analyze next, and
      it should be valuable for coming up with a fix for the issue. It should also
      be very concrete, to-the-point, and specific. Every item in the chain of thought
      should read like a chain that clearly builds off of the previous step.\n\nIf
      you do write something, write it so that someone else could immediately understand
      your point in detail.\n\nNOTES TO ANALYZE:\nLet me think about this step by
      step.\n\n1) First, I need to understand the error:\n- It''s a ValidationError
      for RootCauseAnalysisItem\n- The error mentions that the \"unit_test.snippet\"
      field is required\n- The error occurs in the to_model() method in models.py\n-
      The issue suggests uncommenting the unit test parts\n\n2) Let''s look at the
      relevant code first. I need to check the models.py file:", "role": "user"}],
      "model": "gpt-4o-mini-2024-07-18", "temperature": 0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '1297'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-9f288885dd47efe3-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xSwWobMRC971cMOnvN2jF24luhhzRtaSmhUJqyyNLselKtpGhmQ0vwvxetHe+G
        ptCLDu/Ne8x7o6cCQJFVW1Bmr8V00ZVvuvDB3Fxfv2V/+1Dd6PfvPt4/fjLyLX7++kXNsiLs7tHI
        s2puQhcdCgV/pE1CLZhdF5uL9eJqvV6tBqILFl2WtVHKVSg78lQuq+WqrDbl4vKk3gcyyGoL3wsA
        gKfhzXt6i7/UFqrZM9Ihs25Rbc9DACoFlxGlmYlFe1GzkTTBC/ph9ds9QkfM5Fu4U70nqQVZ5uwp
        RpQ7BQ2hs0DektGCDBo8ogUJgJ77hKCdg4QPPSW0x2kGnRBiiL3LFcAOm5AQhuDwqB1ZnXuaT3dK
        2PSscy++d+6EH84hXWhjCjs+8We8IU+8rxNqDj4HYglRDeyhAPgxlNm/6EfFFLootYSf6LPhcr05
        +qnxhhN2dSIliHYT/Goxe8WvtiiaHE/OoYw2e7SjdLyd7i2FCVFMUv+9zWvex+Tk2/+xHwljMAra
        Oia0ZF4mHscS5i/+r7Fzy8PCin+zYFc35FtMMdHxgzWxrrS+tBe4rHaqOBR/AAAA//8DAE9Jm+Nu
        AwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde95039a450ffc-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:45 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=HPEQHDUNTtzKHU9Os.X3.EHWjQZ3fnZwSqR6uoPFVlc-1736196645-1.0.1.1-ss3I7WN6IkO50RRkOiwzB9acoNnjek3k9de2na2mgUt3lhlzQeoOdtoySypk43RS5aEim0LkQD8r6o8h4RpbqA;
        path=/; expires=Mon, 06-Jan-25 21:20:45 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=V517DjeIPPH6ISVRyo.EYSPBsLT.Dqx730LsXAf8CHA-1736196645116-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '597'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999688'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_fa6addc07c55c3536065df203efd6f95
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer.", "role": "user"},
      {"content": "Let me think about this step by step.\n\n1) First, I need to understand
      the error:\n- It''s a ValidationError for RootCauseAnalysisItem\n- The error
      mentions that the \"unit_test.snippet\" field is required\n- The error occurs
      in the to_model() method in models.py\n- The issue suggests uncommenting the
      unit test parts\n\n2) Let''s look at the relevant code first. I need to check
      the models.py file:", "role": "assistant"}, {"content": "from typing import
      Annotated, Optional\n\nfrom pydantic import BaseModel, StringConstraints, field_validator\nfrom
      pydantic_xml import attr\n\nfrom seer.automation.agent.models import Message\nfrom
      seer.automation.autofix.utils import remove_code_backticks\nfrom seer.automation.component
      import BaseComponentOutput, BaseComponentRequest\nfrom seer.automation.models
      import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue import
      IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "role":
      "user"}, {"content": "Return the pieces of context from the issue details or
      the files in the codebase that are directly relevant to the text below:\nThe
      missing \"unit_test.snippet\" field indicates a need to ensure all required
      fields are populated before model validation.\n\nThat means choose the most
      relevant codebase snippets (codebase_context), event logs (breadcrumb_context),
      or stacktrace/variable data (stacktrace_context), that show specifically what
      the text mentions. Don''t include any repeated information; just include what''s
      needed.\n\nAlso provide a one-line explanation of how the pieces of context
      directly explain the text.\n\nTo know what''s needed, reference these notes:\nLet
      me think about this step by step.\n\n1) First, I need to understand the error:\n-
      It''s a ValidationError for RootCauseAnalysisItem\n- The error mentions that
      the \"unit_test.snippet\" field is required\n- The error occurs in the to_model()
      method in models.py\n- The issue suggests uncommenting the unit test parts\n\n2)
      Let''s look at the relevant code first. I need to check the models.py file:",
      "role": "user"}], "model": "gpt-4o-mini-2024-07-18", "max_tokens": 4096, "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"$defs": {"BreadcrumbContext":
      {"properties": {"type": {"title": "Type", "type": "string"}, "category": {"title":
      "Category", "type": "string"}, "body": {"title": "Body", "type": "string"},
      "level": {"title": "Level", "type": "string"}, "data_as_json": {"title": "Data
      As Json", "type": "string"}}, "required": ["type", "category", "body", "level",
      "data_as_json"], "title": "BreadcrumbContext", "type": "object", "additionalProperties":
      false}, "CodeSnippetContext": {"properties": {"repo_name": {"title": "Repo Name",
      "type": "string"}, "file_path": {"title": "File Path", "type": "string"}, "snippet":
      {"title": "Snippet", "type": "string"}}, "required": ["repo_name", "file_path",
      "snippet"], "title": "CodeSnippetContext", "type": "object", "additionalProperties":
      false}, "StacktraceContext": {"properties": {"file_name": {"title": "File Name",
      "type": "string"}, "repo_name": {"title": "Repo Name", "type": "string"}, "function":
      {"title": "Function", "type": "string"}, "line_no": {"title": "Line No", "type":
      "integer"}, "col_no": {"title": "Col No", "type": "integer"}, "code_snippet":
      {"title": "Code Snippet", "type": "string"}, "vars_as_json": {"title": "Vars
      As Json", "type": "string"}}, "required": ["file_name", "repo_name", "function",
      "line_no", "col_no", "code_snippet", "vars_as_json"], "title": "StacktraceContext",
      "type": "object", "additionalProperties": false}}, "properties": {"explanation":
      {"title": "Explanation", "type": "string"}, "codebase_context": {"items": {"$ref":
      "#/$defs/CodeSnippetContext"}, "title": "Codebase Context", "type": "array"},
      "stacktrace_context": {"items": {"$ref": "#/$defs/StacktraceContext"}, "title":
      "Stacktrace Context", "type": "array"}, "event_log_context": {"items": {"$ref":
      "#/$defs/BreadcrumbContext"}, "title": "Event Log Context", "type": "array"}},
      "required": ["explanation", "codebase_context", "stacktrace_context", "event_log_context"],
      "title": "InsightContextOutput", "type": "object", "additionalProperties": false},
      "name": "InsightContextOutput", "strict": true}}, "stream": false, "temperature":
      0.0}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19545'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-b04be3808419c360-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//zFZNb9s4EL37VwyUQ53CVhwnTRoBPXRzWqAfi7YLFIgCgaFGEhOKFDij
        NNms//uClCzZrTbd3tYHS5735mk48yzyaQYQqTxKIJKVYFk3evm2tu/yO0n1u9PLh7/efz67/VDU
        5bevl2uUX6OFz7A3tyh5mxVLWzcaWVnTwdKhYPSqx+cnZ8cXZ2enrwJQ2xy1TysbXp7aZa2MWq5X
        69Pl6nx5/LrPrqySSFECVzMAgKfw7es0OT5ECawW20iNRKLEKBlIAJGz2kciQaSIheFoMYLSGkYT
        Sn9KDUAa4UOjhRG++jRKII2+VAiNs/cqxxwC/4GhUmWlVVkxAVcItSJSpoQXrVGcMRLHZFTTIL+A
        QqHOQZlA/GQtX4qW8K0R+pEU/c5YQ+jDAr5VSlagCKRrpRIaCuuAWimRqGh1R4N7oVUe6ovTaNEV
        LW2ON4Iw6+vzlV95COCpu3iWw8ZmRtTYLaxEJjTsHo8I0fVaHbNQGrNGcNUxycnAORIt2zo8O9wW
        6uHID9saNExHzlrOpF/dUSiV4uZxT7bvSScqtSCabsj8N0H43kscJmmXrvIElGF4A8vjPsSKNSZA
        7PpAjiSdanx5u+EDGKaSwJ9G8Rck/tyVAn/DB2sQ3oRLn+C7ue1kAh+DoNBXWhFfDfV+Qo33wvBl
        x7u+3mpEnchm8T/vf44FsM0Cc06oi6HXDrl1Zno0ceBnvQlxnm7V/UrHe/95+dKr9gl5Wzfzw8V3
        lANI0zQaxuN/JDD/gTSlfjDc+ayxYUEiPHj8Lw7o4lmRbXumJIInesLzKjsunFTawaeFNpNRVXwn
        NMlCTbhr5RHd6/32EYeDW/3lun+bEAt5x07In7xPQltHP0977hdM3xo5vna31tyjaGUwM9Yzjk9W
        O4C0uo/vR8ehdaq/Yu2t457x8U/9ewBxHA/NTs3mcG8998JRJii7pe2yn4IRURedlv+eLPYPZ+uG
        53EcH3rOZn+QYY4GoB8o3qPhTNtyb57Xqdns7oUOi5aE349Nq3Uf3wybq7Zl4+wN9fgQL5RRVGUO
        BVnjN1Ji20QB3cy8qfwm3u7ty1ETqs/Y3qHxgicXZ+edYDQeHkb4dP2qR9my0DvAycV6MSGZ5chC
        ado5CURSyArzMXc8Nog2V3YHmO0s/Md6prS7xStT/hf5EZASG8Y8axzmSu6veaQ59Kerf6MNjQ4F
        R/RIjHVWKFOia5zqzjZFk62EeJ2f4Hp1E802s38AAAD//wMAmF6tN+kJAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde95090af57c7a-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:49 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=ol64f38Zsin29_5NZS5.lzEikAco_HEEvPt.jvgMMEo-1736196649-1.0.1.1-MEJWWXmfzDvjDdWCjFFJyMVJ1sfHstuUIoHrcTkXxK2xyJNLQoRbC4CT6oJ.OgcSTIUCjuHytLmmhmImfyA0_w;
        path=/; expires=Mon, 06-Jan-25 21:20:49 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=o6UCo3lz7dF0szu1jbZLFTqzOekjM07KJ83z7j9coek-1736196649542-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '4122'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149991828'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 3ms
      x-request-id:
      - req_38dbc2163d67ebe3dfd35eafbc986420
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC"}]}], "stream": true, "system": "You are
      an exceptional principal engineer that is amazing at finding and fixing issues
      in codebases.\n\nYou have access to tools that allow you to search a codebase
      to find the relevant code snippets and view relevant files. You can use these
      tools as many times as you want to find the relevant code snippets.\n\n# Guidelines:\n-
      EVERY TIME before you use a tool, think step-by-step each time before using
      the tools provided to you.\n- You also MUST think step-by-step before giving
      the final answer.", "tools": [{"name": "list_directory", "description": "Given
      the path for a directory in this codebase, returns the immediate contents of
      the directory such as files and direct subdirectories. Does not include nested
      directories.", "input_schema": {"type": "object", "properties": {"path": {"type":
      "string", "description": "The path to view. For example, \"src/app/components\""},
      "repo_name": {"type": "string", "description": "Optional name of the repository
      to search in if you know it."}}, "required": ["path"]}}, {"name": "expand_document",
      "description": "Given a document path, returns the entire document text.\n-
      Note: To save time and money, if you''re looking to expand multiple documents,
      call this tool multiple times in the same message.\n- If a document has already
      been expanded earlier in the conversation, don''t use this tool again for the
      same file path.", "input_schema": {"type": "object", "properties": {"file_path":
      {"type": "string", "description": "The document path to expand."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["file_path"]}}, {"name": "keyword_search",
      "description": "Searches for a keyword in the codebase.", "input_schema": {"type":
      "object", "properties": {"keyword": {"type": "string", "description": "The keyword
      to search for."}, "supported_extensions": {"type": "array", "description": "The
      str[] of supported extensions to search in. Include the dot in the extension.
      For example, [''.py'', ''.js''].", "items": {"type": "string"}}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}, "in_proximity_to": {"type": "string", "description": "Optional
      path to search in proximity to, the results will be ranked based on proximity
      to this path."}}, "required": ["keyword", "supported_extensions"]}}, {"name":
      "file_search", "description": "Searches for a file in the codebase.", "input_schema":
      {"type": "object", "properties": {"filename": {"type": "string", "description":
      "The file to search for."}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}}, "required": ["filename"]}},
      {"name": "file_search_wildcard", "description": "Searches for files in a folder
      using a wildcard pattern.", "input_schema": {"type": "object", "properties":
      {"pattern": {"type": "string", "description": "The wildcard pattern to match
      files."}, "repo_name": {"type": "string", "description": "Optional name of the
      repository to search in if you know it."}}, "required": ["pattern"]}}, {"name":
      "search_google", "description": "Searches the web with Google and returns the
      answer to a question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to answer."}}, "required":
      ["question"]}}, {"name": "ask_a_question", "description": "Asks your team members
      a quick question.", "input_schema": {"type": "object", "properties": {"question":
      {"type": "string", "description": "The question you want to ask your team."}},
      "required": ["question"]}}], "anthropic_version": "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '19894'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-84d2fbb28677f26d-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:50:45 GMT
      request-id:
      - req_vrtx_01FZsaaBCGds8k5jftEsx25s
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/71Uy7aiOhSc91ecdcZXDyKo9AzlKYIiyGviggQhvII8RNLr/vuF04Me9uyOslZl
        p6r2riS/fnx8fIYAxG1773AeV58/Pz7HkOaWIcVfXbbcMnbVnRTPXMcaKXewfXICsd3cEDccszBY
        lDgS7lvHSVUcN/zC6CA8roIDtT8WNXqdUselvD2z21y1Lt7i67jXj1U2HrlizY7uAxwATVEavLw2
        bfdE/Psh98UlO48XQbuhgTzcl2+PT4DfYc6xcuEodya/nbpQc4a+KnhpwXcZHx4SX+MfpsVfRUsy
        FdmjdRTyHttrZ6jzXus0OTkLUI8SarXdfv4zdx2/a9TE7R3NPa9ZjvtGW4DreB7CtFQIfqRdV7c/
        v76GYVgmGCdFHNaoXQJcfoV9l36BAvdwURdh98BN+dfy9lm0cfNCIF4WOEHVXw/0UzmqHngZlyEq
        fjv/Durejb+N7uOwiZvfOwj+STEej2kkA3RGR+tG1JWB1FYtuzo4qBs1S1ifvhHDzhmfmGudlkrd
        Pea+fUVB6bOGe6N9kqx14lOGzY+6MKGliE6HIxV7/MypOSsTPczlJFODtT5DGCrXARD8OtFS5tPc
        Kqqu5FTCV0TDNrDYLKKpmSKNq5lCXRuZOZwFfzBskZlkOqOSRkPh6WC9r40y7SeMBorJBG69AnZC
        AjknhiBh6Km97+0HMLJVRHNVJDsrQDvjpNlD2enh4Y8WdM3/S4tAV5213rqQsAbxiUF4Vs9ujJ6Z
        5GwnlJ6pcx3+jqAyimk+Y2yxdTTO0Tid7xatmmEESg77LtP7LkxBBdNI3JPAZSlQ5X3o7maOInKl
        OpI4OvCOdVAWxcwJlenpWQPyvesjlCUSzjql+HbFuohFA0eCuAqEyRddlKFQ5GC6HhNX7XvTjDJx
        jvt9tn3ayPzZDwOm87oNiJGpgy6otFFRS2WsWkiPytY4aGfl/ghT46ld7lkOrWana7z5zO2+lM29
        HHGWXCF0c2VuJVoc05+zhMF5d0ni2pRTS9aivlEfBhFP4j3SBH/nhM22xauNFXhc76hyvb9Wr+nz
        EFM28bftYlQPG5VQI2X7nr8dy1vDrExpccgdA+6Y0WCF3QacNO4cgSgNV1J+lI5N9b6D9ekWqY8I
        Wjks/OMa7SKmC+NrVvTZPlfe2LKF03i798PI4aeKQwoxxF+fyeLerpnwUAi9EZhh+w7eOxFau60k
        9M4F1IukHnCqbNxy5FF2prdrSKIyFAVYtlrPDK5WpanH7Xb7/fkiW42Fpx6olfM00/ZqpbuSqOAk
        xbLCf/749z8SelmjiwUAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:06 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\nThe user has provided the following instruction for the
      fix: we should uncomment out the unit test parts\n\n# Your goal:\nProvide the
      most actionable and effective steps to fix the issue.\n\nSince you are an exceptional
      principal engineer, your solution should not just add logs or throw more errors,
      but should meaningfully fix the issue. Your list of steps to fix the problem
      should be detailed enough so that following it exactly will lead to a fully
      complete solution.\n\nWhen ready with your final answer, detail the precise
      plan to fix the issue.\n\n# Guidelines:\n- No placeholders are allowed, the
      fix must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting your
      suggested fix.\n- The fix must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- If the issue occurs in multiple places
      or files, make sure to provide a fix for each occurrence, no matter how many
      there are.\n- In your suggested fixes, whenever you are providing code, provide
      explicit diffs to show the exact changes that need to be made.\n- You do not
      need to make changes in test files, someone else will do that.\n- At any point,
      please feel free to ask your teammates (who are much more familiar with the
      codebase) any specific questions that would help you in your analysis.\n- At
      any point, please feel free to Google for information that would help you in
      your analysis, using the tool provided.\n- EVERY TIME before you use a tool,
      think step-by-step each time before using the tools provided to you.\n- You
      also MUST think step-by-step before giving the final answer."}]}, {"role": "assistant",
      "content": [{"type": "tool_use", "id": "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC",
      "name": "expand_document", "input": {"file_path": "src/seer/automation/autofix/components/root_cause/models.py",
      "repo_name": "getsentry/seer"}}]}, {"role": "user", "content": [{"type": "tool_result",
      "content": "from typing import Annotated, Optional\n\nfrom pydantic import BaseModel,
      StringConstraints, field_validator\nfrom pydantic_xml import attr\n\nfrom seer.automation.agent.models
      import Message\nfrom seer.automation.autofix.utils import remove_code_backticks\nfrom
      seer.automation.component import BaseComponentOutput, BaseComponentRequest\nfrom
      seer.automation.models import EventDetails, PromptXmlModel\nfrom seer.automation.summarize.issue
      import IssueSummary\n\n\nclass SnippetPromptXml(PromptXmlModel, tag=\"code\"):\n    file_path:
      str = attr()\n    repo_name: Optional[str] = attr()\n    snippet: Annotated[str,
      StringConstraints(strip_whitespace=True)]\n\n    @classmethod\n    def get_example(cls):\n        return
      cls(\n            file_path=\"path/to/file.py\",\n            repo_name=\"owner/repo\",\n            snippet=\"def
      foo():\\n    return ''bar''\\n\",\n        )\n\n\nclass RootCauseRelevantCodeSnippet(BaseModel):\n    file_path:
      str\n    repo_name: Optional[str]\n    snippet: str\n    start_line: int | None
      = None\n    end_line: int | None = None\n\n\nclass RootCauseRelevantContext(BaseModel):\n    id:
      int\n    title: str\n    description: str\n    snippet: Optional[RootCauseRelevantCodeSnippet]\n\n\nclass
      RootCauseAnalysisRelevantContext(BaseModel):\n    snippets: list[RootCauseRelevantContext]\n\n\nclass
      UnitTestSnippetPrompt(BaseModel):\n    file_path: str\n    code_snippet: str\n    description:
      str\n\n    @field_validator(\"code_snippet\")\n    @classmethod\n    def clean_code_snippet(cls,
      v: str) -> str:\n        return remove_code_backticks(v)\n\n\nclass UnitTestSnippet(BaseModel):\n    file_path:
      str\n    snippet: str\n    description: str\n\n\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n    # unit_test: UnitTestSnippet
      | None = None\n    # reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n\n    def to_markdown_string(self) -> str:\n        markdown = f\"#
      {self.title}\\n\\n\"\n        markdown += f\"## Description\\n{self.description}\\n\\n\"
      if self.description else \"\"\n\n        if self.code_context:\n            markdown
      += \"## Relevant Code Context\\n\\n\"\n            for context in self.code_context:\n                markdown
      += f\"### {context.title}\\n\"\n                markdown += f\"{context.description}\\n\\n\"\n                if
      context.snippet:\n                    markdown += f\"**File:** {context.snippet.file_path}\\n\"\n                    if
      context.snippet.repo_name:\n                        markdown += f\"**Repository:**
      {context.snippet.repo_name}\\n\"\n                    markdown += \"```\\n\"\n                    markdown
      += f\"{context.snippet.snippet}\\n\"\n                    markdown += \"```\\n\\n\"\n\n        return
      markdown.strip()\n\n\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n    # reproduction_instructions: str | None = None\n    #
      unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code: Optional[RootCauseAnalysisRelevantContext]\n\n    @classmethod\n    def
      from_model(cls, model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n            #
      reproduction_instructions=model.reproduction,\n            # unit_test=(\n            #     UnitTestSnippetPrompt(\n            #         file_path=model.unit_test.file_path,\n            #         code_snippet=model.unit_test.snippet,\n            #         description=model.unit_test.description,\n            #     )\n            #     if
      model.unit_test\n            #     else None\n            # ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n                    snippets=[\n                        RootCauseRelevantContext(\n                            id=snippet.id,\n                            title=snippet.title,\n                            description=snippet.description,\n                            snippet=snippet.snippet,\n                        )\n                        for
      snippet in model.code_context\n                    ]\n                )\n                if
      model.code_context\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n                #         \"file_path\": self.unit_test.file_path,\n                #         \"snippet\":
      self.unit_test.code_snippet,\n                #         \"description\": self.unit_test.description,\n                #     }\n                #     if
      self.unit_test\n                #     else None\n                # ),\n                \"code_context\":
      (\n                    self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                ),\n            }\n        )\n\n\nclass MultipleRootCauseAnalysisOutputPrompt(BaseModel):\n    cause:
      RootCauseAnalysisItemPrompt\n\n\nclass RootCauseAnalysisOutputPrompt(BaseModel):\n    thoughts:
      Optional[str]\n    potential_root_causes: MultipleRootCauseAnalysisOutputPrompt\n\n\nclass
      RootCauseAnalysisRequest(BaseComponentRequest):\n    event_details: EventDetails\n    instruction:
      Optional[str] = None\n    summary: Optional[IssueSummary] = None\n    initial_memory:
      list[Message] = []\n\n\nclass RootCauseAnalysisOutput(BaseComponentOutput):\n    causes:
      list[RootCauseAnalysisItem]\n    termination_reason: str | None = None\n", "tool_use_id":
      "toolu_vrtx_01N4LaQJDyV1d9PHiXKnaHDC"}]}, {"role": "assistant", "content": [{"type":
      "text", "text": "\n\nLet me think through this step by step:\n\n1. First, analyzing
      the error message:\n   - The error is a ValidationError for RootCauseAnalysisItem\n   -
      Specifically, it''s complaining about a missing field in unit_test.snippet\n   -
      Looking at the stack trace, it''s happening in the to_model() method\n\n2. Looking
      at the code:\n   - The file models.py has commented out sections related to
      unit_test\n   - The issue matches with the user''s instruction that \"we should
      uncomment out the unit test parts\"\n   - There are three main sections that
      are commented out:\n     - In RootCauseAnalysisItem class: unit_test and reproduction
      fields\n     - In RootCauseAnalysisItemPrompt class: reproduction_instructions
      and unit_test fields\n     - In the to_model() method: the unit_test mapping
      section\n\n3. The fix:\n   - We need to uncomment all the unit test related
      code\n   - We also need to uncomment the reproduction related code since they''re
      part of the same data structure\n\nHere''s the detailed fix plan:\n\n1. In `src/seer/automation/autofix/components/root_cause/models.py`,
      we need to make the following changes:\n\n```diff\nclass RootCauseAnalysisItem(BaseModel):\n    id:
      int = -1\n    title: str\n    description: str\n-   # unit_test: UnitTestSnippet
      | None = None\n-   # reproduction: str | None = None\n+   unit_test: UnitTestSnippet
      | None = None\n+   reproduction: str | None = None\n    code_context: Optional[list[RootCauseRelevantContext]]
      = None\n```\n\n```diff\nclass RootCauseAnalysisItemPrompt(BaseModel):\n    title:
      str\n    description: str\n-   # reproduction_instructions: str | None = None\n-   #
      unit_test: UnitTestSnippetPrompt | None = None\n+   reproduction_instructions:
      str | None = None\n+   unit_test: UnitTestSnippetPrompt | None = None\n    relevant_code:
      Optional[RootCauseAnalysisRelevantContext]\n```\n\n```diff\n    def to_model(self):\n        return
      RootCauseAnalysisItem.model_validate(\n            {\n                **self.model_dump(),\n-               #
      \"reproduction\": self.reproduction_instructions,\n-               # \"unit_test\":
      (\n-               #     {\n-               #         \"file_path\": self.unit_test.file_path,\n-               #         \"snippet\":
      self.unit_test.code_snippet,\n-               #         \"description\": self.unit_test.description,\n-               #     }\n-               #     if
      self.unit_test\n-               #     else None\n-               # ),\n+               \"reproduction\":
      self.reproduction_instructions,\n+               \"unit_test\": (\n+                   {\n+                       \"file_path\":
      self.unit_test.file_path,\n+                       \"snippet\": self.unit_test.code_snippet,\n+                       \"description\":
      self.unit_test.description,\n+                   }\n+                   if self.unit_test\n+                   else
      None\n+               ),\n                \"code_context\": (\n                    self.relevant_code.model_dump()[\"snippets\"]
      if self.relevant_code else None\n                ),\n            }\n        )\n```\n\nAlso
      in `from_model` method:\n```diff\n    @classmethod\n    def from_model(cls,
      model: RootCauseAnalysisItem):\n        return cls(\n            title=model.title,\n            description=model.description,\n-           #
      reproduction_instructions=model.reproduction,\n-           # unit_test=(\n-           #     UnitTestSnippetPrompt(\n-           #         file_path=model.unit_test.file_path,\n-           #         code_snippet=model.unit_test.snippet,\n-           #         description=model.unit_test.description,\n-           #     )\n-           #     if
      model.unit_test\n-           #     else None\n-           # ),\n+           reproduction_instructions=model.reproduction,\n+           unit_test=(\n+               UnitTestSnippetPrompt(\n+                   file_path=model.unit_test.file_path,\n+                   code_snippet=model.unit_test.snippet,\n+                   description=model.unit_test.description,\n+               )\n+               if
      model.unit_test\n+               else None\n+           ),\n            relevant_code=(\n                RootCauseAnalysisRelevantContext(\n```\n\nThis
      fix:\n1. Uncomments and enables the unit_test field in RootCauseAnalysisItem\n2.
      Uncomments and enables the unit_test and reproduction_instructions fields in
      RootCauseAnalysisItemPrompt\n3. Uncomments and enables the unit_test mapping
      in the to_model method\n4. Uncomments and enables the unit_test mapping in the
      from_model method\n5. Also handles the related reproduction fields since they''re
      part of the same data structure\n\nThe fix handles both the validation error
      by enabling the required fields and follows the user''s instruction to uncomment
      the unit test parts. This should allow the validation to proceed correctly when
      unit test information is provided."}]}, {"role": "user", "content": [{"type":
      "text", "text": "Break down the task of fixing the issue into steps. Your list
      of steps should be detailed enough so that following it exactly will lead to
      a fully complete solution.\n\nEnclose this plan between <plan_steps> and </plan_steps>
      tags. Make sure to strictly follow this format and include all necessary details
      within the tags. Your output must follow the format properly according to the
      following guidelines:\n\n<plan_steps>\n<step file_path=\"path/to/file.py\" repo_name=\"owner/repo\"
      type=\"Either ''file_change'', ''file_create'', or ''file_delete''\">\n<diff>\n#
      Here provide the EXACT unified diff of the code change required to accomplish
      this step.\n# You must prefix lines that are removed with a ''-'' and lines
      that are added with a ''+''. Context lines around the change are required and
      must be prefixed with a space.\n# Make sure the diff is complete and the code
      is EXACTLY matching the files you see.\n# For example:\n--- a/path/to/file.py\n+++
      b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return ''fab''\n    y = 2\n    x = 1\n-def
      foo():\n+def foo():\n    return ''foo''\n    def bar():\n    return ''bar''\n</diff>\n<description>\nDescribe
      what you are doing here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n<step
      file_path=\"path/to/file.py\" repo_name=\"owner/repo\" type=\"Either ''file_change'',
      ''file_create'', or ''file_delete''\">\n<diff>\n# Here provide the EXACT unified
      diff of the code change required to accomplish this step.\n# You must prefix
      lines that are removed with a ''-'' and lines that are added with a ''+''. Context
      lines around the change are required and must be prefixed with a space.\n# Make
      sure the diff is complete and the code is EXACTLY matching the files you see.\n#
      For example:\n--- a/path/to/file.py\n+++ b/path/to/file.py\n@@ -1,3 +1,3 @@\n    return
      ''fab''\n    y = 2\n    x = 1\n-def foo():\n+def foo():\n    return ''foo''\n    def
      bar():\n    return ''bar''\n</diff>\n<description>\nDescribe what you are doing
      here in detail like you are explaining it to a software engineer.\n</description>\n<commit_message>\nProvide
      a commit message that describes the change you are making\n</commit_message>\n</step>\n</plan_steps>\n\n#
      Guidelines:\n- Each file change must be a separate step and be explicit and
      clear.\n  - You MUST include exact file paths for each step you provide. If
      you cannot, find the correct path.\n- No placeholders are allowed, the steps
      must be clear and detailed.\n- Make sure you use the tools provided to look
      through the codebase and at the files you are changing before outputting the
      steps.\n- The plan must be comprehensive. Do not provide temporary examples,
      placeholders or incomplete steps.\n- Make sure any new files you create don''t
      already exist, if they do, modify the existing file.\n- EVERY TIME before you
      use a tool, think step-by-step each time before using the tools provided to
      you.\n- You also MUST think step-by-step before giving the final answer."}]}],
      "stream": true, "tools": [{"name": "list_directory", "description": "Given the
      path for a directory in this codebase, returns the immediate contents of the
      directory such as files and direct subdirectories. Does not include nested directories.",
      "input_schema": {"type": "object", "properties": {"path": {"type": "string",
      "description": "The path to view. For example, \"src/app/components\""}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["path"]}}, {"name": "expand_document", "description":
      "Given a document path, returns the entire document text.\n- Note: To save time
      and money, if you''re looking to expand multiple documents, call this tool multiple
      times in the same message.\n- If a document has already been expanded earlier
      in the conversation, don''t use this tool again for the same file path.", "input_schema":
      {"type": "object", "properties": {"file_path": {"type": "string", "description":
      "The document path to expand."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["file_path"]}}, {"name": "keyword_search", "description": "Searches for a keyword
      in the codebase.", "input_schema": {"type": "object", "properties": {"keyword":
      {"type": "string", "description": "The keyword to search for."}, "supported_extensions":
      {"type": "array", "description": "The str[] of supported extensions to search
      in. Include the dot in the extension. For example, [''.py'', ''.js''].", "items":
      {"type": "string"}}, "repo_name": {"type": "string", "description": "Optional
      name of the repository to search in if you know it."}, "in_proximity_to": {"type":
      "string", "description": "Optional path to search in proximity to, the results
      will be ranked based on proximity to this path."}}, "required": ["keyword",
      "supported_extensions"]}}, {"name": "file_search", "description": "Searches
      for a file in the codebase.", "input_schema": {"type": "object", "properties":
      {"filename": {"type": "string", "description": "The file to search for."}, "repo_name":
      {"type": "string", "description": "Optional name of the repository to search
      in if you know it."}}, "required": ["filename"]}}, {"name": "file_search_wildcard",
      "description": "Searches for files in a folder using a wildcard pattern.", "input_schema":
      {"type": "object", "properties": {"pattern": {"type": "string", "description":
      "The wildcard pattern to match files."}, "repo_name": {"type": "string", "description":
      "Optional name of the repository to search in if you know it."}}, "required":
      ["pattern"]}}, {"name": "search_google", "description": "Searches the web with
      Google and returns the answer to a question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to answer."}}, "required": ["question"]}}, {"name": "ask_a_question", "description":
      "Asks your team members a quick question.", "input_schema": {"type": "object",
      "properties": {"question": {"type": "string", "description": "The question you
      want to ask your team."}}, "required": ["question"]}}], "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '27435'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-a0bd52daec1e0790-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
        QnMTNh8iyymB9AAAAAD//wMAW4jo23bjAAA=
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:51:07 GMT
      request-id:
      - req_vrtx_01UodGf937aqziGMRWiM6HWB
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:28 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DBDE0:3AF0E13:677C4250
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14990'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '10'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:28 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DBF9D:3AF1008:677C4250
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14989'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '11'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:51:29 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D2A6:3A3025:39DC198:3AF11F6:677C4251
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14988'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '12'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "Describe the following changes:\n\n--- src/seer/automation/autofix/components/root_cause/models.py\n+++
      src/seer/automation/autofix/components/root_cause/models.py\n@@ -64,8 +64,8
      @@\n     id: int = -1\n     title: str\n     description: str\n-    # unit_test:
      UnitTestSnippet | None = None\n-    # reproduction: str | None = None\n+    unit_test:
      UnitTestSnippet | None = None\n+    reproduction: str | None = None\n     code_context:
      Optional[list[RootCauseRelevantContext]] = None\n \n     def to_markdown_string(self)
      -> str:\n@@ -91,8 +91,8 @@\n class RootCauseAnalysisItemPrompt(BaseModel):\n     title:
      str\n     description: str\n-    # reproduction_instructions: str | None = None\n-    #
      unit_test: UnitTestSnippetPrompt | None = None\n+    reproduction_instructions:
      str | None = None\n+    unit_test: UnitTestSnippetPrompt | None = None\n     relevant_code:
      Optional[RootCauseAnalysisRelevantContext]\n \n     @classmethod\n@@ -100,16
      +100,16 @@\n         return cls(\n             title=model.title,\n             description=model.description,\n-            #
      reproduction_instructions=model.reproduction,\n-            # unit_test=(\n-            #     UnitTestSnippetPrompt(\n-            #         file_path=model.unit_test.file_path,\n-            #         code_snippet=model.unit_test.snippet,\n-            #         description=model.unit_test.description,\n-            #     )\n-            #     if
      model.unit_test\n-            #     else None\n-            # ),\n+            reproduction_instructions=model.reproduction,\n+            unit_test=(\n+                UnitTestSnippetPrompt(\n+                    file_path=model.unit_test.file_path,\n+                    code_snippet=model.unit_test.snippet,\n+                    description=model.unit_test.description,\n+                )\n+                if
      model.unit_test\n+                else None\n+            ),\n             relevant_code=(\n                 RootCauseAnalysisRelevantContext(\n                     snippets=[\n@@
      -131,16 +131,16 @@\n         return RootCauseAnalysisItem.model_validate(\n             {\n                 **self.model_dump(),\n-                #
      \"reproduction\": self.reproduction_instructions,\n-                # \"unit_test\":
      (\n-                #     {\n-                #         \"file_path\": self.unit_test.file_path,\n-                #         \"snippet\":
      self.unit_test.code_snippet,\n-                #         \"description\": self.unit_test.description,\n-                #     }\n-                #     if
      self.unit_test\n-                #     else None\n-                # ),\n+                \"reproduction\":
      self.reproduction_instructions,\n+                \"unit_test\": (\n+                    {\n+                        \"file_path\":
      self.unit_test.file_path,\n+                        \"snippet\": self.unit_test.code_snippet,\n+                        \"description\":
      self.unit_test.description,\n+                    }\n+                    if
      self.unit_test\n+                    else None\n+                ),\n                 \"code_context\":
      (\n                     self.relevant_code.model_dump()[\"snippets\"] if self.relevant_code
      else None\n                 ),\n\nIn the style of:\nDescribe the code changes
      in the following branch for a pull request.\n\nYou must output a title and description
      of the changes in the JSON, follow the format of:\n{\n    \"title\": \"Title
      of the change\",\n    \"description\": \"Description of the change\"\n}", "role":
      "user"}], "model": "gpt-4o-mini", "response_format": {"type": "json_schema",
      "json_schema": {"schema": {"properties": {"title": {"title": "Title", "type":
      "string"}, "description": {"title": "Description", "type": "string"}}, "required":
      ["title", "description"], "title": "ChangeDescriptionOutput", "type": "object",
      "additionalProperties": false}, "name": "ChangeDescriptionOutput", "strict":
      true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=78cbb7de2817461da591465e381b8a9c,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.coding_step.autofix_coding_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '3987'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 78cbb7de2817461da591465e381b8a9c-8e48fd34b2835d3e-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xU22obMRB991cMevGLbRwn9e0tKQ29BUoIbaEuRpZmd6fRSkIz2yYN/vei9WUd
        mkJfFjRn5ugc6WifegCKrFqCMpUWU0c3vKzDzcf7D1fTh68lfb6J9VUR0/s3C/fl+u1MDfJE2PxA
        I4epkQl1dCgU/A42CbVgZj2bnU/PFtPpfNECdbDo8lgZZXgRhjV5Gk7Gk4vheDY8m++nq0AGWS3h
        Ww8A4Kn9Zp3e4oNawnhwqNTIrEtUy2MTgErB5YrSzMSivahBB5rgBX0r/WmlhMThSi1X6hZZQkIL
        jSdZC7KA9hYSxhRsY7I3uCZ0loE83IYg8Fo3jHCTLfFKDVbKIptEMfe2nHcVgqm0L5EhIXlpqdCC
        VAgx4U8KDbtHMKGu0QvaYWgEit0u/aOQfqukfyqln0Vkln5W0grZdx3Xl167RyZ+J1h/SqGO0of2
        +HkEdxUyHjbSCcGHX2CxII8WNENoPWgHUSddo2DiEVxaS7uyexyACyUZsBjRW/QCodXTsVaaYYPo
        oYk2ZwEkQCPk6DfmxhpMSAmNZC7yxjWWfHlwVaNUwTJIpQV2YQLy+S4NMoRiv9XOTuubMZE+kFMC
        q0WPVmp7evUJi4Z1jp9vnNvXt8csuVDGFDa8x4/1gjxxtU6oOficG5YQVYtuewDf28w2z2KoYnvg
        awn36DPhbPZqx6e6p9Khi8kelCDadfX5dDZ4gW9tUTQ5Pkm9MtpUaLvR7onoxlI4AXonrv9W8xL3
        zjn58n/oO8AYjIJ2HRNaMs8dd20J85/kX23HU24FK35kwXpdkC8xxUS7d1zE9VjruT3HyXijetve
        HwAAAP//AwChkGcQ1QQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde961e7b827c03-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:51:31 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=B4Tsom9GCOu.PyS6QOwM11OY1wJS09xzGLquJ8A5SQk-1736196691-1.0.1.1-fwlLfZH.hJg9FyQuwz.77gfkTG0YBW2gycMfmxf9n0.BGixYwt0gL6N3GhnjHBmI2Ee5aB8mLMDuxt9BiWr_cg;
        path=/; expires=Mon, 06-Jan-25 21:21:31 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=9jiUdOyMFAPJobQXf0R4ZrsFEPXFI4_5GVJeBoh6V0Q-1736196691042-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '1244'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149999135'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_511f737f348e7ecf2ff182fdf055f899
    status:
      code: 200
      message: OK
version: 1
