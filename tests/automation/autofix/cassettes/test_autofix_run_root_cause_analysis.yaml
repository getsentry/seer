interactions:
- request:
    body: null
    headers:
      Accept:
      - application/vnd.github.machine-man-preview+json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/installation
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA51Uy3KbMBT9F9a2BQY7hZlMN007XbTZeNGm02FkkLEagVQ9cIkn/94jwIntaZNx
        Njyu7jn36L72AS+DLFnG82UYhpOgEJw1NvfG4HMbzdIkXaZpeRVHV8mijJNgEtCikK6xQbYPhKx4
        A8+KWQOY7nDsoVEM1CKaBI0s2UD25cNNd3ufdnfzj45+U9vyk2jXv24eblffF19XN9eeuKWW6txp
        AcqttcpkhAxGM6u43bq1M0wXsrEINitkTRwZQ71vr722So8k/QVgOCNTfCQa0GAz5Fj81tbiTMAQ
        uPc/9txIIeQO+HO9L4YgTzBoG755U72FArA9kXbLkDBc49Ffnht7oZwesif+hTJ5EoMSaFZeJmkE
        QdCugZY90UzJns2tTaG5slw2F0o7gYJK6oo2/IG+gQpQAwYv6kIRPQRQ1qLjLsQOmD1Rmre06Hw6
        NCsYb5Hdt/CdgUFnO8XQ5rdHmYHVt0PecrbLx3Pl1oIXvhrcspyWtZ/ZDRWGPY5J4VbqLjdMsMKn
        F5xUCAAw6syY3Mp79lr5qFKEN2gEIYYSkcNSIScshzr4kJy9ktJjwr6ncIMeBpaXR/WkW54Hlxhm
        LUbH/Eerv7NS/cZ6F0bJMhn+jXAVkjLsuCl1Vm74H18AqrETevenlTfa/l0bxXTNjfHT4PfnuMrw
        Hew0igPKmllaYg/CpBktYVFOiFyz345hVp88UbqhiYLsx0/sbThbNBbFXg7m4TyZhtE0SldRmiXz
        LI5n2O53IHMK5Cd+0XwahavoKkvCLI4OfgZJEizfcDwaWqPNGshA1qnJaycsVzg4coKwvqN8kz0j
        FbVbnHiBxhnFmhKh192B7NnmZfsAj38BRE3sP5AGAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - W/"066c4b7e1ee34f1a2fdc3da233416c992f37215105e1edb483e84120a925ce31"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; param=machine-man-preview; format=json
      X-GitHub-Request-Id:
      - D27A:FBC7C:3A9AE46:3BB0D5E:677C41DE
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"permissions": {}}'
    headers:
      Accept:
      - application/vnd.github.machine-man-preview+json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '19'
      Content-Type:
      - application/json
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: POST
    uri: https://api.github.com/app/installations/46326000/access_tokens
  response:
    body:
      string: '{"token":"redacted","expires_at":"2025-01-06T21:49:35Z","permissions":{"contents":"write","metadata":"read","pull_requests":"write"},"repository_selection":"all"}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Length:
      - '194'
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - '"23600a91354a8d1a3dcafe22a146808a7d401f87366759a9905914cbea33570b"'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; param=machine-man-preview; format=json
      X-GitHub-Request-Id:
      - D27B:CD9D0:3B5ABF7:3C70825:677C41DF
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 201
      message: Created
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repositories/439438299
  response:
    body:
      string: !!binary |
        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
        3u6z192po7PH/wDEMKQacRkAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - W/"a3645188e7b4f68cc1529c2fb260fe26dcead0f14595c7045fc8e3325aeee464"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5BD42:3D7092B:677C41DF
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14999'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '1'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - metadata=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/branches/main
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:36 GMT
      ETag:
      - W/"c78870d9ccaa2070d83f7a10b1eff9bca24978f7a60a1314e88f190225301bf6"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5BFD4:3D70BAE:677C41DF
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14998'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '2'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
        D1H8li6sbAEA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:36 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5C1A6:3D70DA1:677C41E0
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14997'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '3'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nValidationError:
      1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9013'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-9b01e2c76568b6b7-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAAwAAAP//jJLNa9wwEMXv/ivEnNfF+9Fs4lsOvaSklJRAaFOEVhp71cgaIY1DwrL/
        e5H3w17aQi8+zG/e83uDdoUQYA3UAvRWse6CK287+vwUXu/v3m9XX783MT08um/x7dPdU/vlAWZZ
        QZtfqPmk+qCpCw7Zkj9gHVExZtf5enk1v7n6uF4PoCODLsvawOWKys56Wy6qxaqs1uX8+qjektWY
        oBY/CiGE2A3fnNMbfINaVLPTpMOUVItQn5eEgEguT0ClZBMrzzAboSbP6Ifou2ewSUYillr1CaV2
        qOIz1Bx73E9FEZs+qRzc984d5/tzCkdtiLRJR36eN9bbtJURVSKf/5iYAgx0Xwjxc2jbXxSAEKkL
        LJle0GfD+c3iWBfGK0/wCTKxclPZ8kQuHKVBVtalycVAK71FM2rH86reWJqAYtL7zzh/8z50t779
        H/sRaI2B0cgQ0Vh9WXlci5hf4b/WznceAkN6T4ydbKxvMYZoD2+gCbJS6toscVFtoNgXvwEAAP//
        AwBs3vvIEQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde935fba797d10-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:49:37 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=OnJDi9DOYMuW2mT5AGtkodrk1sS8QXTODSbm7fRU5vU-1736196577-1.0.1.1-zHTcKG4ixlB2GMeTFB48buMp0qNR475g.IpQXr3FQpcgVMBUaYmIwZZBBF1MUdkKDOKVNWhXiHj4Bed36b4NUA;
        path=/; expires=Mon, 06-Jan-25 21:19:37 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=NDUgN3pKhiMuCUTUyNKmRKB70Gs92HKXizjy3l50efc-1736196577660-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '279'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997907'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0f039794058b18908828c299d937aa90
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAC/72SSZeiShCF9/0r6tT6YZkoKr1DZhAUmdlwGJMpARlE6PP++5PqRS9797Y3I+4X
        ETd//fj4+AyiKOl7f2jKpP78+fE5Bzi5CbbU3SbQ8Si0STnfJU++naixpeMgyxJhks1UmAvZY14h
        gRhOuUHu1NXlhHnlq/AReQH9PL5YwLmJxb9s7LkVH0dDI+8mNPd2/njSc4WR8A70/MEQPXaEihFb
        mP28hmhIT93YzCyyDyCbVTEdEd+fBmZAwI7NLmuvHM5z1nThmb4QBpIKaOjKlFXq1J3VOU3gHVzJ
        Qe+dQhkDZxdpPAyuoaUXT2oLjsfPf9atk1ebd0nv5+vOO4Ikv9U+atpkPUI2DG3/8+trmqYNbBpY
        JUGb95uoQV/BOGRfY590eZ02mwQFefXxt/KoasYYa6tgSJsOfbwhdR7/tat/VG/MM4+STdXA96Tf
        M34H5Q/z70HPSdAl3e+XPP6TYjJLWchH+TWXdHMRgZqLvYiG1qPFg1hAwsXNRTXKvbtoOwXnkGJL
        pWvccw+5hGqbuLvAnbK4W9WgZoV5q4jNL7S0TRxq9ZQtoOWptnlj2minrFITC/cpWprnBecKFydB
        WN+XC4qfIR73nk4UIb5dLbKkXi3EnVpo05VxJ9Vg92/MoNbcrAoU7u3OrYqy8a3hkaDtPbsFkQEX
        jy8XleGa2BFH1zlP0UzUIU7WIW+BCLfmN3OMeWuM6T+s2Nb+L9YS2+LKeikMJNTFXdSFIpTC3CuF
        tlwNuFUKca1rviOo1ep9nznRiTac12iswbWrXiyaPEJk49r70bXjLKrjLGTPi2cT26gux8A+rR5V
        aHNtyJG450ith6pq9YwFCXj6lLvOPQ14bglWTskRJmdZIVAfYS3u3C1wwpIcdEDKGopWr9Z13jcq
        2DXu19VwgbqU6zz76N2vGNGiFuKkMOzu6mw3iuYWJCW226s/JsAOWIl9jZNiXK82XdD45XSW0rPM
        hhzUAutU0O28+LQv7fawG4hg3IWvGFOgZrJ2DtBDSy/QQ0ilLyWRgFfbEPE0MF0pHmzjzB1vKMLA
        rDwfD1Pbyw8aI6nUH8+Vp7AwORBHxXc0/lVKTpffI5jxUsKTZ5sTO8q78PgNa7C93RsH9xRSOqfy
        3v44SdAHIIVWxdOBt1tmA9pIjHtGoy/9cD+ZQ5zq1ZHbFmFVUKHL+pNVXQ4cJeSOj6QUNKGg6ksW
        ny4FplqM46HMhP4tvb9/AXqa8vmBtZwspON1zisqA/WYqqYQ4SA5yrJlEN10esQCk53l0KSPetbc
        JGhonz/+/Q+G68dDiwUAAA==
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:39 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK."}]}], "stream": true, "system": "You are an exceptional principal
      engineer that is amazing at finding the root cause of any issue.\n\n\n\n# Guidelines:\n-
      Don''t always assume data being passed is correct, it could be incorrect! Sometimes
      the API request is malformed, or there is a bug on the client/server side that
      is causing the issue.\n\n\n\n- If you are not able to find any potential root
      causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20 word reason
      for why.\n\n- At EVERY step of your investigation, you MUST think out loud!
      Share what you''re learning and thinking along the way, EVERY TIME YOU SPEAK.\n\nIt
      is important that we find the potential root causes of the issue.", "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '10229'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-b6dc6e7f07947a4b-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:49:40 GMT
      request-id:
      - req_vrtx_01VRSa7ps3LXDmqyZyQ6CLEb
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.", "role": "user"}, {"content": "Let me analyze this step by
      step:\n\n1. First, I notice this is a ValidationError for RootCauseAnalysisItem,
      specifically complaining about a missing field. The error message indicates
      \"Field required\" for \"unit_test.snippet\".\n\n2. Looking at the stack trace,
      the error occurs in the to_model() method in src/seer/automation/autofix/components/root_cause/models.py
      when trying to validate a RootCauseAnalysisItem.\n\n3. The variable values show
      we have a RootCauseAnalysisItemPrompt with a title and description about empty
      stacktrace validation, but interestingly, there seems to be missing data in
      the model conversion.\n\n4. Examining the error path, it starts in root_cause_step.py,
      goes through the component.py, and fails in models.py during model validation.\n\n5.
      The key insight is that when converting from RootCauseAnalysisItemPrompt to
      RootCauseAnalysisItem, some required fields are missing in the validation step.\n\n<root_cause>\nTitle:
      Missing Required Field in RootCauseAnalysis Model Validation\n\nDescription:
      \nThe issue occurs during the conversion of a RootCauseAnalysisItemPrompt to
      a RootCauseAnalysisItem model. The validation is failing because a required
      field (unit_test.snippet) is missing in the input data structure.\n\nThe root
      cause appears to be a mismatch between the source prompt model (RootCauseAnalysisItemPrompt)
      and the target model (RootCauseAnalysisItem) validation requirements. While
      the prompt model doesn''t require certain fields, the target model has stricter
      validation rules requiring fields that aren''t being provided during the conversion.\n\nThis
      can be seen in how the conversion is happening:\n\nCode Snippet 1:\nRepository:
      getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/models.py\n```python\ndef
      to_model(self):\n    # *** This line attempts to validate with potentially missing
      required fields\n    return RootCauseAnalysisItem.model_validate(\n        {\n            **self.model_dump(),\n            #
      These commented out lines suggest there should be more fields\n            #
      \"reproduction\": self.reproduction_instructions,\n            # \"unit_test\":
      (\n            #     {\n```\n\nThe commented-out code suggests that there should
      be additional fields being included in the validation, but they''re currently
      commented out. This explains why the validation is failing - the required unit_test.snippet
      field isn''t being included in the data being validated.\n\nTo fix this issue,
      either:\n1. The RootCauseAnalysisItem model needs to be updated to make the
      unit_test.snippet field optional\n2. The to_model() method needs to ensure all
      required fields are included in the conversion\n3. The source prompt model needs
      to capture and provide all required fields for the target model\n\nThe commented-out
      code in the file suggests this was probably working at some point but was broken
      by code changes that commented out necessary field mappings.", "role": "assistant"},
      {"content": "Please format the output properly.\n\nNote: If the provided root
      cause analysis is not formatted properly, such as code snippets missing descriptions,
      you can derive them from the provided root cause analysis.\n\nReturn only the
      formatted root cause analysis:", "role": "user"}], "model": "gpt-4o-2024-08-06",
      "response_format": {"type": "json_schema", "json_schema": {"schema": {"$defs":
      {"RootCauseAnalysisItemPrompt": {"properties": {"title": {"title": "Title",
      "type": "string"}, "description": {"title": "Description", "type": "string"},
      "relevant_code": {"anyOf": [{"$ref": "#/$defs/RootCauseAnalysisRelevantContext"},
      {"type": "null"}]}}, "required": ["title", "description", "relevant_code"],
      "title": "RootCauseAnalysisItemPrompt", "type": "object", "additionalProperties":
      false}, "RootCauseAnalysisRelevantContext": {"properties": {"snippets": {"items":
      {"$ref": "#/$defs/RootCauseRelevantContext"}, "title": "Snippets", "type": "array"}},
      "required": ["snippets"], "title": "RootCauseAnalysisRelevantContext", "type":
      "object", "additionalProperties": false}, "RootCauseRelevantCodeSnippet": {"properties":
      {"file_path": {"title": "File Path", "type": "string"}, "repo_name": {"anyOf":
      [{"type": "string"}, {"type": "null"}], "title": "Repo Name"}, "snippet": {"title":
      "Snippet", "type": "string"}, "start_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "Start Line"}, "end_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "End Line"}}, "required": ["file_path", "repo_name",
      "snippet", "start_line", "end_line"], "title": "RootCauseRelevantCodeSnippet",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantContext":
      {"properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title":
      "Title", "type": "string"}, "description": {"title": "Description", "type":
      "string"}, "snippet": {"anyOf": [{"$ref": "#/$defs/RootCauseRelevantCodeSnippet"},
      {"type": "null"}]}}, "required": ["id", "title", "description", "snippet"],
      "title": "RootCauseRelevantContext", "type": "object", "additionalProperties":
      false}}, "properties": {"cause": {"$ref": "#/$defs/RootCauseAnalysisItemPrompt"}},
      "required": ["cause"], "title": "MultipleRootCauseAnalysisOutputPrompt", "type":
      "object", "additionalProperties": false}, "name": "MultipleRootCauseAnalysisOutputPrompt",
      "strict": true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '14819'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-9dadc59720718415-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4xW224bOQx9z1cQ6sM6gePc2lz8FmRRoFkEyAZ7RaeYyhI9o12NpIpUUiPwvy+k
        mfiSS7F+MGZE8ZA8OiLncQdAGC2mIFQrWXXB7l92/pfQXcfb5tf4Uf1l7q6//X55e3dzbf/+2Ylx
        9vCzf1Dxk9dE+S5YZOMHs4ooGTPq0dnJ6dHF6YeLD8XQeY02uzWB99/7/ePD4/f7h+f7h6eDY+uN
        QhJT+LwDAPBY/nOKTuN3MYXD8dNKh0SyQTFdbQIQ0du8IiSRIZaOxXhtVN4xupL1YyWUTISVmD5W
        gg3b/FiJG0NkXAN3+C2ZiBo+GrQajIM77/kqu1w6aRdkCG5yLfCHtEbLXHolxpXQSCqa0L9PK/Fb
        i2CIEoJXKkUCnWIOwC2C8u4eIxnvwM9BvgzxibG7jb4LDOzf2gCF0wnkSPerZMAQzKWxOdYMS60g
        IT6VNS9ljZIzXDMST8iZEJB3s183kGBcSdO4kBi0ZAnEMSlOESdV5arK5ZjRe4YhQAgoI+VkZzlc
        Z6iTrFqYIT8g9nDkU1QIoa+rJA+jH5S+C9Lp4skyNvhjl91NCoZqO3RME/izNRYLzlZo7ZHcT/y0
        GRRGlsb1DNH4ZeBWUubBKMa4FS1ZpAEms9cDALeSQUbMMWaYDSH6e6NRvy6FFbOGQEmXiaRMnXHQ
        +ofnujEEbWbdGddMiwAjWryXjmvl9SDv4WypEtPPj5UwuhLTo/Gm7Ncihiuv85EP6r5ahXpV3Z/6
        I/3Kvi7kjHa/wjw51SvQvS7YMTwgSGYcdD1wiPBguC14twstHRvVMz5+m1RwfsWqJEINKsWIju0C
        dMJya2aEjgfBdzIE4xqalGoGXnqS5sZiHSS3pTCK6oAQ44FM7LvCTHmcm+8Hudl5l0V1kLVfF+0f
        lFRpEhbDKQRfO9n19DbIOYm4KJjPYmdW57BikNDOd6dV5XLLegd7e3tQtGCNW7FGL2kLPrc2I61d
        rO7v9m2nATMip/jG0UxKDvUT9GhwKZ144zn/9vZypoODTl0Y7Y6fbXmXexJlvXb5DqIGn7gUQkCp
        aZA4H3dEoNYnq7PWOx9xO981WlUVYqPXqSgsv0+hpLG5XBvX9ynjHY1fRVn1vR5i9GJTX3E5KJaR
        65x0vjUnx+NKoNPrhbPl8styudycMxHniWQecy5ZO6wvV4PL+iZEP6PBvlqfG2eorSNK8i4PKWIf
        RLEudwC+lAGZtmae6FtZzf5fdBnw5PDkogcU65m8YT4+GqzsWdoNw8npMFm3IWuNLI2ljSkrlFQt
        6rXveiTLpI3fMOxsFP4yn9ew++KNa/4P/NqgFAZGXYeI2qjtmtfbIuaPlre2rYguCQtaEGNXz41r
        MIZo+u+Geaj18flMSTw7PxY7y53/AAAA//8DAFE11bNACQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde93cfe9197d8c-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:02 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=sBWzbXJCDuUfwlYl4yRrV9NQ5PfBLq_sImFKnyG5yNI-1736196602-1.0.1.1-VW9PN6mnJEQ74TySCrMw08EuQ3JanWkOPEYuFSFs0VMcLSavReXrbQpSp8eF0Jm1L6CgeP5X.f2ev_5yAI7Ggg;
        path=/; expires=Mon, 06-Jan-25 21:20:02 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=MnTbmZfIVYayhZQxWQe6nG3rP4aF33uTyxoE1BEBU0s-1736196602624-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '7253'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29996914'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 6ms
      x-request-id:
      - req_e806dbde59583d2ea23b54b0029befcc
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        BGrn/C/8H4E///wPP/XDWvohAAA=
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:02 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C62974:3D77733:677C41E0
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14996'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '4'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
version: 1
