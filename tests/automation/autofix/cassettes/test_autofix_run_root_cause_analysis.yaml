interactions:
- request:
    body: null
    headers:
      Accept:
      - application/vnd.github.machine-man-preview+json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/installation
  response:
    body:
      string: !!binary |
        H4sIAJWsfmcC/51UTY+bMBT8KyvOTYDAZkukVS/dVj20e8mh3aqyHHgh7hrb9QcpG+W/99mQhESq
        2uwFxGNmPB4/v13Eqmhxk8+z2TxJkjc3UckZCEtCOfrUptMiL+ZFUd1l6V1+W2V5hCBaltIJi5Bd
        xGXNhAfXYA1SdecRgZ9mSL1N8VPICgbNz+8fusfnonuafXD0q9pUH3m7+vnw8rj8dvtl+XAf9Ftq
        qSZOc8/YWKvMIo77qpnWzG7cyhnQpRQWl5yWsoldPCz3rr0PJms9yPTr+tKloGKDWK+AiiY+28bG
        NvzSxohxhl1LzuUWJchVy8RH3kmEifpVIsjbxdJuALNDwD7EwIy91lLg7MIL0wsyBpPUUF0pNLDQ
        1Fagn12sQclez61MqZmyTIpr7Z1xvZjUNRXshb5GDLlBwzu7lhs4ngwtFq5l96RdrDRradntexcl
        sBZzfpXiBdsL2k6BV3gcRRSuAlJJy2BLDgjlVpyV4WyYBUKrJtzrNeUG9oeAmJW6IwY4lEEJeZTz
        YSaAMcTKZzidAZ49LS1U0ZjP4F/7YgIbh/NgNh7z/uNOnvXCuGnAWrwf5kzcxIfRF7agVD8s3iZp
        Ps+HiuGu9mv1OhPqrFyz3yFbqlGfXMy6ofq34BXohhkTWtfPz2GG+Y9oqzF5D2rA0gqHV58hDfkp
        xznR8MuBGaP3x/bD2vcffoQjAzMn1A/oaJbM8kmSTtJimRaLfLbIsinu9yk0gaoukelskibL9G6R
        J4ssPSINRseBrBk+BG38zgT68cdBDWkct0zhrxHMHHrngq2o3RytGmcUiAotrLqT5KkajPnq/g8d
        oTKPqgYAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - W/"066c4b7e1ee34f1a2fdc3da233416c992f37215105e1edb483e84120a925ce31"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; param=machine-man-preview; format=json
      X-GitHub-Request-Id:
      - D27A:FBC7C:3A9AE46:3BB0D5E:677C41DE
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"permissions": {}}'
    headers:
      Accept:
      - application/vnd.github.machine-man-preview+json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '19'
      Content-Type:
      - application/json
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: POST
    uri: https://api.github.com/app/installations/46326000/access_tokens
  response:
    body:
      string: '{"token":"redacted","expires_at":"2025-01-06T21:49:35Z","permissions":{"contents":"write","metadata":"read","pull_requests":"write"},"repository_selection":"all"}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - public, max-age=60, s-maxage=60
      Content-Length:
      - '194'
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - '"23600a91354a8d1a3dcafe22a146808a7d401f87366759a9905914cbea33570b"'
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; param=machine-man-preview; format=json
      X-GitHub-Request-Id:
      - D27B:CD9D0:3B5ABF7:3C70825:677C41DF
      X-XSS-Protection:
      - '0'
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 201
      message: Created
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repositories/439438299
  response:
    body:
      string: !!binary |
        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
        WO3gWXEe7m7tXsvHV8//AHN47DOUGgAA
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:35 GMT
      ETag:
      - W/"a3645188e7b4f68cc1529c2fb260fe26dcead0f14595c7045fc8e3325aeee464"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5BD42:3D7092B:677C41DF
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14999'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '1'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - metadata=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/branches/main
  response:
    body:
      string: !!binary |
        H4sIAJWsfmcC/+1Ya3OjOBb9K5T3y0yl07zBdM3sDn7h9/sRezzlEiAMGAQGYWyn8t9X4NjtpHuq
        46R3Pm2+JJF0zr1Xukf3oscCAj4sfKEKPnBQ4RNVMALfdzAZeSzENshmoC4JLKNIBmAVixcEFiqc
        ZSisLltiUReKgDUkU9LZDI0CE64cM4OVV5u00tPcWptTArWlTZ2uO9h3KhtuzlX3vdn82K0M9ovx
        5rDwO2Jn1uAX7kSYuwNhPq65XX/Azd3qK49Agu0gyv88+z0MbIAodQ2iFHjZckgi8bIZQS5KLK8o
        d1EA1uCPJIZR/BkFEQy9w+e1g+1E/0y4M4wJcE7GMZx4z7D3jDRmlS8s80XgF4Wniw8YvrStObie
        6C+MPvP/cSO/D+MYrPM1FgT4FxJoYDn7X79QHbCBMeUgYtuFBnYCdPoHXP0dJSGm2u0OFeMIAp+y
        gojyiSNUBOMwQLGzg4gYoH75FysVpV+XaIlKkCyCnyhsw78nt4FJ4YBKgYNzzsyEATwvJqNLRGIL
        PYghpedcFFlEcAmZP3x1C5qfqW6QEjsAUykklDv47KaD1p/IECEC13H4iWFT28QxNjCiADIpn+zA
        Vz+fXXsVXu5QtiY75c/ZlhMT8DqLFZlhBVnSGchLusXKvCGwBoScIpkQCoIgyaLJcxKTYZMoP0sb
        4zD+QtMgdK7yhSYHHMT0GuIYIhwd6BjCiCbzdGYypt9s6On9lk7pGNO3SDPDEJqVESQoUxNDxnYw
        cizHANmW5pt1GoCZgHGUkPwokJOK88nCDnhE2WQodtYI4CTK0/U++ylVtUaX6mt9atTQuup4Mqzm
        41mmpXHNKKlqqayqg9Kgiazy9lgellkwkJNEnNieqqrtw3ygaqCxgZ1RSeFF+q4kzOoMrh04Zok6
        tep+1uvcqa1hK1Qb89ZRqLVmxk5JyjJ3nN1VrXTKd+3tsWbMvDKDUi4+TDq4W983+UZ/cLdEgskM
        taNwmDQwV6WLZjotyZYxYrm6qfnrBeNghg+YTUdgHtzyorxpStumynajddjylE5DWiK5v9XmnCrM
        m0fMK1W5V9f96bqn9jU0MvfKvJwUUXnXVB0nnspjZ0R7biJrG7vBjoad/oBEwfXDSX1WRqpsHcUJ
        51Sm3Yd04R/b5eOupRfX8latiy3akpqMVR9MNnEStBddsccqqtxXINEJaBxqZU4Y05uNs9FaipOM
        56VUaFXVUFErRrsX9WqsrfVbg3JVr/VHHiOmjThFWtOujxbuYolqrCgvPK+0mzp9xOx38/kDJ3Um
        tCovtnhsu+5WtB9GDU6IQmGHuW1zCu+GBi6OKy4XsmF9ifbqDHClmbnAKLFqlbv1ZiC1/NpuJKtl
        w2qPtSg+gsFCfyhLrQ6/CTU+5iuRXdpOD/3qHJGdrClFbfeQRHNvozLuLtbroHgoiTh1+SG7r7Xq
        eKtpDTS3enZ6WJuW5cRDHNRbnT6eypE8X6JxIAznvrlHbomLo8l6pnG99UN7GCXtg5R0cUDvlWNs
        9WrpumqhmjubaLW6q/rcuFKuBh1ziVoQ+xW37lozvjRiHG2vLwYzD6fJcW/1QanSVQdxgLv2eLhL
        Da7mT7vMPNL3bWm4G7ltgV8i2Cpjd542+1Vh293bftI8CEv0e88sFZcoz/1qt/JdRWQKCsHBC0Be
        JrNLg3rrnbFEIYiIiKkiw1mKzjOsyDFWkYcSb0m6IEOJZUSOk8yiaEBWFLKkyUsm9aJMUr+9sTb+
        myK+SKzCSAJP3TMiw+TX/qkUUqfyR/32bc17hStmuCX6f2X7KZXtfEevAP5+TyGSnuKdxeU9hcXG
        vrd6ZevKznctvKdyxat/ICD6bCwzfNVuesHayatgLphsMu9yzzp62fp2KgNp+tD1DHfA9yrzfee4
        EXO+HcAg+iaMfDR+DiU7ZiMg+YBwHlVCn238Z/e7kLGso2eek7EfNyy5uumL4z84r8s6K/C8ICXQ
        1Zvp6QvmKwERw80EBPNIByTryWaRyac8bCfGt7iSr3/Mf5GdyilismsREc7bSZ4RxJkUET8e8yQ7
        cSV6bEROmGn2Frde4DKiIFoD5BzBrUQEl+PztL8Bl6/Pv1l2bxDVNfIEeKTDyNkB4/B0sm5AckuZ
        q5vZXiHznv0Q5j3lhCzL05r8Xu0cmK7OM2Gie45xakIxXAHTz1VpAS+G336nXUSbQv3eInl10S2r
        FCVSV+W/021VJLplyAcq/37dnm18ULfXvv9AutdLb1PvGfkRAb/i+JiGL2QflPGF52cq+Svpx8V8
        4bpdzxfoeyR9Af8sVV958z8Q9qnvjcnQn5dP+rc2wYWP9UK3mHlXL/RmA09/ZVux8hy0iU9vG9Cz
        bg1LjwAybBjT5xe/zOe3+Zt9q5xg+ZFEASat9fVjwfPQ+TUBIqB7Lx8TSPubSZeoESfxivhhPIcC
        EWm1DZg/UXgkc55f09ApFeJTH0iu1/0pCQp64nhm4a9s+ExCMuN5SYY9Lchu7zA8XbmsyEtFsodP
        Lzx9T1f5Yg/pq6if/gsV8wuXURUAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:36 GMT
      ETag:
      - W/"c78870d9ccaa2070d83f7a10b1eff9bca24978f7a60a1314e88f190225301bf6"
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5BFD4:3D70BAE:677C41DF
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14998'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '2'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/git/trees/eb641096ca19f3441e92fc91b7f58b48a1c6d6b1?recursive=1
  response:
    body:
      string: !!binary |
        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
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=86400, s-maxage=86400
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:36 GMT
      ETag:
      - W/"5f27478af4117ed79b27b68f8a3780839a491d99ec4b2d8e2467fd6e78e3b882"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:47 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C5C1A6:3D70DA1:677C41E0
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14997'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '3'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You are an exceptional principal engineer that
      is amazing at finding the root cause of any issue. We have an issue in our codebase
      described below. Is the root cause of the issue clear from the details below?
      Or does it require searching for more information around the codebase?\n\nValidationError:
      1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------", "role": "user"}], "model": "gpt-4o-mini", "response_format":
      {"type": "json_schema", "json_schema": {"schema": {"properties": {"is_root_cause_clear":
      {"title": "Is Root Cause Clear", "type": "boolean"}}, "required": ["is_root_cause_clear"],
      "title": "IsRootCauseObviousOutput", "type": "object", "additionalProperties":
      false}, "name": "IsRootCauseObviousOutput", "strict": true}}, "stream": false,
      "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '9013'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-9b01e2c76568b6b7-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJWsfmcC/31Ry04DMQz8FZQzi7YP+rr1wKUIhIqQKiiK0qy7DWTjKPaiVtX+O8mWQisBN2c8
        Mxnbe2EKMbkQeqNYV95m0wpvF/7jbrab9h+e14HmT/YxbG9mi/J+Li4vBK7eQPNRc6UxqoANutTU
        ARRDcuwMe4POeHA9HEa4wgJskpSesz5mlXEm6+bdfpYPs86oVW7QaKBIetkL4wrYxjJPWiBSJcTX
        XgS0qRCKyBArx60SHYNrE+2XwpAMiCy1qgmktqDCUkw41NAkcoB1TSplcbW1TUQslj7gir6giKxj
        OtrIOArFqaItMXrRvMZW/R0lairPkvEdXNJ2xt28DXNcx0krNRhZ2VN6L6FnLrIAVsZS66+V3kDx
        I0hsVRcGT6Dmtw/PXA4zGFf+b5QgrcHH00kfoDD6fIK83Vy6+1+EJmWhHTFUMu6vhOCDORxl7WWu
        1KjoQTdfieYTleE6DHICAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde935fba797d10-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:49:37 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=OnJDi9DOYMuW2mT5AGtkodrk1sS8QXTODSbm7fRU5vU-1736196577-1.0.1.1-zHTcKG4ixlB2GMeTFB48buMp0qNR475g.IpQXr3FQpcgVMBUaYmIwZZBBF1MUdkKDOKVNWhXiHj4Bed36b4NUA;
        path=/; expires=Mon, 06-Jan-25 21:19:37 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=NDUgN3pKhiMuCUTUyNKmRKB70Gs92HKXizjy3l50efc-1736196577660-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '279'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '30000'
      x-ratelimit-limit-tokens:
      - '150000000'
      x-ratelimit-remaining-requests:
      - '29999'
      x-ratelimit-remaining-tokens:
      - '149997907'
      x-ratelimit-reset-requests:
      - 2ms
      x-ratelimit-reset-tokens:
      - 0s
      x-request-id:
      - req_0f039794058b18908828c299d937aa90
    status:
      code: 200
      message: OK
- request:
    body: grant_type=refresh_token&client_id=764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '268'
      Content-Type:
      - application/x-www-form-urlencoded
      User-Agent:
      - python-requests/2.32.2
      x-goog-api-client:
      - gl-python/3.11.0rc1 auth/2.37.0 cred-type/u
    method: POST
    uri: https://oauth2.googleapis.com/token
  response:
    body:
      string: !!binary |
        H4sIAJWsfmcC/4WPMQ7CMAxFrxJlhmRADO1lqshxW4u0DrFLQYi7k8LCgNTV/l//vacNACjSKV9w
        tq2xBWMAxWgPxuI9U0HpaPuczk1TbwKccQuOqlla79d1dQPzkDBkEgc8+bDo6BfBQnPPDqdAyezF
        IfESjzkF7blMpo7MFHdbck115kaALvFQOSvhR6XTxxfz14fiH8/XGwiM6e4EAQAA
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Cache-Control:
      - no-cache, no-store, max-age=0, must-revalidate
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:49:39 GMT
      Expires:
      - Mon, 01 Jan 1990 00:00:00 GMT
      Pragma:
      - no-cache
      Server:
      - scaffolding on HTTPServer2
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
    status:
      code: 200
      message: OK
- request:
    body: '{"max_tokens": 8192, "messages": [{"role": "user", "content": [{"type":
      "text", "text": "You have the following repositories to work with:\n- getsentry/seer\n\nGiven
      the issue: \nValidationError: 1 validation error for RootCauseAnalysisItem\nExceptions:\n<exception_0
      is_exception_handled=\"no\" type=\"ValidationError\" message=\"1 validation
      error for RootCauseAnalysisItem\nunit_test.snippet\n  Field required [type=missing,
      input_value={''file_path'': ''src/test/s...d validation behavior.''}, input_type=dict]\n    For
      further information visit https://errors.pydantic.dev/2.6/v/missing\">\n to_model
      in file src/seer/automation/autofix/components/root_cause/models.py in repo
      getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK."}]}], "stream": true, "system": "You are an exceptional principal
      engineer that is amazing at finding the root cause of any issue.\n\n\n\n# Guidelines:\n-
      Don''t always assume data being passed is correct, it could be incorrect! Sometimes
      the API request is malformed, or there is a bug on the client/server side that
      is causing the issue.\n\n\n\n- If you are not able to find any potential root
      causes, return only <NO_ROOT_CAUSES> followed by a specific 10-20 word reason
      for why.\n\n- At EVERY step of your investigation, you MUST think out loud!
      Share what you''re learning and thinking along the way, EVERY TIME YOU SPEAK.\n\nIt
      is important that we find the potential root causes of the issue.", "anthropic_version":
      "vertex-2023-10-16"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '10229'
      content-type:
      - application/json
      host:
      - us-east5-aiplatform.googleapis.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-b6dc6e7f07947a4b-1
      user-agent:
      - AnthropicVertex/Python 0.34.2
      x-stainless-arch:
      - arm64
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 0.34.2
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://us-east5-aiplatform.googleapis.com/v1/projects/ml-ai-420606/locations/us-east5/publishers/anthropic/models/claude-3-5-sonnet-v2@20241022:streamRawPredict
  response:
    body:
      string: !!binary |
        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
    headers:
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Content-Encoding:
      - gzip
      Content-Type:
      - text/event-stream; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Origin
      - X-Origin
      - Referer
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - '0'
      cache-control:
      - no-cache
      date:
      - Mon, 06 Jan 2025 20:49:40 GMT
      request-id:
      - req_vrtx_01VRSa7ps3LXDmqyZyQ6CLEb
      server:
      - hypercorn-h11
      x-accel-buffering:
      - 'no'
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"content": "You have the following repositories to work
      with:\n- getsentry/seer\n\nGiven the issue: \nValidationError: 1 validation
      error for RootCauseAnalysisItem\nExceptions:\n<exception_0 is_exception_handled=\"no\"
      type=\"ValidationError\" message=\"1 validation error for RootCauseAnalysisItem\nunit_test.snippet\n  Field
      required [type=missing, input_value={''file_path'': ''src/test/s...d validation
      behavior.''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing\">\n
      to_model in file src/seer/automation/autofix/components/root_cause/models.py
      in repo getsentry/seer [Line 130] (In app)\n                else None\n            ),\n        )\n\n    def
      to_model(self):\n        return RootCauseAnalysisItem.model_validate(  <-- SUSPECT
      LINE\n            {\n                **self.model_dump(),\n                #
      \"reproduction\": self.reproduction_instructions,\n                # \"unit_test\":
      (\n                #     {\n---\nVariable values at the time of the exception:\n{\n  \"self\":
      \"RootCauseAnalysisItemPrompt(title=''Empty Stacktrace Validation Failure in
      GroupingRequest Model'', description=\\\"The issue is occurring because the
      incoming request contains an empty stacktrace value, which violates the Pydantic
      model validation rules for GroupingRequest. The validation system is explicitly
      configured to reject empty stacktraces, but the client is sending an empty string
      ('''') instead of a valid stacktrace.\\\\n\\\\nThis represents a contract violation
      between the client and server, where the server expects a non-empty stacktrace
      for grouping operations, but the client is not providing one. This is likely
      either a client-side bug where the stacktrace is being lost/cleared before submission,
      or a misunderstanding of the API requirements by the client implementation.\\\\n\\\\nTo
      fix this, either:\\\\n1. The client needs to ensure it always sends a valid
      stacktrace.\\\\n2. The validation rules need to be adjusted if empty stacktraces
      are actually valid in some cases.\\\\n3. Better error messaging should be added
      to ...\"\n}\n------\n invoke in file src/seer/automation/autofix/components/root_cause/component.py
      in repo getsentry/seer [Line 122] (In app)\n                    response_format=MultipleRootCauseAnalysisOutputPrompt,\n                    run_name=\"Root
      Cause Extraction & Formatting\",\n                )\n\n                # Assign
      the ids to be the numerical indices of the causes and relevant code context\n                cause_model
      = formatted_response.parsed.cause.to_model()  <-- SUSPECT LINE\n                cause_model.id
      = 0\n                if cause_model.code_context:\n                    for j,
      snippet in enumerate(cause_model.code_context):\n                        snippet.id
      = j\n\n---\nVariable values at the time of the exception:\n{\n  \"formatted_response\":
      \"LlmGenerateStructuredResponse(parsed=MultipleRootCauseAnalysisOutputPrompt(cause=RootCauseAnalysisItemPrompt(title=''Empty
      Stacktrace Validation Failure in GroupingRequest Model'', description=\\\"The
      issue is occurring because the incoming request contains an empty stacktrace
      value, which violates the Pydantic model validation rules for GroupingRequest.
      The validation system is explicitly configured to reject empty stacktraces,
      but the client is sending an empty string ('''') instead of a valid stacktrace.\\\\n\\\\nThis
      represents a contract violation between the client and server, where the server
      expects a non-empty stacktrace for grouping operations, but the client is not
      providing one. This is likely either a client-side bug where the stacktrace
      is being lost/cleared before submission, or a misunderstanding of the API requirements
      by the client implementation.\\\\n\\\\nTo fix this, either:\\\\n1. The client
      needs to ensure it always sends a ...\"\n}\n------\n wrapper in file src/seer/dependency_injection.py
      in repo getsentry/seer [Line 235] (In app)\n                    try:\n                        new_kwds[k]
      = resolve(argspec.annotations[k])\n                    except KeyError:\n                        raise
      AssertionError(f\"Cannot inject argument {k} as it lacks annotations\")\n\n        return
      c(*args, **new_kwds)  # type: ignore  <-- SUSPECT LINE\n\n    if inspect.isclass(original_type):\n        return
      type(original_type.__name__, (original_type,), dict(__init__=wrapper))  # type:
      ignore\n\n    return wrapper  # type: ignore\n---\nVariable values at the time
      of the exception:\n{\n  \"args\": [\n    \"<seer.automation.autofix.components.root_cause.component.RootCauseAnalysisComponent
      object at 0x7f8a86cb5650>\",\n    \"RootCauseAnalysisRequest(event_details=EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                ...\"\n  ],\n  \"argspec\":
      [\n    [\n      \"''self''\",\n      \"''request''\",\n      \"''llm_client''\"\n    ],\n    \"None\",\n    \"None\",\n    [\n      \"<seer.dependency_injection._Injected
      object at 0x7f8b44a59210>\"\n    ],\n    [],\n    \"None\",\n    {\n      \"llm_client\":
      \"<class ''seer.automation.agent.client.LlmClient''>\",\n      \"request\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisRequest''>\",\n      \"return\":
      \"<class ''seer.automation.autofix.components.root_cause.models.RootCauseAnalysisOutput''>\"\n    }\n  ],\n  \"d\":
      \"<seer.dependency_injection._Injected object at 0x7f8b44a59210>\",\n  \"i\":
      \"0\",\n  \"new_kwds\": {\n    \"llm_client\": \"<seer.automation.agent.client.LlmClient
      object at 0x7f8c298ea050>\"\n  }\n}\n------\n _invoke in file src/seer/automation/autofix/steps/root_cause_step.py
      in repo getsentry/seer [Line 69] (In app)\n\n        summary = state.request.issue_summary\n        if
      not summary:\n            summary = self.context.get_issue_summary()\n\n        root_cause_output
      = RootCauseAnalysisComponent(self.context).invoke(  <-- SUSPECT LINE\n            RootCauseAnalysisRequest(\n                event_details=event_details,\n                instruction=state.request.instruction,\n                summary=summary,\n                initial_memory=self.request.initial_memory,\n---\nVariable
      values at the time of the exception:\n{\n  \"event_details\": \"EventDetails(title=''ValidationError:
      1 validation error for GroupingRequest'', exceptions=[ExceptionDetails(type=''ValidationError'',
      value=\\\"1 validation error for GroupingRequest\\\\nstacktrace\\\\n  Value
      error, stacktrace must be provided and not empty. [type=value_error, input_value='''',
      input_type=str]\\\\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error\\\",
      stacktrace=Stacktrace(frames=[StacktraceFrame(function=''wrapper'', filename=''src/seer/json_api.py'',
      abs_path=''/app/src/seer/json_api.py'', line_no=132, col_no=None, context=[(127,
      ''            if not isinstance(data, dict):''), (128, ''                sentry_sdk.capture_message(f\\\"Data
      is not an object: {type(data)}\\\")''), (129, ''                raise BadRequest(\\\"Data
      is not an object\\\")''), (130, ''''), (131, ''            try:''), (132, ''                result:
      BaseModel = implementation(request_annotation.model_validate(data))''), (133,
      ''            except ValidationError as e:''), (134, ''                sentry_sdk.capture_exception(e)''),
      (135...\",\n  \"self\": \"<seer.automation.autofix.steps.root_cause_step.RootCauseStep
      object at 0x7f8c29a404d0>\",\n  \"state\": \"[Filtered]\"\n}\n------\n\n</exception0>\n----------\nEvent
      Logs:\n\n----------\n\n\n\nWhen ready with your final answer, detail the potential
      root cause of the issue.\n\n# Guidelines:\n- The root cause should be inside
      its own <root_cause> block.\n- Include a title and description in the root cause.
      Your description may be as long as you need to help your team understand the
      issue, explaining the issue, the root cause, why this is happening, and how
      you came to your conclusion.\n- In the root cause, provide snippets of the original
      code, each with their own titles and descriptions, to highlight where and why
      the issue is occurring so that your colleagues fully understand the root cause.
      Provide as many snippets as you want. Within your snippets, you may highlight
      specific lines with a comment beginning with ***.\n- You MUST include the EXACT
      file name and repository name in the code snippets you provide. If you cannot,
      do not provide a code snippet.\n- At EVERY step of your investigation, you MUST
      think out loud! Share what you''re learning and thinking along the way, EVERY
      TIME YOU SPEAK.", "role": "user"}, {"content": "Let me analyze this step by
      step:\n\n1. First, I notice this is a ValidationError for RootCauseAnalysisItem,
      specifically complaining about a missing field. The error message indicates
      \"Field required\" for \"unit_test.snippet\".\n\n2. Looking at the stack trace,
      the error occurs in the to_model() method in src/seer/automation/autofix/components/root_cause/models.py
      when trying to validate a RootCauseAnalysisItem.\n\n3. The variable values show
      we have a RootCauseAnalysisItemPrompt with a title and description about empty
      stacktrace validation, but interestingly, there seems to be missing data in
      the model conversion.\n\n4. Examining the error path, it starts in root_cause_step.py,
      goes through the component.py, and fails in models.py during model validation.\n\n5.
      The key insight is that when converting from RootCauseAnalysisItemPrompt to
      RootCauseAnalysisItem, some required fields are missing in the validation step.\n\n<root_cause>\nTitle:
      Missing Required Field in RootCauseAnalysis Model Validation\n\nDescription:
      \nThe issue occurs during the conversion of a RootCauseAnalysisItemPrompt to
      a RootCauseAnalysisItem model. The validation is failing because a required
      field (unit_test.snippet) is missing in the input data structure.\n\nThe root
      cause appears to be a mismatch between the source prompt model (RootCauseAnalysisItemPrompt)
      and the target model (RootCauseAnalysisItem) validation requirements. While
      the prompt model doesn''t require certain fields, the target model has stricter
      validation rules requiring fields that aren''t being provided during the conversion.\n\nThis
      can be seen in how the conversion is happening:\n\nCode Snippet 1:\nRepository:
      getsentry/seer\nFile: src/seer/automation/autofix/components/root_cause/models.py\n```python\ndef
      to_model(self):\n    # *** This line attempts to validate with potentially missing
      required fields\n    return RootCauseAnalysisItem.model_validate(\n        {\n            **self.model_dump(),\n            #
      These commented out lines suggest there should be more fields\n            #
      \"reproduction\": self.reproduction_instructions,\n            # \"unit_test\":
      (\n            #     {\n```\n\nThe commented-out code suggests that there should
      be additional fields being included in the validation, but they''re currently
      commented out. This explains why the validation is failing - the required unit_test.snippet
      field isn''t being included in the data being validated.\n\nTo fix this issue,
      either:\n1. The RootCauseAnalysisItem model needs to be updated to make the
      unit_test.snippet field optional\n2. The to_model() method needs to ensure all
      required fields are included in the conversion\n3. The source prompt model needs
      to capture and provide all required fields for the target model\n\nThe commented-out
      code in the file suggests this was probably working at some point but was broken
      by code changes that commented out necessary field mappings.", "role": "assistant"},
      {"content": "Please format the output properly.\n\nNote: If the provided root
      cause analysis is not formatted properly, such as code snippets missing descriptions,
      you can derive them from the provided root cause analysis.\n\nReturn only the
      formatted root cause analysis:", "role": "user"}], "model": "gpt-4o-2024-08-06",
      "response_format": {"type": "json_schema", "json_schema": {"schema": {"$defs":
      {"RootCauseAnalysisItemPrompt": {"properties": {"title": {"title": "Title",
      "type": "string"}, "description": {"title": "Description", "type": "string"},
      "relevant_code": {"anyOf": [{"$ref": "#/$defs/RootCauseAnalysisRelevantContext"},
      {"type": "null"}]}}, "required": ["title", "description", "relevant_code"],
      "title": "RootCauseAnalysisItemPrompt", "type": "object", "additionalProperties":
      false}, "RootCauseAnalysisRelevantContext": {"properties": {"snippets": {"items":
      {"$ref": "#/$defs/RootCauseRelevantContext"}, "title": "Snippets", "type": "array"}},
      "required": ["snippets"], "title": "RootCauseAnalysisRelevantContext", "type":
      "object", "additionalProperties": false}, "RootCauseRelevantCodeSnippet": {"properties":
      {"file_path": {"title": "File Path", "type": "string"}, "repo_name": {"anyOf":
      [{"type": "string"}, {"type": "null"}], "title": "Repo Name"}, "snippet": {"title":
      "Snippet", "type": "string"}, "start_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "Start Line"}, "end_line": {"anyOf": [{"type": "integer"},
      {"type": "null"}], "title": "End Line"}}, "required": ["file_path", "repo_name",
      "snippet", "start_line", "end_line"], "title": "RootCauseRelevantCodeSnippet",
      "type": "object", "additionalProperties": false}, "RootCauseRelevantContext":
      {"properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title":
      "Title", "type": "string"}, "description": {"title": "Description", "type":
      "string"}, "snippet": {"anyOf": [{"$ref": "#/$defs/RootCauseRelevantCodeSnippet"},
      {"type": "null"}]}}, "required": ["id", "title", "description", "snippet"],
      "title": "RootCauseRelevantContext", "type": "object", "additionalProperties":
      false}}, "properties": {"cause": {"$ref": "#/$defs/RootCauseAnalysisItemPrompt"}},
      "required": ["cause"], "title": "MultipleRootCauseAnalysisOutputPrompt", "type":
      "object", "additionalProperties": false}, "name": "MultipleRootCauseAnalysisOutputPrompt",
      "strict": true}}, "stream": false, "temperature": null}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate
      authorization:
      - redacted
      baggage:
      - sentry-trace_id=90715acd1ae140ce9b638e2f25a45f8a,sentry-environment=production,sentry-transaction=seer.automation.autofix.steps.root_cause_step.root_cause_task,sentry-sample_rate=1.0,sentry-sampled=true
      connection:
      - keep-alive
      content-length:
      - '14819'
      content-type:
      - application/json
      host:
      - api.openai.com
      sentry-trace:
      - 90715acd1ae140ce9b638e2f25a45f8a-9dadc59720718415-1
      user-agent:
      - OpenAI/Python 1.57.4
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - 'false'
      x-stainless-helper-method:
      - beta.chat.completions.parse
      x-stainless-lang:
      - python
      x-stainless-os:
      - Linux
      x-stainless-package-version:
      - 1.57.4
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.11.0rc1
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAJWsfmcC/31W227bOBD9FUJ9WDtwHMdpc3sLsijQLAKkwW53F3Wh0tTI4q5EqrwkNQL/e89Q
        smPnJviBHHLOzByeIf2Q6SI7F5mqZFBNW+9fNPaPtrlyN4vP7qP6R99e/fjr4ub2+qr+93eTjURm
        5/+RCmufsbLwoqBtWlSOZCBGPDw5Oj48O/5w9gHmxhZUs8uiDfvv7f50Mn2/Pzndnxwnp8pqRR7r
        Xx8ybQr6ieGE3ch7uSDMHjJnax5k0nvtgzQheVoTyKRkHmaZktHTLDvHMOhQ83CWXWs4mIW4pR9R
        OyrER011IbQRt9aGS3a5MLJeAlVcc5rii6x1IbmiWTaaZQV55XTbzQH4Z0UCmJGEVSo6L4roOECA
        HfnckfPYKmwp5PMQnwI1Nw6UBRHsaxtEomssONLdJhkEFaXUNceaU6oVAG5dVpnKGkSjQx7Ih7E3
        um0pDNmv6UlA1ZymNm0MArBS+OCiCtHReDYz+HFMh6REHwAQEjUi2TmHA1ADoVSYhXuiDs7b6BSJ
        tqsrJS8Gb5Q+FNIUyTNIt6C3XYbbFPTVNjhzPxZ/V7qmhLMTurDkzW9hvVkockGi8sSQHz0PXEnP
        PGgVyO1EizX5HobZ6wDgL4OQjjjGnHgB4e90gUN4UQobZnEQShom0jN1SKmy9091g00Vs24AdJ4E
        6KimOwg+V8i2k3d/th6zr5jqAoPD0bbsH0UsLuHGwTp1X25CvajuT92Rfg82T+QMht9FGY3qFGhe
        FuxI3EMcAaNO1z2HJO51qBLezbJABVp1jI9eJ1UYu2EVrQ5O0WPgOtRLsEupa+Ye817wDbjCZj9O
        1fS8dCSVUEfeylClwrxTB6DdHcgYbJOYScNS/zzgO8waFtUBaz9P2j9Iqfpxu+xPobW5kU1HL8TD
        SbhlwnwSm1ktxYZBT3U5PIcCBL53Ym9vTyQtoJM3rPnntLWWrzYta1S+7t/dbvc9piM08CtHM045
        5GvoQe/C38PWmL+9Pc60dyhi0w6Goydb3vGd5FmvDfcgErG4SLgQdFBcLHDv8HHjGH1lI44HWm8s
        pjv5PqLNZolYZ4uYFMbzc5HS2Dbn2nT3FMZ+9CLK5t7rIAbPNnUVp4NC84eck+auOZrCRKZ4NJys
        Vt9WqxW/L47K6CW/XCbW9QqW2i6Q19z3JlhKbbSvcjx8Hm8gXiIfbJutvmEpbl6v7oLKg/2fDPse
        TY7O0vu1fjy3lqaHWAk2yHrLeHTMD+IOTF4Q7rXapwBKqoqKRwfeLWOh7ZZp9VLEHZSuCCjtbSA2
        KUUtBJC3kKNWuyVMEnX8N+G1DSvOxS89FJqDwAW5FrdBesjLNi+mp3Ml6eR0mq1+AVhlVAihCAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 8fde93cfe9197d8c-LAX
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 06 Jan 2025 20:50:02 GMT
      Server:
      - cloudflare
      Set-Cookie:
      - __cf_bm=sBWzbXJCDuUfwlYl4yRrV9NQ5PfBLq_sImFKnyG5yNI-1736196602-1.0.1.1-VW9PN6mnJEQ74TySCrMw08EuQ3JanWkOPEYuFSFs0VMcLSavReXrbQpSp8eF0Jm1L6CgeP5X.f2ev_5yAI7Ggg;
        path=/; expires=Mon, 06-Jan-25 21:20:02 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=MnTbmZfIVYayhZQxWQe6nG3rP4aF33uTyxoE1BEBU0s-1736196602624-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Transfer-Encoding:
      - chunked
      X-Content-Type-Options:
      - nosniff
      access-control-expose-headers:
      - X-Request-ID
      alt-svc:
      - h3=":443"; ma=86400
      openai-organization:
      - functional-software
      openai-processing-ms:
      - '7253'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=31536000; includeSubDomains; preload
      x-ratelimit-limit-requests:
      - '10000'
      x-ratelimit-limit-tokens:
      - '30000000'
      x-ratelimit-remaining-requests:
      - '9999'
      x-ratelimit-remaining-tokens:
      - '29996914'
      x-ratelimit-reset-requests:
      - 6ms
      x-ratelimit-reset-tokens:
      - 6ms
      x-request-id:
      - req_e806dbde59583d2ea23b54b0029befcc
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - PyGithub/Python
      authorization:
      - redacted
    method: GET
    uri: https://api.github.com/repos/getsentry/seer/contents/src/seer/automation/autofix/components/root_cause/models.py?ref=eb641096ca19f3441e92fc91b7f58b48a1c6d6b1
  response:
    body:
      string: !!binary |
        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
        jwP/a/808Mcf/wVh4XhcFiIAAA==
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes,
        X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO,
        X-GitHub-Request-Id, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Encoding:
      - gzip
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Mon, 06 Jan 2025 20:50:02 GMT
      ETag:
      - W/"2bc5251c52ed8bcbaf46dfd528cf830e9ce40f01"
      Last-Modified:
      - Mon, 06 Jan 2025 19:10:43 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - github.com
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP,Accept-Encoding, Accept, X-Requested-With
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-GitHub-Media-Type:
      - github.v3; format=json
      X-GitHub-Request-Id:
      - D27C:2FB91E:3C62974:3D77733:677C41E0
      X-RateLimit-Limit:
      - '15000'
      X-RateLimit-Remaining:
      - '14996'
      X-RateLimit-Reset:
      - '1736200175'
      X-RateLimit-Resource:
      - core
      X-RateLimit-Used:
      - '4'
      X-XSS-Protection:
      - '0'
      x-accepted-github-permissions:
      - contents=read
      x-github-api-version-selected:
      - '2022-11-28'
    status:
      code: 200
      message: OK
version: 1
