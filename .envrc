has_brew=false

if [[ $(which brew) ]]; then
  has_brew=true
fi

required_python=$(cat .python-version | grep -E -o '^\d+\.\d+')
python_executable="python${required_python}"

if [[ ! $(which $python_executable) ]]; then
  echo -e "\nWARNING: Python $required_python is required, but wasn't found in PATH. Install it now? (y/n)"
  read answer

  if [[ $answer = 'y' || $answer = 'Y' ]]; then
    if [[ $has_brew = true ]]; then
      brew install "python@${required_python}"
    else
      echo -e "\nERROR: Cannot find homebrew, which is needed to install Python ${required_python}. Please install homebrew (https://docs.brew.sh/Installation) and then run \`source .envrc\` to run this script again."
      exit -1
    fi
  else
    echo -e "\nERROR: Cannot proceed without correct version of python. Exiting."
    exit -1
  fi
fi

brew_packages=(
  cmake          # required by onnx
  docker         # required to run mypy
  docker-compose # required to run the devserver
)
missing_packages=()

for pkg in "${brew_packages[@]}"; do
  if [[ ! $(which $pkg) ]]; then
    missing_packages+=($pkg)
  fi
done

if [[ ${#missing_packages[@]} != 0 ]]; then
  echo -e "\nWARNING: Found the following missing packages:"
  for pkg in "${missing_packages[@]}"; do
    echo "  $pkg"
  done
  echo "Install missing packages? (y/n)"
  read answer

  if [[ $answer = 'y' || $answer = 'Y' ]]; then
    if [[ $has_brew = true ]]; then
      for pkg in "${missing_packages[@]}"; do
        brew install $pkg
      done
    else
      echo -e "\nERROR: Cannot find homebrew, which is needed to install missing packages. Please install homebrew (https://docs.brew.sh/Installation) and then run \`source .envrc\` to run this script again."
      exit -1
    fi
  else
    echo -e "\nERROR: Cannot proceed without missing packages. Exiting."
    exit -1
  fi
fi

venv_name="${PWD}/.venv"

expected_python_version=$(cat .python-version)
python_version=$(python3 -V 2>&1 | awk '{print $2}')
if [[ $python_version != $expected_python_version ]]; then
  echo "Your python version is $python_version, but this project requires $expected_python_version, please switch your current python"
  exit 1
fi

if [[ ! -f "$venv_name" ]]; then
  python3 -m venv "${venv_name}"
fi

source "${venv_name}/bin/activate"
# pip install -r requirements.txt

if [[ ! -f .git/hooks/pre-commit ]]; then
  pre-commit install
fi
