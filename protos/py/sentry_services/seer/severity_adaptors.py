"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import sentry_services.seer.severity_pb2
import typing


class FromScoreRequestAdaptor:
    def adapt_from_message(self, value: builtins.str):
        pass

    def adapt_from_has_stacktrace(self, value: builtins.int):
        pass

    def adapt_from_handled(self, value: builtins.bool):
        pass

    def adapt_from_trigger_timeout(self, value: builtins.bool):
        pass

    def adapt_from_trigger_error(self, value: builtins.bool):
        pass

    def adapt_from(self, proto: sentry_services.seer.severity_pb2.ScoreRequest):
        self.adapt_from_message(proto.message)
        self.adapt_from_has_stacktrace(proto.has_stacktrace)
        if proto.HasField("handled"):
            self.adapt_from_handled(proto.handled)
        self.adapt_from_trigger_timeout(proto.trigger_timeout)
        self.adapt_from_trigger_error(proto.trigger_error)


class FromScoreResponseAdaptor:
    def adapt_from_severity(self, value: builtins.float):
        pass

    def adapt_from(self, proto: sentry_services.seer.severity_pb2.ScoreResponse):
        self.adapt_from_severity(proto.severity)


class ToScoreRequestAdaptor:
    def apply_to_message(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreRequest,
        val: typing.Optional[builtins.str] = None,
    ):
        if val is not None:
            proto.message = val
        else:
            proto.ClearField("message")

    def apply_to_has_stacktrace(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreRequest,
        val: typing.Optional[builtins.int] = None,
    ):
        if val is not None:
            proto.has_stacktrace = val
        else:
            proto.ClearField("has_stacktrace")

    def apply_to_handled(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreRequest,
        val: typing.Optional[builtins.bool] = None,
    ):
        if val is not None:
            proto.handled = val
        else:
            proto.ClearField("handled")

    def apply_to_trigger_timeout(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreRequest,
        val: typing.Optional[builtins.bool] = None,
    ):
        if val is not None:
            proto.trigger_timeout = val
        else:
            proto.ClearField("trigger_timeout")

    def apply_to_trigger_error(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreRequest,
        val: typing.Optional[builtins.bool] = None,
    ):
        if val is not None:
            proto.trigger_error = val
        else:
            proto.ClearField("trigger_error")

    def apply_to(self, proto: sentry_services.seer.severity_pb2.ScoreRequest):
        self.apply_to_message(proto)
        self.apply_to_has_stacktrace(proto)
        self.apply_to_handled(proto)
        self.apply_to_trigger_timeout(proto)
        self.apply_to_trigger_error(proto)


class ToScoreResponseAdaptor:
    def apply_to_severity(
        self,
        proto: sentry_services.seer.severity_pb2.ScoreResponse,
        val: typing.Optional[builtins.float] = None,
    ):
        if val is not None:
            proto.severity = val
        else:
            proto.ClearField("severity")

    def apply_to(self, proto: sentry_services.seer.severity_pb2.ScoreResponse):
        self.apply_to_severity(proto)
