def get_searchable_properties(
    include_issue_properties=True,
    include_event_properties=True,
    include_span_properties=True,
    include_session_replay_properties=True,
    include_user_feedback_properties=True,
    include_release_properties=True,
) -> dict[str, str]:
    """
    Returns a dictionary of all searchable properties in Sentry from the docs: https://docs.sentry.io/concepts/search/searchable-properties/.

    TODO: Update this to include the audited attributes: https://github.com/getsentry/sentry-conventions/tree/main/generated/attributes
    """
    issue_properties_map = {
        "age": "Returns issues created since the time defined by the value. The syntax is similar to the Unix find command. Supported suffixes: m - minutes, h - hours, d - days, w - weeks. For example, age:-24h returns isssues that are new in the last 24 hours, while age:+12h returns ones that are older than 12 hours. Entering age:+12h age:-24h would return issues created between 12 and 24 hours ago. Type: relative time",
        "app.in_foreground": "Indicates if the app is in the foreground or background. Values are 1/0 or true/false. Type: boolean",
        "assigned": "Returns issues assigned to the defined user(s) or team(s). Values can be a user ID (your email address), me for yourself, none for no assignee, my_teams or #team-name for teams you belong to. Type: team or org user",
        "assigned_or_suggested": "Returns issues that are assigned to or suggested to be assigned to the defined user(s) or team(s). Suggested assignees are found by matching ownership rules and suspect commits. Values can be a user ID (your email address), me for yourself, none for no assignee/suggestion, my_teams or #team-name for teams you belong to. Type: team or org user",
        "bookmarks": "Returns issues bookmarked by the defined user. Values can be your user ID (your email address) or me for yourself. Type: team or org user",
        "device.arch": "CPU architecture. Type: string",
        "device.brand": "Brand of the device. Type: string",
        "device.family": "Family of the device. Typically, the common part of a model name across generations. For example, iPhone, Samsung Galaxy. Type: string",
        "device.locale": "Deprecated. Type: string",
        "device.model_id": "Internal hardware revision to identify the device exactly. Type: n/a",
        "device.orientation": "Describes the orientation of the device and can be either portrait or landscape. Type: string",
        "device.screen_density": "Device screen density in pixels. Type: string",
        "device.screen_dpi": "Number of dots per inch of the device screen. Type: string",
        "device.screen_height_pixels": "Device screen height in pixels. Type: string",
        "device.screen_width_pixels": "Device screen width in pixels. Type: string",
        "device.uuid": "Deprecated. Type: UUID",
        "dist": "Distinguishes build or deployment variants of the same release of an application. For example, the dist can be the build number of an Xcode build or the version code of an Android build. Type: string",
        "error.handled": "Indicates whether the user has handled the exception â€” for example, using try...catch. An error is considered handled if all stack traces handle the error. Values are 1/0 or true/false. Type: boolean",
        "error.main_thread": "Indicates if the error occurred on the main thread. Values are 1/0 or true/false. Type: boolean",
        "error.mechanism": "An object describing the mechanism that created this exception. Type: array",
        "error.type": "The type of exception. For example, ValueError. Type: array",
        "error.unhandled": "The inversion of error.handled. Type: boolean",
        "error.value": "Original value of a field that causes or exhibits the error. Type: array",
        "event.timestamp": "Returns issues with matching datetime. Type: datetime",
        "event.type": "Type of the event (transaction, error, default, csp, and so on). The transaction type is unavailable in Issues. Type: string",
        "firstRelease": "Returns issues first seen within the given release. Can be an exact match on the version of a release, or first-release:latest to pick the most recent release. Type: datetime",
        "firstSeen": "Returns issues with a matching first time seen. Syntax is the same as age. Type: datetime",
        "flags": 'For feature flag evaluations set to true or false, the name of the feature flag. For example, the syntax for searching for a flag with key my_flag and value true is flags["my_flag"]:true. Type: boolean',
        "geo.city": "Full name of the city. Type: string",
        "geo.country_code": "ISO 3166-1 country code. Type: string",
        "geo.region": "Full name of the country. Type: string",
        "has": "Returns results with the defined tag or field, but not the value of that tag or field. For example, entering has:user would find events with the user tag. Type: error",
        "http.method": "HTTP method of the request that created the event. Type: string",
        "http.referer": "Identifies the web page from which the resource was requested. Type: string",
        "http.status_code": "HTTP status code, which indicates whether a response was successful. For example, 200 or 404. Type: string",
        "http.url": "Full URL of the request that caused the error, but without any parameters. Type: string",
        "id": "The event or replay id. In Issues, use only the ID value without the id key. Type: UUID",
        "is": "The properties of an issue. Values can be: unresolved, resolved, archived, assigned, unassigned, for_review, linked, or unlinked. The for_review value filters unresolved issues and only shows the recently unresolved or new issues that haven't been marked as \"reviewed\". The linked and unlinked values return issues based on whether they're linked to an external issue tracker or not. Type: status",
        "issue": "The short issue code, for example SENTRY-ABC. Type: string",
        "issue.category": "The category of the issue. For example: error, performance, replay and cron. Type: string",
        "issue.type": "The specific type of issue. For example issue.type:performance_n_plus_one_db_queries returns the n plus one db query performance issues. Type: string",
        "lastSeen": "Datetime when the event was last seen. For example, lastSeen:+30d returns issues last seen 30 days ago or more; lastSeen:-2d returns issues last seen within the past two days. This is similar to age. Type: datetime",
        "level": "Severity of the event (such as: fatal, error, warning). Always set to info for transactions. Type: string",
        "location": "Location where the error happened. Type: string",
        "message": "Returns errors with the matching message or transactions with matching transaction name. Also matches on any message containing the supplied value.Searching message:undefined will match an event with a message of undefined is not an object. Raw text searches (searches without the message key) are also checked against this field. For errors, the message can be a concatenatenation of elements, so searches might include unexpected results. Type: string",
        "os.build": "The internal build revision of the operating system. Type: string",
        "os.kernel_version": "The independent kernel version string. This is typically the entire output of the uname syscall. Type: string",
        "os.distribution_name": "The Linux distribution name. This maps to ID in /etc/os-release/. Type: string",
        "os.distribution_version": "The Linux distribution version. This maps to VERSION_ID in /etc/os-release/. Type: string",
        "platform.name": "Name of the platform. Type: string",
        "project": "The name of the project. In some pages of sentry.io, you can also filter on project using a dropdown. Type: string",
        "project.id": "The id of the project. Type: number",
        "release": "A release is a version of your code deployed to an environment. You can create a token with an exact match of the version of a release, or release:latest to pick the most recent release. Learn more. Type: string",
        "release.build": "The number that identifies an iteration of your app. For example, CFBundleVersion on iOS or versionCode on Android. Learn more. Type: number",
        "release.package": "The unique identifier of the project/app. For example, CFBundleIdentifier on iOS or packageName on Android. Learn more. Type: string",
        "release.stage": "The usage your release is seeing relative to other releases. Values can be adopted, low, or replaced. Learn more. Type: string",
        "release.version": "A shorter version of the name; name without the package or short version of the hash. Learn more. Type: string",
        "sdk.name": "Name of the Sentry SDK that sent the event. Type: string",
        "sdk.version": "Version of the Sentry SDK that sent the event. Type: string",
        "stack.abs_path": "The absolute path to the source file. In events, this is an array; in issues, this is a single value. Type: array, single value",
        "stack.filename": "The path to the source file relative to the project root directory. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.function": "Name of the function being called. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.module": "Platform-specific module path. For example, sentry.interfaces.Stacktrace. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.package": 'The "package" the frame was contained in. Depending on the platform, this can be different things. For C#, it can be the name of the assembly. For native code, it can be the path of the dynamic library or something else. In events, this is an array. In issues, this is a single value. Type: array, single value',
        "timesSeen": "Returns results with a matching count. (Same as count() in events.) Type: number",
        "timestamp": "The finish timestamp of the transaction. Returns events with matching datetime. Type: datetime",
        "title": "Title of the error or the transaction name. Type: string",
        "trace": "A trace represents the record of the entire operation you want to measure or track â€” like page load, searched using the UUID generated by Sentry's SDK. Type: UUID",
        "transaction": "For transactions, the name of the transaction. For errors, the name of the associated transaction. Type: string",
        "unreal.crash_type": "The Unreal Crash Context Type. Type: string",
        "user.email": "An alternative, or addition, to the username. Sentry is aware of email addresses and can therefore display things such as Gravatars and unlock messaging capabilities. Type: string",
        "user.id": "Application-specific internal identifier for the user. Type: string",
        "user.ip": "User's IP address. Sentry uses the IP address as a unique identifier for unauthenticated users. Type: string",
        "user.username": "Username, which is typically a better label than the user.id. Type: string",
    }

    event_properties_map = {
        "apdex(threshold)": "Returns results with the Apdex score that you entered. Values must be between 0 and 1. Higher apdex values indicate higher user satisfaction. Type: number",
        "app.in_foreground": "Indicates if the app is in the foreground or background. Values are 1/0 or true/false. Type: boolean",
        "avg(field)": "Returns results with matching averages for the field selected. The field can be either a number or a duration. Typically used with a comparison operator. Type: matches field",
        "count_if(column,operator,value)": "Returns results with a matching count that satisfy the condition passed to the parameters of the function. Type: number",
        "count_miserable(field,threshold)": "Returns results with a matching count of unique instances of the field that fall above the miserable threshold. Type: number",
        "count_unique(field)": "Returns results with a matching count of the unique instances of the field entered. Type: number",
        "count_web_vitals(vital,threshold)": "Returns results with a matching count that meet a Web Vitals quality threshold (poor, meh, good, or any). Type: number",
        "count()": "Returns results with a matching count. (Same as timesSeen in issue search.) Doesn't take a parameter. Type: number",
        "culprit": "Deprecated. Type: string",
        "device.arch": "CPU architecture. Type: string",
        "device.battery_level": "If the device has a battery, this can be a floating point value defining the battery level (in the range 0-100). Type: string",
        "device.brand": "Brand of the device. Type: string",
        "device.charging": "Whether the device was charging or not. Not a boolean. Type: string",
        "device.class": "The estimated performance class of the client device, estimated high, medium, or low. For more details, see the Device Classification section below. Type: string",
        "device.family": "Family of the device. Typically, the common part of a model name across generations. For example, iPhone, Samsung Galaxy. Type: string",
        "device.locale": "Deprecated. Type: string",
        "device.name": "Details of the device. Type: string",
        "device.online": "Whether the device was online or not. A string that is either True or False. Type: string",
        "device.orientation": "Describes the orientation of the device and can be either portrait or landscape. Type: string",
        "device.screen_density": "Device screen density in pixels. Type: string",
        "device.screen_dpi": "Number of dots per inch of the device screen. Type: string",
        "device.screen_height_pixels": "Device screen height in pixels. Type: string",
        "device.screen_width_pixels": "Device screen width in pixels. Type: string",
        "device.simulator": "Indicates whether this device is a simulator or a real device. A string that is either True or False. Type: string",
        "device.uuid": "Deprecated. Type: UUID",
        "dist": "Distinguishes build or deployment variants of the same release of an application. For example, the dist can be the build number of an Xcode build or the version code of an Android build. Type: string",
        "environment": "Refers to your code deployment naming convention. For example, development, testing, staging and so on. Learn more.In some pages of sentry.io, you filter on environment using a dropdown. Type: string",
        "epm()": "Returns results with a matching events-per-minute count. Doesn't take a parameter. Type: number",
        "eps()": "Returns results with a matching events-per-second count. Doesn't take a parameter. Type: number",
        "error.handled": "Indicates whether the user has handled the exception â€” for example, using try...catch. An error is considered handled if all stack traces handle the error. Values are 1/0 or true/false. Type: boolean",
        "error.main_thread": "Indicates if the error occurred on the main thread. Values are 1/0 or true/false. Type: boolean",
        "error.mechanism": "An object describing the mechanism that created this exception. Type: array",
        "error.type": "The type of exception. For example, ValueError. Type: array",
        "error.unhandled": "The inversion of error.handled. Type: boolean",
        "error.value": "Original value of a field that causes or exhibits the error. Type: array",
        "event.type": "Type of the event (transaction, error, default, csp, and so on). The transaction type is unavailable in Issues. Type: string",
        "failure_count()": "Returns results with a matching count of events with a transaction.status value that's in the list of failing ones. Values can be: ok, cancelled, unknown. Doesn't take a parameter. Type: number",
        "failure_rate()": "Returns results with a matching rate of failing transactions â€” that is, failure_count() divided by the count() (total count). Doesn't take a parameter. Type: number",
        "geo.city": "Full name of the city. Type: string",
        "geo.country_code": "ISO 3166-1 country code. Type: string",
        "geo.region": "Full name of the country. Type: string",
        "has": "Returns results with the defined tag or field, but not the value of that tag or field. For example, entering has:user would find events with the user tag. Type: error",
        "http.method": "HTTP method of the request that created the event. Type: string",
        "http.referer": "Identifies the web page from which the resource was requested. Type: string",
        "http.status_code": "HTTP status code, which indicates whether a response was successful. For example, 200 or 404. Type: string",
        "http.url": "Full URL of the request that caused the error, but without any parameters. Type: string",
        "id": "The event id. In Issues, use only the ID value without the id key. Type: UUID",
        "issue": "The short issue code, for example SENTRY-ABC. Type: string",
        "last_seen()": "Datetime when the event was last seen. Equivalent to max(timestamp). Doesn't take a parameter. Type: datetime",
        "level": "Severity of the event (such as: fatal, error, warning). Always set to info for transactions. Type: string",
        "location": "Location where the error happened. Type: string",
        "max(numeric field)": "Returns results with a matching maximum value for the field entered. Type: matches field",
        "measurements.app_start_cold": "A cold start refers to when the app launches for the first time after a reboot or update. The app is not in memory and no process exists. Type: duration",
        "measurements.app_start_warm": "A warm start refers to when the app has already launched at least once and is partially in memory. For instance, the user backs out of your app, but then re-launches it. The process may have continued to run, but the app must recreate the activity from scratch. Type: duration",
        "measurements.cls": "Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Type: number",
        "measurements.fcp": "First Contentful Paint (FCP) measures the time for the first content to render in the viewport. Type: duration",
        "measurements.fid": "First Input Delay (FID) measures the response time when the user tries to interact with the viewport. Type: duration",
        "measurements.fp": "First Paint (FP) measures the amount of time the first pixel takes to appear in the viewport, rendering any visual change from what was previously displayed. Type: duration",
        "measurements.frames_frozen": "Slow and frozen frames measure the responsiveness of your app. Type: number",
        "measurements.frames_frozen_rate": "Returns results with a matching rate of frozen frames. That is, measurements.frames_frozen divided by the measurements.frames_total. Type: number",
        "measurements.frames_slow": "Slow and frozen frames measure the responsiveness of your app. Type: number",
        "measurements.frames_slow_rate": "Returns results with a matching rate of slow frames. That is, measurements.frames_slow divided by the measurements.frames_total. Type: number",
        "measurements.frames_total": "Returns results with a matching total number of frames. Type: number",
        "measurements.lcp": "Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. Type: duration",
        "measurements.stall_count": "A stall is when the JavaScript event loop takes longer than expected to complete. Only applies to React Native. Type: number",
        "measurements.stall_longest_time": "The longest stall time is the time, in milliseconds, of the longest event loop stall. Only applies to React Native. Type: duration",
        "measurements.stall_percentage": "Stall percentage is equal to the stall_total_time divided by the transaction.duration. Only applies to React Native. Type: number",
        "measurements.stall_total_time": "The total stall time is the total combined time, in milliseconds, of all stalls. Only applies to React Native. Type: duration",
        "measurements.ttfb": "Time To First Byte (TTFB) measures the time that it takes for a user's browser to receive the first byte of page content. Type: duration",
        "measurements.ttfb.requesttime": "The time between start of the request and start of the response (see diagram). Type: duration",
        "message": "Returns errors with the matching message or transactions with matching transaction name. Also matches on any message containing the supplied value.Searching message:undefined will match an event with a message of undefined is not an object. Raw text searches (searches without the message key) are also checked against this field. For errors, the message can be a concatenatenation of elements, so searches might include unexpected results. Type: string",
        "min(numeric field)": "Returns results with a matching minimum value for the field entered. Type: matches field",
        "os.build": "The internal build revision of the operating system. Type: string",
        "os.kernel_version": "The independent kernel version string. This is typically the entire output of the uname syscall. Type: string",
        "os.distribution_name": "The Linux distribution name. This maps to ID in /etc/os-release/. Type: string",
        "os.distribution_version": "The Linux distribution version. This maps to VERSION_ID in /etc/os-release/. Type: string",
        "percentile(field,level)": "Returns results with an approximate percentile of the field to the level. The level can be between 0 and 1. For example, if you wanted to find the 50th percentile of transaction durations, you would enter percentile(transaction.duration, 0.5). Type: number",
        "platform": "Name of the platform. This defaults to other and is only a property for platforms from this list: as3, c, cfml, cocoa, csharp, elixir, go, groovy, haskell, java, javascript, native, node, objc, other, perl, php, python, ruby. Type: string",
        "project": "The name of the project. In some pages of sentry.io, you can also filter on project using a dropdown. Type: string",
        "project.id": "The id of the project. Type: number",
        "pXY(duration field)": 'Returns results with an approximate percentile of the field. Replace "XY" with 50, 75, 95, 99, or 100. For example, if you wanted to find the 50th percentile of transaction durations, you would enter p50(transaction.duration). Type: number',
        "release": "A release is a version of your code deployed to an environment. You can create a token with an exact match of the version of a release, or release:latest to pick the most recent release. Learn more. Type: string",
        "release.build": "The number that identifies an iteration of your app. For example, CFBundleVersion on iOS or versionCode on Android. Learn more. Type: number",
        "release.package": "The unique identifier of the project/app. For example, CFBundleIdentifier on iOS or packageName on Android. Learn more. Type: string",
        "release.stage": "The usage your release is seeing relative to other releases. Values can be adopted, low, or replaced. Learn more. Type: string",
        "release.version": "A shorter version of the name; name without the package or short version of the hash. Learn more. Type: string",
        "sdk.name": "Name of the Sentry SDK that sent the event. Type: string",
        "sdk.version": "Version of the Sentry SDK that sent the event. Type: string",
        "spans.browser": "Cumulative browser time for a transaction, based on the span operations. Type: duration",
        "spans.db": "Cumulative db time for a transaction, based on span operations. Type: duration",
        "spans.http": "Cumulative http time for a transaction, based on span operations. Type: duration",
        "spans.resource": "Cumulative resource time for a transaction, based on span operations. Type: duration",
        "spans.ui": "Cumulative UI time for a transaction, based on span operations. Type: duration",
        "stack.abs_path": "The absolute path to the source file. In events, this is an array; in issues, this is a single value. Type: array, single value",
        "stack.colno": "Column number of the call, starting at 1. Type: array",
        "stack.filename": "The path to the source file relative to the project root directory. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.function": "Name of the function being called. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.in_app": "Indicates whether a frame is related to the execution of the relevant code in the stack trace. For example, the frames that might power the framework's web server of your app are probably not relevant. However, calls to the framework's library once you start handling code likely are relevant. Values can be 1 (true) or 0 (false). Type: array",
        "stack.lineno": "Line number of the call, starting at 1. Type: array",
        "stack.module": "Platform-specific module path. For example, sentry.interfaces.Stacktrace. In events, this is an array. In issues, this is a single value. Type: array, single value",
        "stack.package": 'The "package" the frame was contained in. Depending on the platform, this can be different things. For C#, it can be the name of the assembly. For native code, it can be the path of the dynamic library or something else. In events, this is an array. In issues, this is a single value. Type: array, single value',
        "sum(numeric field)": "Returns results with a matching total value for the the field entered. Type: matches field",
        "timestamp": "The finish timestamp of the transaction. Returns events with matching datetime. Type: datetime",
        "timestamp.to_day": "Timestamp rounded down to the nearest day. Type: datetime",
        "timestamp.to_hour": "Timestamp rounded down to the nearest hour. Type: datetime",
        "title": "Title of the error or the transaction name. Type: string",
        "trace": "A trace represents the record of the entire operation you want to measure or track â€” like page load, searched using the UUID generated by Sentry's SDK. Type: UUID",
        "trace.parent_span": "Span ID of the parent to the current transaction. This is null if the transaction is root. Type: UUID",
        "trace.span": "Span ID of the root span of the root transaction in the event. Type: UUID",
        "transaction": "For transactions, the name of the transaction. For errors, the name of the associated transaction. Type: string",
        "transaction.duration": "Duration, in milliseconds, of the transaction. Type: duration",
        "transaction.op": "Short code identifying the type of operation the span is measuring. Type: string",
        "transaction.status": "Describes the status of the span/transaction. Check out our Transaction Payloads documentation for all possible statuses. Type: string",
        "unreal.crash_type": "The Unreal Crash Context Type. Type: string",
        "user_misery(number)": 'Returns transactions with the defined user misery value. User Misery is a user-weighted performance metric that counts the number of unique users who were frustrated; "frustration" is measured as a response time four times the satisfactory response time threshold (in milliseconds). It highlights transactions that have the highest impact on users. Type: number',
        "user.display": "In order, the first available user field available: email, then username, ID, and then IP address. Type: string",
        "user.email": "An alternative, or addition, to the username. Sentry is aware of email addresses and can therefore display things such as Gravatars and unlock messaging capabilities. Type: string",
        "user.id": "Application-specific internal identifier for the user. Type: string",
        "user.ip": "User's IP address. Sentry uses the IP address as a unique identifier for unauthenticated users. Type: string",
        "user.username": "Username, which is typically a better label than the user.id. Type: string",
    }

    span_properties_map = {
        "span.action": "The type of span action, for example, SELECT for a SQL span or POST for an HTTP span. Type: string",
        "browser.name": "The name of the browser that generated the span. Type: string",
        "cache.hit": "Whether a cache read has hit or missed the queried cache key. Values are 'true' or 'false'. Type: string",
        "span.description": "Parameterized and scrubbed description of the span. Type: string",
        "device.class": "Device class is a synthesized field that's calculated by using device info found in context such as model (for iOS devices), and device specs like processor_frequency (for Android devices). Type: string",
        "span.domain": "General scope of the span's action, for example, the tables involved in a db span or the host name in an http span. Type: string",
        "duration": "The total time taken by the span. Type: duration",
        "environment": "Refers to your code deployment naming convention. For example, development, testing, staging and so on. Learn more. In some pages of Sentry, you filter on environment using a dropdown. Type: string",
        "file_extension": "The file extension of a resource span. Type: string",
        "group": "Unique hash of the span's description. Type: string",
        "http.decoded_response_content_length": "The decoded body size of the resource. Type: string",
        "http.response_content_length": "The encoded body size of the resource. Type: string",
        "http.response_transfer_size": "The total transfer size of the resource. Type: string",
        "messaging.destination.name": "The queue name or topic that the message is written or published to. The consumer also reads from this queue. Type: string",
        "messaging.message.id": "The unique ID of a message from the queue or messaging system. Type: string",
        "span.module": "The Insights module that the span is associated with, for example, cache, db, http, and so on. Type: string",
        "span.op": "The operation of the span, for example, http.client, middleware. Type: string",
        "os.name": "Name of the operating system. Type: string",
        "platform": "Name of the platform. This defaults to other and is only a property for platforms from this list: as3, c, cfml, cocoa, csharp, elixir, go, groovy, haskell, java, javascript, native, node, objc, other, perl, php, python, ruby Type: string",
        "release": "A release is a version of your code deployed to an environment. You can create a token that matches a release exactly, or pick the most recent release by using release:latest. Learn more. Type: string",
        "resource.render_blocking_status": "The render blocking status of the resource. Type: string",
        "sdk.name": "Name of the Sentry SDK that sent the event. Type: string",
        "sdk.version": "Version of the Sentry SDK that sent the event. Type: string",
        "self_time": "The duration of the span excluding the duration of its child spans. Type: string",
        "span.status": "Status of the operation the span represents.",
        "status_code": "The HTTP response status code. Type: string",
        "system": "Database system (e.g., postgresql or mysql). Type: string",
        "trace.status": "The span trace's success or failure status. Type: string",
        "transaction": "Name of the containing transaction. Type: string",
        "transaction.method": "HTTP method of the containing transaction. Type: string",
        "transaction.op": "Operation of the containing transaction. Type: string",
        "user.email": "An alternative or addition to the username. Sentry is aware of email addresses and can therefore display things such as Gravatars and unlock messaging capabilities. Type: string",
        "user.id": "Application-specific internal identifier for the user. Type: string",
        "user.username": "Username, which is typically a better label than user.id. Type: string",
    }

    session_replay_properties_map = {
        "activity": "Replay activity is calculated based on the number of errors, the number of ui events, and the duration of the replay. It's represented as a number from 1 to 10. Type: number",
        "browser.name": "Name of the users' web browser. For example, Chrome, Firefox, or Safari. Type: string",
        "browser.version": "The version string of the browser. Type: string",
        "click.alt": 'The alt of an element that was clicked. For example, "a good dog" would match the element <img src="/lassie.jpeg" alt="a good dog" />. Type: string',
        "click.class": 'The class of an element that was clicked. No leading . is necessary. For example, btn-primary would match the element <a class="btn btn-primary">Save</a>. Type: string',
        "click.component_name": "The name of the frontend component that was clicked. For example, MyAwesomeComponent would match the React component <MyAwesomeComponent>. Note: This property requires that your project have React component name capturing configured. Type: string",
        "click.id": 'The id of an element that was clicked. No leading # is necessary. For example, reset-password would match the element <a id="reset-password">Reset</a>. Type: string',
        "click.label": 'The aria-label of an element that was clicked. For example, Expand would match the element <button aria-label="Expand"><img src="/icons/expand.png"/></button>. Type: string',
        "click.role": 'The role of an element that was clicked. For example, button would match both <button>Save</button> and <a role="button">Submit</a>. Type: string',
        "click.selector": 'An element identified using a subset of CSS selector syntax. For example, #section-1 or span.active or span[role=button] or .active[role=button] would all match the element <span id="section-1" class="active" role="button"/>. Note that, CSS combinators, pseudo selectors, and attr selectors other than = are not supported. Type: string',
        "click.tag": 'The tag name of an element that was clicked. For example, input would match <input name="username" />. Type: string',
        "click.testid": 'The data-testid or data-test-id of an element that was clicked. For example, user-name would match the element <a data-testid="user-name">User Name</a>. Type: string',
        "click.textContent": "The immediate textContent of an element that was clicked. For example, Save would match <button>Save</button> but wouldn't match <button><h1>Save</h1></button>. Type: string",
        "click.title": 'The title of an element that was clicked. For example, Save this comment would match the element <a title="Save this comment" class="btn btn-primary">Save</a>. Type: string',
        "count_dead_clicks": "The number of dead clicks within a replay. Type: number",
        "count_errors": "The number of errors within a replay. Type: number",
        "count_rage_clicks": "The number of rage clicks within a replay. Type: number",
        "count_segments": "The number of segments within a replay. More segments represent more activity over time. Type: number",
        "count_urls": "The number of URLs that the user visited during a replay recording. Type: number",
        "dead.selector": 'Similar to the click.selector search property, but only queries on dead clicks. An element identified using a subset of CSS selector syntax. For example, #section-1 or span.active or span[role=button] or .active[role=button] would all match the element <span id="section-1" class="active" role="button"/>. Note that, CSS combinators, pseudo selectors, and attr selectors other than = are not supported. Type: string',
        "device.brand": "Brand of the device. Type: string",
        "device.family": "Family of the device. Typically, the common part of a model name across generations. For example, iPhone, Samsung Galaxy. Type: string",
        "device.model_id": "Internal hardware revision to identify the device exactly. Type: n/a",
        "device.name": "Details of the device. Type: string",
        "dist": "Distinguishes build or deployment variants of the same release of an application. For example, the dist can be the build number of an Xcode build or the version code of an Android build. Type: string",
        "duration": "Duration of a replay in seconds. Type: number",
        "error_ids": "Error event IDs that have occurred within a replay. Type: array",
        "id": "The event or replay id. In Issues, use only the ID value without the id key. Type: UUID",
        "level": "Severity of the event (such as: fatal, error, warning). Always set to info for transactions. Type: string",
        "os.name": "The name of the operating system. For example, Windows, Mac OS X, or Linux. Type: string",
        "os.version": "The version number of the operating system. Type: string",
        "platform": "Name of the platform. This is only a metrics property for valid platforms, defaulting to other. Type: string",
        "project_id": "The id of the project. Type: string",
        "rage.selector": 'Similar to the click.selector search property, but only queries on rage clicks. An element identified using a subset of CSS selector syntax. For example, #section-1 or span.active or span[role=button] or .active[role=button] would all match the element <span id="section-1" class="active" role="button"/>. Note that, CSS combinators, pseudo selectors, and attr selectors other than = are not supported. Type: string',
        "release": "A release is a version of your code deployed to an environment. You can create a token with an exact match of the version of a release, or release:latest to pick the most recent release. Learn more. Type: string",
        "replay_type": "The reason a replay was triggered. For example, session when replaysSessionSampleRate takes effect, or buffer when replaysOnErrorSampleRate is sampled instead of session. Learn more in the Session Replay docs. Type: string",
        "sdk.name": "Name of the Sentry SDK that sent the event. Type: string",
        "sdk.version": "Version of the Sentry SDK that sent the event. Type: string",
        "seen_by_me": "Whether you've seen this replay. Alias: viewed_by_me. Type: boolean",
        "trace": "A trace represents the record of the entire operation you want to measure or track â€” like page load, searched using the UUID generated by Sentry's SDK. Type: UUID",
        "url": "A specific URL that the user visited during the replay. You can also search for multiple URLs at once using urls and passing in an array of strings. Type: string",
        "user.email": "An alternative, or addition, to the username. Sentry is aware of email addresses and can therefore display things such as Gravatars and unlock messaging capabilities. Type: string",
        "user.id": "Application-specific internal identifier for the user. Type: string",
        "user.ip": "User's IP address. Sentry uses the IP address as a unique identifier for unauthenticated users. Type: string",
        "user.username": "Username, which is typically a better label than the user.id. Type: string",
    }

    user_feedback_properties_map = {
        "assigned": "Returns user feedback submissions assigned to the defined user(s) or team(s). Values can be a user ID (your email address), me for yourself, none for no assignee, my_teams or #team-name for teams you belong to. Type: team or org user",
        "browser.name": "Name of the browser. Type: string",
        "device.brand": "Brand of the device. Type: string",
        "device.family": "Family of the device. Typically, the common part of a model name across generations. For example, iPhone, Samsung Galaxy. Type: string",
        "device.model_id": "Internal hardware revision to identify the device exactly. Type: n/a",
        "device.name": "Name of the device. Type: string",
        "dist": "Distinguishes build or deployment variants of the same release of an application. For example, the dist can be the build number of an Xcode build or the version code of an Android build. Type: string",
        "environment": "The environment that the event was first seen in. Type: string",
        "id": "The feedback ID. Type: UUID",
        "is": "The properties of a user feedback submission. Values can be: unresolved, resolved, assigned, unassigned, linked, or unlinked. The linked and unlinked values return user feedback submissions based on whether they are linked to an external issue tracker or not. Type: status",
        "level": "The severity of the user feedback submissions. If the feedback came in through the crash-report modal then the level is tied to the error experienced by the end-user. For feedback from the user feedback widget, the level is info. Type: string",
        "os.name": "The name of the operating system. Type: string",
        "sdk.name": "Name of the Sentry SDK that sent the event. Type: string",
        "sdk.version": "Version of the Sentry SDK that sent the event. Type: string",
        "timestamp": "The finish timestamp of the transaction. Returns events with matching datetime. Type: datetime",
        "transaction": "The error or transaction name identifier. Type: string",
        "url": "The URL of the page that the feedback is triggered on. Type: string",
        "user.email": "The user's email address exists only if Sentry received it from the Sentry.setUser SDK option as a tag. This property does not apply to emails entered inside the user feedback widget, which are not searchable. Type: string",
        "user.id": "Application-specific internal identifier for the user. Type: string",
        "user.ip": "User's IP address. Sentry uses the IP address as a unique identifier for unauthenticated users. Type: string",
        "user.username": "Username, which is typically a better label than the user.id. Type: string",
    }

    release_properties_map = {
        "release": "A release is a version of your code deployed to an environment. You can create a token with an exact match of the version of a release, or release:latest to pick the most recent release. Learn more. Type: string",
        "release.build": "The number that identifies an iteration of your app. For example, CFBundleVersion on iOS or versionCode on Android. Learn more. Type: number",
        "release.package": "The unique identifier of the project/app. For example, CFBundleIdentifier on iOS or packageName on Android. Learn more. Type: string",
        "release.stage": "The usage your release is seeing relative to other releases. Values can be adopted, low, or replaced. Learn more. Type: string",
        "release.version": "A shorter version of the name; name without the package or short version of the hash. Learn more. Type: string",
    }

    # Combine all property maps into one
    all_properties_map = {}

    if include_issue_properties:
        all_properties_map.update(issue_properties_map)
    if include_event_properties:
        all_properties_map.update(event_properties_map)
    if include_span_properties:
        all_properties_map.update(span_properties_map)
    if include_session_replay_properties:
        all_properties_map.update(session_replay_properties_map)
    if include_user_feedback_properties:
        all_properties_map.update(user_feedback_properties_map)
    if include_release_properties:
        all_properties_map.update(release_properties_map)

    return all_properties_map
