"""Migration

Revision ID: bd9b03d19b04
Revises: 1cfb0e2cc1f5
Create Date: 2024-08-06 17:32:43.369341

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "bd9b03d19b04"
down_revision = "1cfb0e2cc1f5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.drop_index("ix_repository_organization_project_provider_slug")

    with op.batch_alter_table("codebase_namespaces", schema=None) as batch_op:
        batch_op.drop_index("ix_codebase_namespace_repo_id_sha")
        batch_op.drop_index("ix_codebase_namespace_repo_id_tracking_branch")

    op.drop_table("codebase_namespace_mutex")
    op.drop_table("codebase_namespaces")
    op.drop_table("repositories")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "codebase_namespaces",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('codebase_namespaces_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("repo_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("sha", sa.VARCHAR(length=40), autoincrement=False, nullable=False),
        sa.Column("tracking_branch", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("accessed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["repo_id"], ["repositories.id"], name="codebase_namespaces_repo_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="codebase_namespaces_pkey"),
        sa.UniqueConstraint("repo_id", "sha", name="codebase_namespaces_repo_id_sha_key"),
        sa.UniqueConstraint(
            "repo_id", "tracking_branch", name="codebase_namespaces_repo_id_tracking_branch_key"
        ),
        postgresql_ignore_search_path=False,
    )
    with op.batch_alter_table("codebase_namespaces", schema=None) as batch_op:
        batch_op.create_index(
            "ix_codebase_namespace_repo_id_tracking_branch",
            ["repo_id", "tracking_branch"],
            unique=False,
        )
        batch_op.create_index("ix_codebase_namespace_repo_id_sha", ["repo_id", "sha"], unique=False)

    op.create_table(
        "codebase_namespace_mutex",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("namespace_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["namespace_id"],
            ["codebase_namespaces.id"],
            name="codebase_namespace_mutex_namespace_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="codebase_namespace_mutex_pkey"),
    )
    op.create_table(
        "repositories",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("organization", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("project", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("provider", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("external_slug", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("external_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("default_namespace", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="repositories_pkey"),
        sa.UniqueConstraint(
            "organization",
            "project",
            "provider",
            "external_id",
            name="repositories_organization_project_provider_external_id_key",
        ),
    )
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.create_index(
            "ix_repository_organization_project_provider_slug",
            ["organization", "project", "provider", "external_id"],
            unique=False,
        )

    # ### end Alembic commands ###
