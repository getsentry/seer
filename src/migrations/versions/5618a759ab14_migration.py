"""Migration

Revision ID: 5618a759ab14
Revises: 913d11ce1bea
Create Date: 2024-04-05 23:46:05.734585

"""

import pgvector.sqlalchemy  # type: ignore
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "5618a759ab14"
down_revision = "913d11ce1bea"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "codebase_namespaces",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.Column("sha", sa.String(length=40), nullable=False),
        sa.Column("tracking_branch", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["repo_id"],
            ["repositories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("repo_id", "sha"),
        sa.UniqueConstraint("repo_id", "tracking_branch"),
    )
    with op.batch_alter_table("document_tombstones", schema=None) as batch_op:
        batch_op.drop_index("idx_repo_namespace_path")

    op.drop_table("document_tombstones")
    with op.batch_alter_table("document_chunks", schema=None) as batch_op:
        batch_op.drop_index(
            "idx_repo_id_namespace_path", postgresql_where="(namespace IS NOT NULL)"
        )
        batch_op.drop_index("idx_repo_path", postgresql_where="(namespace IS NULL)")

    op.drop_table("document_chunks")
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.add_column(sa.Column("default_namespace", sa.Integer(), nullable=True))
        batch_op.alter_column("sha", existing_type=sa.VARCHAR(length=40), nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("repositories", schema=None) as batch_op:
        batch_op.alter_column("sha", existing_type=sa.VARCHAR(length=40), nullable=False)
        batch_op.drop_column("default_namespace")

    op.create_table(
        "document_chunks",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("repo_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("path", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("language", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("index", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("hash", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("token_count", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "embedding", pgvector.sqlalchemy.Vector(dim=768), autoincrement=False, nullable=False
        ),
        sa.Column("namespace", sa.VARCHAR(length=36), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["repo_id"], ["repositories.id"], name="document_chunks_repo_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="document_chunks_pkey"),
    )
    with op.batch_alter_table("document_chunks", schema=None) as batch_op:
        batch_op.create_index(
            "idx_repo_path",
            ["repo_id", "path", "index"],
            unique=True,
            postgresql_where="(namespace IS NULL)",
        )
        batch_op.create_index(
            "idx_repo_id_namespace_path",
            ["repo_id", "namespace", "path", "index"],
            unique=True,
            postgresql_where="(namespace IS NOT NULL)",
        )

    op.create_table(
        "document_tombstones",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("repo_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("path", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("namespace", sa.VARCHAR(length=36), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["repo_id"], ["repositories.id"], name="document_tombstones_repo_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="document_tombstones_pkey"),
    )
    with op.batch_alter_table("document_tombstones", schema=None) as batch_op:
        batch_op.create_index(
            "idx_repo_namespace_path", ["repo_id", "namespace", "path"], unique=True
        )

    op.drop_table("codebase_namespaces")
    # ### end Alembic commands ###
