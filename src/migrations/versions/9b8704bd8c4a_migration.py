"""Migration

Revision ID: 9b8704bd8c4a
Revises: bd9b03d19b04
Create Date: 2024-08-12 21:28:06.063355

"""

import json
import logging
from datetime import datetime

import sqlalchemy as sa
from alembic import op

logger = logging.getLogger(__name__)

# revision identifiers, used by Alembic.
revision = "9b8704bd8c4a"
down_revision = "bd9b03d19b04"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("run_state", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "updated_at",
                sa.DateTime(),
                nullable=True,  # Change to nullable initially
            )
        )
        batch_op.add_column(
            sa.Column(
                "last_triggered_at",
                sa.DateTime(),
                nullable=True,  # Change to nullable initially
            )
        )

    # Update the columns with values from the 'value' column or default to current timestamp
    connection = op.get_bind()
    results = connection.execute(sa.text("SELECT id, value FROM run_state")).fetchall()

    for row in results:
        id, value = row
        updated_at = datetime.utcnow()
        last_triggered_at = datetime.utcnow()

        try:
            if value:
                json_value = json.loads(value)
                updated_at = json_value.get("updated_at", updated_at)
                last_triggered_at = json_value.get("last_triggered_at", last_triggered_at)
        except json.JSONDecodeError:
            # If JSON is invalid, use current timestamp
            logger.error(f"Invalid JSON for run_state {id}: {value}")
            pass

        # Update the row with new values
        connection.execute(
            sa.text(
                "UPDATE run_state SET updated_at = :updated_at, last_triggered_at = :last_triggered_at WHERE id = :id"
            ),
            {"id": id, "updated_at": updated_at, "last_triggered_at": last_triggered_at},
        )

    # Make the columns non-nullable
    with op.batch_alter_table("run_state", schema=None) as batch_op:
        batch_op.alter_column("updated_at", nullable=False)
        batch_op.alter_column("last_triggered_at", nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("run_state", schema=None) as batch_op:
        batch_op.drop_column("updated_at")
        batch_op.drop_column("last_triggered_at")

    # ### end Alembic commands ###
